{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Linux Guide and Hints","text":"<p>The source code for this page can be found on github. This page contains tutorials and generally useful information regarding packages and system administration in Fedora and Enterprise Linux (Rocky Linux, CentOS Stream).</p> <p>Use the navigation to the left.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<p>Here are some quick links to solid documentation:</p> <ul> <li>Fedora Quick Docs</li> <li>Fedora Latest Release Docs</li> </ul>"},{"location":"#notes","title":"Notes","text":"<p>Due to the number of articles out there about disabling SELinux, we felt this note was important.</p> <p>Disabling SELinux is and almost always will be a terrible idea. See our antipatterns page as well as the Red Hat Enterprise Linux documentation, Fedora Docs, and Rocky Linux documentation.</p>"},{"location":"archive/","title":"Archives","text":"<p>This section is for archives. Most of these pages were created by one of our late contributors and have not been updated since his passing. As such, we have moved most of them here as clean up.</p>"},{"location":"el/","title":"Enterprise Linux","text":"<p>This section contains various articles on setups for Enterprise Linux and Fedora systems.</p>"},{"location":"el/builds/","title":"Auto-Provisioning","text":"<p>This page goes over various ways that installs can be automated without the use of PXE. Instead, we can use templated scripts with pre-configured commands, boot images, and mirrors for builds. We cover the following here:</p> <ul> <li>CentOS Stream 9</li> <li>Enterprise Linux 8, 9</li> <li>Fedora</li> <li>openSUSE 15+</li> <li>Windows Server</li> </ul>"},{"location":"el/freeipa/","title":"FreeIPA","text":"<p>This page is a series of notes and information that goes over how to install and configure FreeIPA on Enterprise Linux 9/10 servers with replicas, as well as configuring client machines to connect and utilize FreeIPA resources, policies (eg sudo), and host based access control methods. We will also go over a scenario of configuring a trust with an Active Directory domain. The client setup will work for Fedora users as the packages are the same, just newer versions.</p>"},{"location":"el/freeipa/#overview","title":"Overview","text":"<p>FreeIPA is an integrated security information management system combining Linux, a Directory Server (389), Kerberos, NTP, DNS, DogTag. It's a system that can be loosely compared to Active Directory in what it attempts to solve for Linux and UNIX clients and even mixed environments. While it is not an active directory, it is an integrated Identity and Authentication solution for Linux/UNIX environments, which means it does not support Windows clients. One problem that FreeIPA attempts to solve is giving back control to the Linux/UNIX administration teams of access, authentication, and authorization rather than trying to integrate directly into Active Directory, where the controls do not work the same or do not work at all. And because of this, no third party software is required to be installed.</p>"},{"location":"el/freeipa/#requirements","title":"Requirements","text":"<p>Here are the list of requirements below.</p> <ul> <li>Enterprise Linux 9+ or Fedora Linux</li> <li>An active internet connection to install the packages required or   available internal mirrors</li> <li>2 core, 4GB system with at least 10GB+ disk for /var/lib/dirsrv</li> <li>DNS domain delegation (if a DNS appliance or server already exists)</li> </ul>"},{"location":"el/freeipa/#tutorial-preface-notes-and-recommendations","title":"Tutorial Preface, Notes, and Recommendations","text":"<p>Potential Pitfalls!</p> <ul> <li>Leave SELinux enabled at all times. You will not run into SELinux   issues</li> <li>FreeIPA runs better when it controls the DNS domain that it is   given - It is recommended DNS is delegated or that FreeIPA run DNS   entirely</li> <li>FreeIPA does not run DHCP. ISC DHCP can be configured to do dynamic   DNS updates to FreeIPA or hosts can be configured to perform dynamic   DNS updates</li> </ul> <p>Recommended Information</p> <ul> <li>Keep selinux set to enforcing</li> <li> <p>DNS - You must be careful when using DNS. Here are   recommendations.<sup>1</sup></p> <ul> <li>Recommendation 1: FreeIPA runs your entire DNS for your   network - This requires the DHCP servers to set the DNS servers   to the IPA servers. This will be useful in the case that your   clients will have their SSH keys added as SSHFP records to DNS   when enrolled as clients. This also gives you the added benefit   of a client updating its own DNS entries (A and PTR records) if   the client is DHCP enabled and the IP changes if you so choose.</li> <li>Recommendation 2: FreeIPA is delegated a subdomain of a domain   used already in the network - It's not required for hosts to   live in the subdomain to be a member of the IPA domain, but you   will lose out on kerberos SSO. Do not try to hijack a domain.</li> </ul> </li> <li> <p>Consider setting up a trust with Active Directory if you are in a   mixed environment, eg Active Directory already exists.</p> </li> <li>IPA servers should have static assigned addresses - Configured via   nmcli or directly in /etc/sysconfig/network-scripts/ifcfg-*</li> <li>Try to avoid running FreeIPA without DNS - while possible, you are   creating higher maintenance</li> </ul> <p>Trust Information</p> <p>If you are in a mixed environment (both Windows and Linux/UNIX), it may prove useful to setup a trust between FreeIPA and Active Directory. If this is the case, they will need to be in different domains (e.g.,  example.com and ipa.example.com, or example.com and example.net).</p> <p>If you are in a larger environment, it may be detrimental instead. In this case, having a way to keep users in sync between AD and IPA might be the better option. This is because AD lookups can be resource intensive, and a large AD environment can slow down performance or not work at all without sssd tuning.</p> <p>All trust information is in this section</p>"},{"location":"el/freeipa/#dns","title":"DNS","text":"<p>As noted in the previous section, you must try not to hijack a domain. You can migrate records over to FreeIPA's DNS if you'd like, but care must be taken with that approach.</p> <p>While FreeIPA can do the typical DNS server work such as forward/reverse zones and various types of records, it should not be considered a full solution. It does not support views (eg, you can't have internal and external views). In the event you need to have views, that's when you need a different DNS server or service to provide this to you.</p> <p>There are two ways you can have DNS entries updated dynamically for clients, <code>--enable-dns-updates</code> for ipa-client-install and DHCP dynamic DNS updates. Both are sufficient. The latter requires additional work and is outside the scope of this document.</p>"},{"location":"el/freeipa/#external-dns-server","title":"External DNS Server","text":"<p>It is possible to run FreeIPA without a DNS server and have all records handled from an external source. This is a reasonable configuration and many users of FreeIPA actively use this setup.</p> <p>When updating records, or determining what the records will need to look like on the DNS server, you will need to run the following command:</p> <pre><code>ipa dns-update-system-records --dry-run --out=nsupdate.out\n</code></pre> <p>This will show the records needed for your IPA domain and it will also produce an nsupdate file for you to view or use as needed.</p>"},{"location":"el/freeipa/#delegation","title":"Delegation","text":"<p>Throughout this guide, you may find or see examples of domain delegation, assuming there is an AD trust or perhaps it's just a separate domain. This is because it might be a real world example for some environments. It is also a result of doing a lab work to maintain this document. Regardless of what it is, it may be realistic that some environments have AD or a separate DNS appliance already in place.</p> <p>With delegation, it is not required for clients to have records in the IPA DNS domain. They can be in other domains, as long as they have all required record types (e.g., A/AAAA/PTR), with the caveat that SSO via kerberos will fail.</p> <p>When setting up delegation, refer to the documentation for your appliance or software. There may be differences between delegating a whole domain or delegating a subdomain.</p> <p>See below for a subdomain delegation example in bind.</p> <pre><code>$ORIGIN example.com.\n@ IN SOA ... ( )\n                        NS      np-ad01\n                        NS      np-ad02\nnp-ad01                 A       10.200.0.232\nnp-ad02                 A       10.200.0.233\n; Many other records here, pertaining to AD, eg msdcs and SRV records\n\n; IPA records\n$ORIGIN ipa.example.com.\n@                       NS      np-ipa01\n                        NS      np-ipa02\nnp-ipa01                A       10.200.0.230\nnp-ipa02                A       10.200.0.231\n</code></pre> <p>nsupdates</p> <p>Note that AD can send nsupdates to a DNS server if given the permissions. As of this writing, FreeIPA does not do this, which is why DNS delegation is recommended.</p>"},{"location":"el/freeipa/#ipa-servers-in-a-subdomain","title":"IPA Servers in a Subdomain","text":"<p>There is a chance you may have your initial IPA servers in a subdomain while managing the top-level domain, for example \"ipa01.subdomain.example.com\" managing \"example.com\". This creates a chicken-and-egg problem where the SRV and URI records are correctly pointing to the names, but there are no A records to provide the appropriate answer to clients. This happens because the initial the expectation of <code>ipa-server-install</code> is that the domain controllers will live in the same domain/realm that it manages.</p> <p>The proper way around this is to create the subdomain(s) that your IPA servers will live in and create the missing A records.</p> <pre><code>ipa dnszone-add subdomain.example.com --dynamic-update=true\nipa dnsrecord-add subdomain.example.com ipa01 --a-ip-address=10.100.0.241\nipa dnsrecord-add example.com subdomain --ns-rec=ipa01.subdomain\n</code></pre> <p>Note that for each replica you add, you will need to modify the NS record in your root domain.</p>"},{"location":"el/freeipa/#server-setup","title":"Server Setup","text":""},{"location":"el/freeipa/#required-packages","title":"Required Packages","text":"<ul> <li>ipa-server</li> <li>ipa-client (required as an IPA server is technically a client of the   domain)</li> <li>ipa-server-dns (required for using the internal DNS)</li> <li>sssd/sssd-ipa (pulled in as dependencies)</li> </ul>"},{"location":"el/freeipa/#optional-packages","title":"Optional Packages","text":"<ul> <li>ipa-server-trust-ad if using an AD trust</li> </ul>"},{"location":"el/freeipa/#installation","title":"Installation","text":"<p>To install the server, make sure the hostname is set to the A records and NS delegations you've put in DNS (which won't respond to a DNS lookup). If these are stand-alone, then you can just keep it at the top level (eg, example.com). You'll also need to modify /etc/hosts, set static IP addresses, and then run the ipa-server-install command.</p> <pre><code>% hostnamectl set-hostname server1.ipa.example.com\n% nmcli con mod ens192 ipv4.address 10.200.0.230/24\n% nmcli con mod ens192 ipv4.gateway 10.200.0.1\n% nmcli con mod ens192 ipv4.method manual\n% nmcli con up ens192\n% vi /etc/hosts\n. . .\n10.200.0.230 server1.ipa.example.com\n10.200.0.231 server2.ipa.example.com\n\n# Fedora\n% dnf install freeipa-server{,-common,-dns} -y\n\n# Enterprise Linux 9+\n% dnf install ipa-server ipa-server-dns ipa-client sssd sssd-ipa -y\n\n# Setup\n# Enterprise 9+\n% firewall-cmd --permanent --add-service={freeipa-4,ntp,dns}\n% firewall-cmd --complete-reload\n% ipa-server-install \\\n    --no_hbac_allow \\ &lt;-- If you want to have HBAC allow_all disabled initially\n    --no-ntp \\ &lt;-- If you want to host NTP from IPA, take off --no-ntp\n    --setup-dns \\\n    --realm IPA.EXAMPLE.COM \\\n    --domain example.com \n\n. . . (show steps here)\n</code></pre> <p>While not officially recommended, you could have two accounts. One for administration of servers and the domain and one for your workstation, similar to separating domain users and domain administrators in active directory. You don't have to follow this, but at least there's a form of separation.</p> <pre><code>% kinit admin\n% ipa user-add --first=First --last=Last --cn=\"First Last Admin\" --gecos=\"First Last Admin\" flast2\n% ipa group-add-member --users=flast2 admins\n</code></pre>"},{"location":"el/freeipa/#replica","title":"Replica","text":"<p>On the replica, ensure you repeat the same steps as above.</p> <pre><code>% hostnamectl set-hostname server2.ipa.example.com\n% nmcli con mod ens192 ipv4.address 10.200.0.231/24\n% nmcli con mod ens192 ipv4.gateway 10.200.0.1\n% nmcli con mod ens192 ipv4.method manual\n% nmcli con up ens192\n% vi /etc/hosts\n. . .\n10.200.0.230 server1.ipa.example.com\n10.200.0.231 server2.ipa.example.com\n\n% dnf install ipa-server ipa-server-dns ipa-client sssd sssd-ipa -y\n# Enterprise 9+\n% firewall-cmd --permanent --add-service={freeipa-4,ntp,dns}\n% firewall-cmd --complete-reload\n% ipa-replica-install --no-forwarders --setup-ca \\\n    --setup-dns                                  \\\n    --no-ntp                                     \\\n    --principal admin                            \\\n    --admin-password \"ChangePass123\"             \\\n    --domain ipa.example.com\n. . . (show steps)\n</code></pre> <p>You should now be able to see your replicas.</p> <pre><code>% ipa-replica-manage list\nserver1.ipa.example.com: master\nserver2.ipa.example.com: master\n</code></pre>"},{"location":"el/freeipa/#replica-automation","title":"Replica Automation","text":"<p>It is possible to automate the replica installation. To automate the replica installation, the following requirements would need to be met:</p> <ul> <li>Server must be added as a client (ipa-client-install) with an IP   address on the commandline</li> <li>Server must be added to the ipaservers host group</li> <li>ipa-replica-install ran without principal and passwords</li> </ul> <p>Once you have a server added as a client and then added to the ipaservers host group, you would run a command like this:</p> <pre><code>% ipa-replica-install --ssh-trust-dns --unattended --setup-ca --mkhomedir --setup-dns --no-forwarders\n</code></pre> <p>If you have forwarders, use the <code>--forwarders</code> option instead.</p>"},{"location":"el/freeipa/#server-migrationupgrade","title":"Server Migration/Upgrade","text":"<p>Performing a migration is a multi-step process. Typically you are going from one major version of Enterprise Linux (8 or 9) to another (such as 10). Regardless of which version you are migrating from, the typical beginning steps are:</p> <ul> <li>System's time is verified for time synchronization like using   ntpstat or equivalent</li> <li>Server roles are verified in the current environment using   <code>ipa server-role-find --status enabled --server ipa.example.com</code></li> <li>New system is installed and enrolled as a client</li> <li>New system is added as a replica with required server roles</li> </ul> <p>The below is in the case of a single master installation and doesn't take into account of multiple version jumps. Let's say you have two old Enterprise Linux replicas instead. There are two approaches you can take:</p> <ul> <li>Install a new Enterprise Linux system, add it, reinstall old system   to the new version, add it back.</li> <li>Install two new Enterprise Linux systems, add them as needed, power   off old systems.</li> </ul> <p>Below is an example, with X being the old version, and Y being the new.</p> <ul> <li>Enterprise Linux Y system is installed and enrolled as a client</li> <li>Enterprise Linux Y system is added as a replica</li> <li>Change CRL to Enterprise Linux Y system and adjust settings on   Enterprise Linux X CA master and new Enterprise Linux Y replica for   pki-tomcatd and httpd</li> <li>Test user is created to ensure DNA range is adjusted</li> <li>Verify DNA range</li> <li>Stop first Enterprise Linux X IPA services, remove replica,   uninstall, power off.</li> <li>Second Enterprise Linux Y system is installed and enrolled as a   client</li> <li>Second Enterprise Linux Y system is added as a replica</li> <li>Test user is created again to ensure DNA range is adjusted</li> <li>Verify DNA range</li> <li>Stop second Enterprise Linux X IPA services, remove replica,   uninstall, power off.</li> </ul>"},{"location":"el/freeipa/#el8-to-el9","title":"EL8 to EL9","text":"<pre><code># Enterprise Linux 9\n% dnf install ipa-server ipa-server-dns -y\n% ipa-client-install --realm EXAMPLE.COM --domain example.com\n% kinit admin\n\n# Add other switches that you feel are necessary, such as forwarders, kra, ntp...\n% ipa-replica-install --setup-dns --setup-ca --ssh-trust-dns --mkhomedir\n\n# Verify all services are in a RUNNING state\n% ipactl status\nDirectory Service: RUNNING\n. . .\n\n% ipa-csreplica-manage list\nelX.example.com: master\nelY.example.com: master\n\n% ipa-csreplica-manage list --verbose elY.example.com\nDirectory Manager password:\n\nelX.example.com\n  last init status: None\n  last init ended: 1970-01-01 00:00:00+00:00\n  last update status: Error (0) Replica acquired successfully: Incremental update succeeded\n  last update ended: 2022-08-12 18:11:11+00:00\n</code></pre> <p>Set the CA renewal master to the new system and change the CRL settings</p> <pre><code>% ipa config-mod --ca-renewal-master-server elY.example.com\n\n# Remove the ca.certStatusUpdateInterval entry or set it to 600 (default) on elY\nelY% vim /etc/pki/pki-tomcat/ca/CS.cfg\n\n# Restart the ipa services\nelY% ipactl restart\n\n# Set the value of ca.certStatusUpdateInterval on elX to 0\nelX% vim /etc/pki/pki-tomcat/ca/CS.cfg\nca.certStatusUpdateInterval=0\n\nelX% ipactl restart\n\nelX% ipa-crlgen-manage status\nCRL generation: enabled\n. . .\n\nelX% ipa-crlgen-manage disable\nStopping pki-tomcatd\nEditing /var/lib/pki/pki-tomcat/conf/ca/CS.cfg\nStarting pki-tomcatd\nEditing /etc/httpd/conf.d/ipa-pki-proxy.conf\nRestarting httpd\nCRL generation disabled on the local host. Please make sure to configure CRL generation on another master with ipa-crlgen-manage enable.\nThe ipa-crlgen-manage command was successful\n\nelX% ipa-crlgen-manage status\nCRL generation: disabled\n</code></pre> <p>Create a test user to ensure DNA range is adjusted and replication is working</p> <pre><code>elY% ipa user-add --first=testing --last=user testinguser1\n\n# Test on both systems\nelX% ipa user-find testinguser1\nelY% ipa user-find testinguser1\n</code></pre> <p>Verify DNA range.</p> <pre><code># There should be ranges for both replicas\n% ipa-replica-manage dnarange-show\nelX.example.com: ...\nelY.example.com: ...\n</code></pre> <p>Stop old Enterprise Linux IPA services, remove replica, uninstall.</p> <pre><code># Stop all elX services\nelX% ipactl stop\n\n# Delete the elX system from the topology\nelY% ipa server-del elX.example.com\n\n# Uninstall and/or power down system\nelX% ipa-server-install --uninstall\nelX% init 0\n</code></pre> <p>See this page for more information.</p>"},{"location":"el/freeipa/#el9-to-el10","title":"EL9 to EL10","text":"<pre><code># Enterprise Linux 10\n% dnf install ipa-server ipa-server-dns -y\n% ipa-client-install --realm EXAMPLE.COM --domain example.com\n% kinit admin\n\n# Add other switches that you feel are necessary, such as forwarders, kra, ntp...\n% ipa-replica-install --setup-dns --setup-ca --ssh-trust-dns --mkhomedir\n\n# Verify all services are in a RUNNING state\n% ipactl status\nDirectory Service: RUNNING\n. . .\n\n% ipa-csreplica-manage list\nelX.example.com: master\nelY.example.com: master\n\n% ipa-csreplica-manage list --verbose elY.example.com\nDirectory Manager password:\n\nelX.example.com\n  last init status: None\n  last init ended: 1970-01-01 00:00:00+00:00\n  last update status: Error (0) Replica acquired successfully: Incremental update succeeded\n  last update ended: 2022-08-12 18:11:11+00:00\n</code></pre> <p>Set the CA renewal master to the new system and change the CRL settings</p> <pre><code>% ipa config-mod --ca-renewal-master-server elY.example.com\n\n# Remove the ca.certStatusUpdateInterval entry or set it to 600 (default) on elY\nelY% vim /etc/pki/pki-tomcat/ca/CS.cfg\n\n# Restart the ipa services\nelY% ipactl restart\n\n# Set the value of ca.certStatusUpdateInterval on elX to 0\nelX% vim /etc/pki/pki-tomcat/ca/CS.cfg\nca.certStatusUpdateInterval=0\n\nelX% ipactl restart\n\nelX% ipa-crlgen-manage status\nCRL generation: enabled\n. . .\n\nelX% ipa-crlgen-manage disable\nStopping pki-tomcatd\nEditing /var/lib/pki/pki-tomcat/conf/ca/CS.cfg\nStarting pki-tomcatd\nEditing /etc/httpd/conf.d/ipa-pki-proxy.conf\nRestarting httpd\nCRL generation disabled on the local host. Please make sure to configure CRL generation on another master with ipa-crlgen-manage enable.\nThe ipa-crlgen-manage command was successful\n\nelX% ipa-crlgen-manage status\nCRL generation: disabled\n</code></pre> <p>Create a test user to ensure DNA range is adjusted and replication is working</p> <pre><code>elY% ipa user-add --first=testing --last=user testinguser1\n\n# Test on both systems\nelX% ipa user-find testinguser1\nelY% ipa user-find testinguser1\n</code></pre> <p>Verify DNA range.</p> <pre><code># There should be ranges for both replicas\n% ipa-replica-manage dnarange-show\nelX.example.com: ...\nelY.example.com: ...\n</code></pre> <p>Stop old Enterprise Linux IPA services, remove replica, uninstall.</p> <pre><code># Stop all elX services\nelX% ipactl stop\n\n# Delete the elX system from the topology\nelY% ipa server-del elX.example.com\n\n# Uninstall and/or power down system\nelX% ipa-server-install --uninstall\nelX% init 0\n</code></pre> <p>See this page for more information.</p>"},{"location":"el/freeipa/#disable-anonymous-bind","title":"Disable Anonymous Bind","text":"<p>In some cases, it is a requirement to disable all anonymous binds. If this is the case, you will need to modify cn=config on each master as it is not replicated.</p> <p>rootdse</p> <p>Some applications do anonymous binds to the directory server to determine its version and it supported controls. While it is possible to disable anonymous binds completely, it is important to know that if you disable the rootdse binds, applications that do anonymous lookups to get server information will fail.</p> <pre><code>% ldapmodify -xZZ -D \"cn=Directory Manager\" -W -h server.ipa.example.com\nEnter LDAP Password:\ndn: cn=config\nchangetype: modify\nreplace: nsslapd-allow-anonymous-access\nnsslapd-allow-anonymous-access: rootdse\n\nmodifying entry \"cn=config\"\n</code></pre>"},{"location":"el/freeipa/#client-setup","title":"Client Setup","text":""},{"location":"el/freeipa/#enterprise-linux-fedora","title":"Enterprise Linux &amp; Fedora","text":"<p>Ensure your /etc/resolv.conf (or other dns settings) are set correctly. Ensure your hostname is also set correctly.</p> <pre><code>% dnf install ipa-client -y\n% ipa-client-install --realm EXAMPLE.COM --domain example.com --mkhomedir\n</code></pre>"},{"location":"el/freeipa/#mac-clients","title":"Mac Clients","text":"<p>MacOS Clients are an interesting workstation to setup as a FreeIPA client. It takes a little bit of fighting and troubleshooting, but it can work with the right settings. Note that as of Catalina, you may not be able to login to your account nor will creating a mobile account function as you would expect. This may have changed in recent macos releases, so YMMV.</p> <p>Other Guides</p> <p>There are a couple of guides out there that you may have found before (if you looked) that help setup IPA for Mac. There's one for much older (I think Lion) and one for Sierra. This section was made mostly for my own reference because I found some things in both of those guides didn't address issues I ran into one way or another and couldn't find any information on. The FreeIPA users mail list didn't have any archives with people having similar issues.</p> <p>If you are interested in the other guides to compare to, you may see them here (recent) and here (older)</p> <p>AD Users</p> <p>You cannot login as AD users on a Mac when going through FreeIPA with a trust. You can, in theory, point to the cn=compat tree and set the attribute mapping to rfc2307. In my tests, I have never been able to get this to work. This section, I am going to assume you are going to be logging in as a user in IPA. If you are in a mixed environment, add your Mac to your AD domain instead.</p> <p>Anonymous Bind</p> <p>There may be cases where if you have disabled anonymous binds in IPA, this setup may not work, even if you do use a bind account. You will need to experiment with this if you plan on using a bind account and plan on or currently have IPA not allowing anonymous binds.</p> <p>Check your system's hostname. You want to make sure it has a hostname defined for it in the domain the mac sits in, even if it's dynamic via DHCP/DNS.</p> <pre><code>% sudo scutil --set HostName mac.example.com\n</code></pre> <p>Get the IPA certificate. You'll need to double click it after you get it and import it.</p> <pre><code>% cd ~/Desktop &amp;&amp; curl -OL http://server1.ipa.example.com/ipa/config/ca.crt\n% sudo mkdir /etc/ipa\n% sudo cp ca.crt /etc/ipa/ca.crt\n% sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /etc/ipa/ca.crt\n</code></pre> <p>On the IPA server, you will need to create a host and get the keytab.</p> <p>Unknown encryption types</p> <p>You may run into a situation where your keytabs have unknown encryption types that can negatively affect your macOS client. If this happens, you can regenerate the keytab using <code>-e aes256-cts,aes128-cts</code> or you can use ktutil to remove them.</p> <pre><code>% ipa host-add mac.example.com --macaddress=\"00:00:00:00:00:00\"\n\n# To ensure compatibility, consider adding -e aes256-cts,aes128-cts\n% ipa-getkeytab -s server1.ipa.example.com -p host/mac.example.com -k /tmp/krb5.keytab\n</code></pre> <p>You will need to transfer that keytab to your mac.</p> <pre><code>% cd ~\n% scp user@server1.ipa.example.com:/tmp/krb5.keytab .\n% sudo mv krb5.keytab /etc/krb5.keytab\n% sudo chmod 640 /etc/krb5.keytab\n% sudo chown root:_keytabusers /etc/krb5.keytab\n</code></pre> <p>Configure /etc/krb5.conf</p> <pre><code>[domain_realm]\n    .ipa.example.com = IPA.EXAMPLE.COM\n    ipa.example.com = IPA.EXAMPLE.COM\n\n[libdefaults]\n    default_realm = IPA.EXAMPLE.COM\n    allow_weak_crypto = yes \n    dns_lookup_realm = true\n    dns_lookup_kdc = true\n    rdns = false\n    ticket_lifetime = 24h\n    forwardable = yes \n    renewable = true\n\n[realms]\n    IPA.EXAMPLE.COM = {\n        # You don't need to set these when your DNS is setup correctly, but it doesn't hurt to have a reference.\n        # In my opinion, you shouldn't hardcode these values. You have to have a good reason to.\n        #kdc = tcp/server1.ipa.example.com\n        #kdc = tcp/server2.ipa.example.com\n        #admin_server = tcp/server1.ipa.example.com\n        #admin_server = tcp/server2.ipa.example.com\n        pkinit_anchors = FILE:/etc/ipa/ca.crt\n    }\n</code></pre> <p>You'll want to do a kinit to verify. If it works, you should be able to go to the FreeIPA webui and check that the host is \"enrolled\" (Identity -&gt; Hosts).</p> <pre><code>% kinit username@IPA.EXAMPLE.COM\n</code></pre> <p>You need to modify a couple of pam files. I'll explain why they need to be changed.</p> <pre><code>% sudo vi /etc/pam.d/authorization\n# authorization: auth account\n# Originally we used default_principal but it was found it can cause issues on\n# Sonoma and newer. If you have issues, remove default_principal.\nauth          optional       pam_krb5.so use_first_pass use_kcminit no_auth_ccache default_principal\nauth          optional       pam_ntlm.so use_first_pass\nauth          required       pam_opendirectory.so use_first_pass nullok\naccount       required       pam_opendirectory.so\n\n% sudo vi /etc/pam.d/screensaver\n# screensaver: auth account\n# Originally we used default_principal but it was found it can cause issues on\n# Sonoma and newer. If you have issues, remove default_principal\nauth       optional       pam_krb5.so use_first_pass use_kcminit default_principal\nauth       required       pam_opendirectory.so use_first_pass nullok\naccount    required       pam_opendirectory.so\naccount    sufficient     pam_self.so\naccount    required       pam_group.so no_warn group=admin,wheel fail_safe\naccount    required       pam_group.so no_warn deny group=admin,wheel ruser fail_safe\n\n% sudo vi /etc/pam.d/passwd\n# Originally the line below was required. There may be issues with\n# having it on Sonoma and newer. YMMV.\npassword   sufficient     pam_krb5.so\nauth       required       pam_permit.so\naccount    required       pam_opendirectory.so\npassword   required       pam_opendirectory.so\nsession    required       pam_permit.so \n</code></pre> <p>After these changes, you'll need to go into make some changes with the directory utility. This depends on your macOS version.</p>"},{"location":"el/freeipa/#ventura-and-likely-newer","title":"Ventura and likely newer","text":"<ol> <li>Go to system preferences -&gt; users &amp; groups</li> <li>Set \"automatic login\" to \"off\"</li> <li>Click \"edit\" next to \"Network account server\"</li> <li>Type in one of your IPA servers (you can duplicate it later for    backup purposes). Press enter and wait for it to be \"green\".</li> <li>Click \"Open Directory Utility\"</li> <li>Click the \"lock\" to unlock the utility</li> <li>Click \"LDAPv3\" and click the pencil at the bottom left corner</li> <li> <p>Select the \"from server\" portion under LDAP mappings and clck    RFC2307. You may also leave it as custom.</p> </li> <li> <p>If you select rfc2307, it will ask for your base DN (eg,   dc=ipa,dc=example,dc=com)</p> </li> <li> <p>If you select \"custom\", you will need to do this manually for each   record type. You're better off using rfc2307 and working from   there</p> </li> <li> <p>Click \"edit\"</p> </li> <li>Click the \"+\" to add a groups record type or scroll and find    \"groups\" and select it. Add the following object classes</li> </ol> Record Type ObjectClasses Groups posixGroup ipausergroup groupOfNames* <p>Note</p> <p>\"groupOfNames\" is optional here, because it seems that the directory utility doesn't understand this concept.</p> <ol> <li>Expand \"groups\" and ensure the following for each record type. You    can click the \"+\" to add the attribute types as needed.</li> </ol> Attribute Mapping PrimaryGroupID gidNumber RecordName cn <ol> <li>Click the \"+\" to add a users record type or scroll and find    \"users\".</li> <li>Select \"users\" and ensure the following object classes exist. You    can click the \"+\" to add them when needed.</li> </ol> Record Type ObjectClasses Users inetOrgPerson posixAccount shadowAccount apple-user <ol> <li>Expand \"users\" and ensure the following for each record type. You    can click the \"+\" to add the attribute types as needed. Do not    set homeDirectory otherwise you will fail to login.</li> </ol> Attribute Mapping AuthenticationAuthority uid GeneratedUID GeneratedUID or ipaUniqueID NFSHomeDirectory #/Users/$uid$ PrimaryGroupID gidNumber RealName cn RecordName uid UniqueID uidNumber UserShell loginShell AltSecurityIdentities #Kerberos:$krbPrincipalName$ <ol> <li>If using custom mapping, click reach record type you created and    ensure the base DN is set.</li> <li>Make sure each record type is set to all subtrees if needed.</li> <li>Click \"security\" and set an authentication bind DN if needed</li> <li>Click OK.</li> <li>Click Search Policy</li> <li>Double check that \"/LDAPV3/server1.ipa.example.com\" is listed    beneath \"/Local/Default\". If it is not, select \"search patch\"    and set it to custom and add it. Click Apply after.</li> <li>Close everything until you're back to the users &amp; groups section of    preferences</li> <li>Go to Lock Screen.</li> <li>Set \"login window shows\" to \"name and password\"</li> <li>Open a terminal.</li> </ol> <pre><code>% dscacheutil -flushcache\n% dscacheutil -q user -a name username\n</code></pre> <p>You should get a return.</p> <p>Login to the account for the first time from the login screen. Once the setup has complete, log out and back to a login account. In a terminal, you will need to make a mobile account.<sup>3</sup></p> <pre><code>% sudo /System/Library/CoreServices/ManagedClient.app/Contents/Resources/createmobileaccount -n username -P\n# Press enter, enter the user's password. sudo may hang if you don't do this.\n# OPTIONAL: Allow the mobile account to be an administrator\n% sudo dscl . -append /Groups/admin GroupMembership username\n</code></pre> <p>Go to system preferences and ensure the account is a mobile account.</p>"},{"location":"el/freeipa/#monterey-and-older","title":"Monterey and older","text":"<ol> <li>Go to system preferences -&gt; users &amp; groups -&gt; login options -    Click the 'lock' to make changes</li> <li>Set the following:</li> </ol> <pre><code>Automatic login: Off\nDisplay login window as: Name and Password\nShow fast user switching menu as: Full Name\n</code></pre> <ol> <li>Click \"Join\" next to \"Network Account Server\"</li> <li>Enter one of your IPA servers (you can duplicate it later for backup    purposes) and click Continue.</li> <li>Ensure \"Allow network users to log in at login window\" is    checked - Make sure it's set to all users</li> <li>Click \"edit\" next to the \"Network Account Server\"</li> <li>Click \"Open Directory Utility\"</li> <li>Click the lock, edit LDAPv3</li> <li>Select your server and click \"edit\"</li> <li>Set the following options:</li> </ol> <pre><code>Open/close times out in 5 seconds\nQuery times out in 5 seconds\nConnection idles out in 1 minute (this can't be changed)\nEncrypt using SSL (selected)\n</code></pre> <ol> <li>Click \"Search &amp; Mappings\"</li> <li> <p>You may either select \"rfc2307\" from the dropdown or select     custom. It will ask your base DN (eg, dc=ipa,dc=example,dc=com)</p> </li> <li> <p>If you select rfc2307, it will ask for your base DN (eg,   dc=ipa,dc=example,dc=com)</p> </li> <li> <p>If you select \"custom\", you will need to do this manually for each   record type. You're better off using rfc2307 and working from   there</p> </li> <li> <p>Click the \"+\" to add a groups record type or scroll and find     \"groups\".</p> </li> <li>Select \"groups\", and ensure the following object classes exist.     You can click the \"+\" to add them when needed.</li> </ol> Record Type ObjectClasses Groups posixGroup ipausergroup groupOfNames* <p>Note</p> <p>\"groupOfNames\" is optional here, because it seems that the directory utility doesn't understand this concept.</p> <ol> <li>Expand \"groups\" and ensure the following for each record type. You     can click the \"+\" to add the attribute types as needed.</li> </ol> Attribute Mapping PrimaryGroupID gidNumber RecordName cn <ol> <li>Click the \"+\" to add a users record type or scroll and find     \"users\".</li> <li>Select \"users\" and ensure the following object classes exist. You     can click the \"+\" to add them when needed.</li> </ol> Record Type ObjectClasses Users inetOrgPerson posixAccount shadowAccount apple-user <ol> <li>Expand \"users\" and ensure the following for each record type. You     can click the \"+\" to add the attribute types as needed. Do not     set homeDirectory otherwise you will fail to login.</li> </ol> Attribute Mapping AuthenticationAuthority uid GeneratedUID GeneratedUID or ipaUniqueID HomeDirectory #/Users/$uid$ NFSHomeDirectory #/Users/$uid$ PrimaryGroupID gidNumber RealName cn RecordName uid UniqueID uidNumber UserShell loginShell AltSecurityIdentities #Kerberos:$krbPrincipalName$ <ol> <li>If using custom mapping, click reach record type you created and     ensure the base DN is set.</li> <li>Make sure each record type is set to all subtrees.</li> <li>Click \"security\" and set an authentication bind DN if needed</li> <li>Click OK</li> <li>Click OK</li> <li>Click on Search Policy.</li> <li>Double check that \"/LDAPV3/server1.ipa.example.com\" is listed     beneath \"/Local/Default\"</li> <li>Close everything until you're back to the users &amp; groups section of     preferences</li> <li>Open a terminal.</li> </ol> <pre><code>% dscacheutil -flushcache\n% dscacheutil -q user -a name username\n</code></pre> <p>You should get a return.</p> <p>If you want to further verify users and groups after the above succeeds, open up the directory utility again. Click \"Directory Editor\", ensure you are searching for \"users\" and check that they appear in a list on the right hand side, optionally doing a search. In a default setup, you shouldn't need an account to do (some) anonymous lookups. If you changed that in any way, you will need to create a readonly system account in cn=sysaccounts,cn=etc.</p> <p>Login to the account for the first time from the login screen. Once the setup has complete, log out and back to a login account. In a terminal, you will need to make a mobile account.<sup>2</sup></p> <pre><code>% sudo /System/Library/CoreServices/ManagedClient.app/Contents/Resources/createmobileaccount -n username -P\n# Press enter and put in the password. sudo may not function if you don't do this step.\n# OPTIONAL: Allow the mobile account to be an administrator\n% sudo dscl . -append /Groups/admin GroupMembership username\n</code></pre> <p>Go to system preferences, users &amp; groups and ensure the account is a mobile account.</p>"},{"location":"el/freeipa/#general-macos-notes","title":"General macOS Notes","text":"<p>Group Resolution</p> <p>If you want groups from IPA to resolve to the system, you'll need to enable the compat tree when using this setup (RFC2307).</p> <p>Password Notes</p> <p>There are a couple of potential issues with this setup that you should be aware of as it pertains to mobile accounts.</p> <ul> <li>If you do a mobile account, changing your password through the   FreeIPA gui does not change your passwords on your system.</li> <li>If your account does not have any keytabs (eg, you haven't had your   mac on or haven't logged in in over 24 hours), you can login with   the new password and it will suceed. The system will cache the new   password right away. However, your keychain the first time will ask   for the old passwords and this is normal. So you can change them by   hand or you can log out and back in and the system will ask you if   you want to update the password and it will just update   automatically.</li> <li>There have been reports in a github issue that states you can change   the password in the system preferences but I've been unable to   confirm this.</li> </ul> <p>/Library no longer accessible</p> <p>It is no longer possible to access /Library by normal means on macOS. This unfortunately means you will need to do some steps, in particular the plist deployment steps, in a different way. You may need to do it manually in the directory utility after deploying everything else.</p> <p>User from IPA is not the owner</p> <p>Users not created by the first user on macOS are not able to run software updates, in any capacity. This means your IPA user, as you login to your system, will not be able to run <code>softwareupdate</code> nor run updates normally from system settings.</p> <p>To get around this, you will need to run:</p> <p><code>/usr/sbin/sysadminctl -secureTokenOn label - -adminUser nazu -adminPassword -</code></p> <p>Below is a script that can be adapted for you. It has not been tested on Monterey and up. This assumes that you took one mac and set it up properly and you created a tarball with the proper configuration. You could optionally setup a temporary NFS or samba mount that gets mounted as root and then unmounted at the end, if you so wish.</p> <pre><code>#!/bin/bash\nserverName=server1.ipa.example.com\nkrb5Conf=/etc/krb5.conf\nkrb5Tab=/etc/krb5.keytab\npamDirectory=/etc/pam.d\n\n# Add SSL cert to chain\nmkdir /etc/ipa\ncd /etc/ipa\ncurl -OL http://$serverName/ipa/config/ca.crt\nsecurity add-trusted-cert -d -k /Library/Keychains/System.keychain -r trustRoot /etc/ipa/ca.crt\n\n# Stop and flushout the Open Directory\n/usr/sbin/dscacheutil -flushcache\nlaunchctl unload /System/Library/LaunchDaemons/com.apple.opendirectoryd.plist\n\n# Pull the plist and pam files needed for IPA and deploy them, this assumes you setup one mac and zipped up the configurations\n# You can try your hand at dsconfigldap before pam, but I could never figure it out, honestly.\n# Relevant tar: tar czf /tmp/macconfig.tar.gz /Library/Preferences/OpenDirectory/Configurations /etc/pam.d/authorization \\ \n#                /etc/pam.d/screensaver /etc/pam.d/passwd /etc/krb5.conf\ncd /tmp\ncurl -OL http://$serverName/macconfig.tar.gz\ncd /\ntar xzf /tmp/macconfig.tar.gz\n\n# Add steps here for your keytab! Where are you getting it from?\ncp /tmp/mac.keytab /etc/krb5.keytab\nchown root:wheel /etc/krb5.keytab\nchmod 600 /etc/krb5.keytab\n\n# Start directory\nlaunchctl load /System/Library/LaunchDaemons/com.apple.opendirectoryd.plist\nsleep 30\n\n# Kill the loginwindow\nkillall loginwindow\n\n# If the system doesn't reboot here, reboot now.\n</code></pre> <p>If you want to move your local files, you will need to tread lightly here. I personally believe it's always good to start fresh though. Look into the ditto command. I suppose something like this can work:</p> <pre><code># make sure you're logged in as a different account away from your local account\n% sudo su -\nroot# cd /Users\nroot# ditto localfolder networkfolder (or maybe an mv?)\nroot# chown -R user:user folder\nroot# /System/Library/CoreServices/ManagedClient.app/Contents/Resources/createmobileaccount -n username -P\n</code></pre> <p>Another issue you may run into, if you have been using your Mac with a local account for a while, a lot of directories in /Applications will be owned by localuser:staff or localuser:admin. It's recommended to fix those too.</p> <p>Discovery</p> <p>The directory framework in MacOS has the ability to discover settings for a particular LDAP server that it is being connected to. FreeIPA does not contain the schema, plugins, nor the infrastructure to provide the same things (for example, mDNS/Avahi, among other things). There was a (WIP) plugin created in 2017 by abbra. However, it is unclear if this works at all, nor is it clear if it ever did and will in python3 (abbra noted at the time that it \"installs\" into python 2 directories, which hints to not being tested or working on python 3). Please see the following resources for discussion and information.</p> <ul> <li>Pagure</li> <li>freeipa-macosx-support</li> </ul>"},{"location":"el/freeipa/#suse","title":"SUSE","text":"<p>To setup openSUSE with FreeIPA, we'll need to do some manual work. This applies to SUSE 12 and up where the freeipa-client packages don't exist in the main repositories.</p> <p>freeipa repos</p> <p>There are OpenSUSE repos with the freeipa packages, though they are considered \"experimental\". If they show up in the base, then the below steps will be removed. However, if you are willing to use the repo, a lot of the steps below may not be needed. We have not tested this.</p> <pre><code># On an IPA server or client with the IPA utilities...\n% ipa host-add suse.example.com\n% /usr/sbin/ipa-getkeytab -s ipa.example.com -p host/suse.example.com -k /tmp/suse.keytab\n% scp /tmp/suse.keytab suse.example.com:/tmp/krb5.keytab\n\n# On the IPA client...\n% cp /tmp/krb5.keytab /etc\n% chmod 600 /etc/krb5.keytab\n% mkdir /etc/ipa\n% curl -o /etc/ipa/ca.crt http://ipa.example.com/ipa/config/ca.crt\n% curl -o /etc/pki/trust/anchors/ipa.example.com.crt http://ipa.example.com/ipa/config/ca.crt\n% update-ca-certificates\n% zypper install sssd sssd-ipa yast2-auth-client krb5-client openldap2-client cyrus-sasl-gssapi\n\n# Setup SSSD\n% vi /etc/sssd/sssd.conf\n[domain/example.com]\ncache_credentials = True\nkrb5_store_password_if_offline = True\nipa_domain = example.com\nipa_hostname = suse.example.com\n# Client Specific Settings\nipa_server = _srv_, ipa.example.com\ndns_discovery_domain = example.com\n# If we have a trust with domain resolution order\n#full_name_format = %1$s\n\nid_provider = ipa\nauth_provider = ipa\naccess_provider = ipa\nchpass_provider = ipa\n\nldap_tls_cacert = /etc/ipa/ca.crt\n\n[sssd]\nservices = nss, sudo, pam, ssh\ndomains = example.com\n\n[nss]\nfilter_users = root,ldap,named,avahi,haldaemon,dbus,radiusd,news,nscd,tomcat,postgres\nhomedir_substring = /home\n\n[pam]\n\n[sudo]\n\n[autofs]\n\n[ssh]\n\n# Setup kerberos\n% vi /etc/krb5.conf\n[libdefaults]\n  default_realm = EXAMPLE.COM\n  dns_lookup_realm = true\n  dns_lookup_kdc = true\n  rdns = false\n  dns_canonicalize_hostname = false\n  ticket_lifetime = 24h\n  forwardable = true\n  udp_preference_limit = 0\n  default_ccache_name = KEYRING:persistent:%{uid}\n\n\n[realms]\n  EXAMPLE.COM = {\n    pkinit_anchors = FILE:/var/lib/ipa-client/pki/kdc-ca-bundle.pem\n    pkinit_pool = FILE:/var/lib/ipa-client/pki/ca-bundle.pem\n  }\n\n[domain_realm]\n  .example.com = EXAMPLE.COM\n  example.com = EXAMPLE.COM\n  suse.example.com = EXAMPLE.COM\n\n# Setup pam\n% pam-config -a --sss --mkhomedir --mkhomedir-umask=0077 \\\n  --pwhistory --pwhistory-remember=5 --localuser --cracklib \\\n  --cracklib-minlen=14 --cracklib-dcredit=-1 --cracklib-ucredit=-1 \\\n  --cracklib-lcredit=-1 --cracklib-ocredit=-1 --cracklib-retry=3 --unix-sha512\n\n# Setup nsswitch (you can make it compat sss, but I use files sss)\n% sed -i.bak 's/compat$/files sss/g' /etc/nsswitch.conf\n% echo \"sudoers: files sss\" &gt;&gt; /etc/nsswitch.conf\n% sed -i '/netgroup/ s/nis/sss/g' /etc/nsswitch.conf\n\n# Depending on your suse version, you may want to set the nisdomainname\n# It does not hurt to set this\n% sed -i.bak '/NETCONFIG_NIS_STATIC_DOMAIN/ s/\"\"/\"example.com\"/g' /etc/sysconfig/network/config\n% netconfig update -f\n\n# Start sssd\n% systemctl enable sssd --now\n\n# Verify\n% id admin\n</code></pre> <p>In the case of having an IPA-AD trust, you may need to change a line in your pam configuration.</p> <pre><code>% sed -i 's/use_first_pass/forward_pass/g' /etc/pam.d/common-auth-pc\n\n# The affected line should appear like the below\nauth    sufficient      pam_sss.so      forward_pass\n</code></pre>"},{"location":"el/freeipa/#hbac","title":"HBAC","text":"<p>When we first setup our IPA servers, we had an option set to make it so hbac wasn't allowed for everyone. This way we have to create HBAC rules for our systems. I personally do this out of habit when working with IPA. What we need to do though is create an \"admin\" group that can login to all machines.</p> <pre><code>% ipa idrange-show IPA.EXAMPLE.COM_id_range\n  Range name: IPA.EXAMPLE.COM_id_range\n  First Posix ID of the range: 686600000\n  Number of IDs in the range: 200000\n  First RID of the corresponding RID range: 1000\n  First RID of the secondary RID range: 100000000\n  Range type: local domain range\n% ipa group-add --gid=686610000 linuxadm\n% ipa group-add-member --users=flast linuxadm\n</code></pre> <p>Now, let's create an HBAC for our Linux Administrator account for our group.</p> <pre><code>% ipa hbacrule-add --hostcat=all --servicecat=all --desc='linux admins all access' linuxadm\n% ipa hbacrule-add-user --groups=linuxadm linuxadm\n% ipa hbactest --rules=All_Systems --user=flast --host=server1.ipa.example.com --service=sshd\n% ipa hbactest --rules=All_Systems --user=aduser1@example.com --host=server1.ipa.example.com --service=sshd\n</code></pre> <p>You might want to create an HBAC rule specifically for your IPA admin accounts to have ssh access to the IPA servers too. You can follow something like the above to make it possible. Or you can just add the IPA admins group into the HBAC rule we just made above.</p>"},{"location":"el/freeipa/#sudo","title":"SUDO","text":"<p>Setting up sudo is relatively easy. SSSD (1.16.x and 2.X) supports IPA as a provider for sudo. Based on the last section, let's create a sample rule for our Linux admins that can login to every system, we want to ensure they can run all commands.</p> <pre><code>% ipa sudorule-add --runasusercat=all --hostcat=all --cmdcat=all --desc='linux admins all sudo' all_linux_sudo\n% ipa sudorule-add-user --groups=linuxadm all_linux_sudo\n</code></pre> <p>You can make this a little more specific, such as /bin/bash as everyone or otherwise. It's your call here. If you want to create a sudo rule and add some commands to it, you can do something like this.</p> <pre><code>% ipa sudorule-add sudo_rule\n% ipa sudorule-add-allow-command --sudocmds=\"/usr/bin/less\" sudo_rule\n</code></pre>"},{"location":"el/freeipa/#legacy-client-setup","title":"Legacy Client Setup","text":"<p>This applies to Solaris, OpenIndiana, others based on Illumos.</p>"},{"location":"el/freeipa/#solaris-11","title":"Solaris 11","text":"<p>Solaris 11 shares similar configuration to Solaris 10. There are a couple of manual things we have to do, but they are trivial. Solaris 11/Illumos will use TLS and sudo should just work.</p> <p>AD Groups</p> <p>In Solaris 10, users who logged in with AD users (with their short name) would appear as their full name (name@domain). This allowed their groups to fully resolve. However, in Solaris 11.4, this was not the case. Short name logins will work but your groups will not resolve as the compat tree uses the full name. To avoid running into this problem, you should be on at least SRU 11.4.7.4.0. Note that on a later SRU, you may need to setup an ID view (without overrides) for groups and sudo to work again.</p> <p>Below is for the service account like in the previous section, here as a reference.</p> <pre><code>dn: uid=solaris,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\nobjectclass: account\nobjectclass: simplesecurityobject\nuid: solaris\nuserPassword: secret123\npasswordExpirationTime: 20380119031407Z\nnsIdleTimeout: 0\n</code></pre> <pre><code>% ldapadd -xWD 'cn=Directory Manager' -f /tmp/solaris.ldif\n</code></pre> <p>Now, set the nisdomain.</p> <pre><code>% defaultdomain ipa.example.com\n% echo 'ipa.example.com' &gt; /etc/defaultdomain\n</code></pre> <p>Configure kerberos.</p> <pre><code>% vi /etc/krb5/krb5.conf\n[libdefaults]\ndefault_realm = IPA.EXAMPLE.COM\ndns_lookup_kdc = true\nverify_ap_req_nofail = false\n\n[realms]\nIPA.EXAMPLE.COM = {\n}\n\n[domain_realm]\nipa.example.com = IPA.EXAMPLE.COM\n.ipa.example.com = IPA.EXAMPLE.COM\n\n[logging]\ndefault = FILE:/var/krb5/kdc.log\nkdc = FILE:/var/krb5/kdc.log\nkdc_rotate = {\n period = 1d\n version = 10\n}\n\n[appdefaults]\nkinit = {\nrenewable = true\nforwardable= true\n}\n</code></pre> <p>Generate a keytab and bring it over.</p> <pre><code># on the ipa server\n% ipa host-add solaris11.example.com\n% ipa-getkeytab -s server1.ipa.example.com -p host/solaris11.example.com -k /tmp/solaris11.keytab\n\n# Transfer the keytab\n% scp /tmp/solaris11.keytab solaris11.example.com:/tmp\n\n# On the solaris 11 machine\n% cp /tmp/solaris11.keytab /etc/krb5/krb5.keytab\n% chmod 600 /etc/krb5/krb5.keytab\n% chmod 644 /etc/krb5/krb5.conf\n% chown root:sys /etc/krb5/*\n\n# Check the keytab\n% klist -ket /etc/krb5/krb5.keytab\n\n# Test that you can kinit\n% kinit flast2@IPA.EXAMPLE.COM\n</code></pre> <p>Create the LDAP configurations, bring the certificate, and create an NSS database.</p> <p>Solaris 11.3 vs 11.4</p> <p>Previously we had 11.3 and 11.4 configurations. We have removed 11.3 as we no longer support it.</p> <pre><code>% mkdir /etc/ipa /var/ldap\n% cd /etc/ipa\n% wget -O ipa.pem http://server1.ipa.example.com/ipa/config/ca.crt\n% cp * /var/ldap\n% vi /etc/ldap.conf\nbase dc=ipa,dc=example,dc=com\nscope sub\nbind_timelimit 120\ntimelimit 120\nuri ldap://server1.ipa.example.com\nsudoers_base ou=sudoers,dc=ipa,dc=example,dc=com\npam_lookup_policy yes\nTLS_CACERTDIR /var/ldap\nssl start_tls\ntls_checkpeer no\n</code></pre> <p>Now init the ldap client. We actually get to use a secure connection here. Kerberos is hit or miss, could never get sasl/GSSAPI to work.</p> <p>Different Trees - Trust or not?</p> <p>There are multiple examples of how to setup the trees. If using an AD trust, you should use the second example, where it looks at the compat tree for users. However, if you do not have trusts, then it is perfectly possible to still use the AD Trust example. Try both and see which works better for your environment.</p> <p>No Service Account</p> <p>If you have configured FreeIPA to not allow any anonymous connections, you will need to use a proxy account. We have provided the examples for this configuration.</p> <p>Without AD Trust</p> <pre><code># Without AD Trust (no proxy)\n% ldapclient manual -a authenticationMethod=tls:simple \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n\n# Without AD Trust (proxy)\n% ldapclient manual -a authenticationMethod=tls:simple \\\n                    -a credentialLevel=proxy \\\n                    -a proxyDN=\"uid=solaris,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\" \\\n                    -a proxyPassword=\"secret123\" \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com \\\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n\n# Without AD Trust (Kerberos) - Only works if Solaris is in the same DNS domain as IPA\n% ldapclient manual -a authenticationMethod=sasl/GSSAPI \\\n                    -a credentialLevel=self \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com \\\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n</code></pre> <p>With AD Trust</p> <pre><code># With AD Trust (no proxy)\n% ldapclient manual -a authenticationMethod=tls:simple \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n\n# With AD Trust (proxy)\n% ldapclient manual -a authenticationMethod=tls:simple \\\n                    -a credentialLevel=proxy \\\n                    -a proxyDN=\"uid=solaris,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\" \\\n                    -a proxyPassword=\"secret123\" \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com \\\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n\n# With AD Trust (Kerberos) - Only works if Solaris is in the same DNS domain as IPA\n% ldapclient manual -a authenticationMethod=sasl/GSSAPI \\\n                    -a credentialLevel=self \\\n                    -a proxyDN=\"uid=solaris,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\" \\\n                    -a proxyPassword=\"secret123\" \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com \\\n                    -a defaultServerList=\"server1.ipa.example.com server2.ipa.example.com\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n</code></pre> <p>This should succeed. Once it succeeds, you need to configure pam and nsswitch.</p> <pre><code>% /usr/sbin/svccfg -s name-service/switch setprop config/sudoer = astring: \"files ldap\"\n% /usr/sbin/svccfg -s name-service/switch setprop config/password = astring: \"files ldap [NOTFOUND=return]\"\n% /usr/sbin/svccfg -s name-service/switch setprop config/group = astring: \"files ldap [NOTFOUND=return]\"\n\n% /usr/sbin/svcadm refresh svc:/system/name-service/switch\n% /usr/sbin/svcadm restart svc:/system/name-service/switch\n% /usr/sbin/svcadm restart ldap/client\n</code></pre> <p>AD Trust Information</p> <p>In the event you don't have an AD trust, you can change the \"binding\" lines to required and remove the pam_ldap lines. Optionally, you can set pam_krb5 to \"required\", however sufficient should work just fine.</p> <p>Without an AD Trust</p> <pre><code>% vi /etc/pam.d/login\nauth definitive         pam_user_policy.so.1\nauth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth sufficient         pam_krb5.so.1\nauth required           pam_unix_cred.so.1\nauth sufficient         pam_unix_auth.so.1 server_policy\n\n% vi /etc/pam.d/other\nauth definitive         pam_user_policy.so.1\nauth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth sufficient         pam_krb5.so.1\nauth required           pam_unix_cred.so.1\nauth sufficient         pam_unix_auth.so.1 server_policy\n\naccount requisite       pam_roles.so.1\naccount definitive      pam_user_policy.so.1\naccount required        pam_unix_account.so.1 server_policy\naccount sufficient      pam_krb5.so.1\n\nsession definitive      pam_user_policy.so.1\nsession required        pam_unix_session.so.1\n\npassword definitive     pam_user_policy.so.1\npassword include        pam_authtok_common\npassword sufficient     pam_krb5.so.1\npassword required       pam_authtok_store.so.1 server_policy\n\n% vi /etc/pam.d/sshd-pubkey\naccount required        pam_unix_account.so.1\n</code></pre> <p>With an AD Trust</p> <pre><code>% vi /etc/pam.d/login\nauth definitive         pam_user_policy.so.1\nauth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth sufficient         pam_krb5.so.1\nauth required           pam_unix_cred.so.1\nauth sufficient         pam_unix_auth.so.1 server_policy\nauth sufficient         pam_ldap.so.1\n\n% vi /etc/pam.d/other\nauth definitive         pam_user_policy.so.1\nauth requisite          pam_authtok_get.so.1\nauth required           pam_dhkeys.so.1\nauth sufficient         pam_krb5.so.1\nauth required           pam_unix_cred.so.1\nauth sufficient         pam_unix_auth.so.1 server_policy\nauth sufficient         pam_ldap.so.1\n\naccount requisite       pam_roles.so.1\naccount definitive      pam_user_policy.so.1\naccount binding         pam_unix_account.so.1 server_policy\naccount sufficient      pam_krb5.so.1\naccount sufficient      pam_ldap.so.1\n\nsession definitive      pam_user_policy.so.1\nsession required        pam_unix_session.so.1\n\npassword definitive     pam_user_policy.so.1\npassword include        pam_authtok_common\npassword sufficient     pam_krb5.so.1\npassword required       pam_authtok_store.so.1 server_policy\n\n% vi /etc/pam.d/sshd-pubkey\naccount required        pam_unix_account.so.1\n</code></pre> <p>You can test now if you'd like.</p> <pre><code>root@solaris11:~# ldaplist -l passwd flast2\ndn: uid=flast2,cn=users,cn=compat,dc=ipa,dc=example,dc=com\n        cn: First Last\n        objectClass: posixAccount\n        objectClass: ipaOverrideTarget\n        objectClass: top\n        gidNumber: 1006800001\n        gecos: First Last\n        uidNumber: 1006800001\n        ipaAnchorUUID: :IPA:ipa.example.com:8babb9a8-5aaf-11e7-9769-00505690319e\n        loginShell: /bin/bash\n        homeDirectory: /home/first.last2\n        uid: first.last2\n</code></pre>"},{"location":"el/freeipa/#automated-scripts","title":"Automated Scripts","text":"<p>I at one point built a bunch of scripts to automate Solaris servers talking to IPA here. However, it is likely the scripts no longer work or contain outdated information.</p>"},{"location":"el/freeipa/#ad-trust-double-uid","title":"AD Trust Double UID","text":"<p>Solaris 11 once in a while gets random regressions when it comes to authentication and ID's, among many other things they randomly decide to break. Big shout out to Oracle.</p> <p>In a brief discussion with a user in the #freeipa IRC channel, the user was trying to find a way to chop off the domain name for logins but also have sudo still work as there were some random issues in general. We both discovered that in SRU 11.4.20.4.0, even though both UID's are present from ldaplist -l passwd, sudo was no longer working properly. The first thing we tried was to create an ID view and override a user with a new username. This successfully removed the domain, but did not solve the sudo problem. He instead got \"no account present for that user\". However, I wasn't able to replicate this.</p> <p>However, later, one thing he noticed is after creating an ID view with no overrides and pointing Solaris 11 to the view in the compat tree, Solaris 10-esque authentication ID reporting started to occur. Running ldaplist -l passwd user reported back the double UID as expected, but the FQDN comes first which resolved his group/sudo issues.</p> <pre><code># Create a view... no id overrides required here\n% ipa idview-add solaris\n# On Solaris...\n# Take EXTREME care with the group and passwd base DN's, they need to point\n# to the view properly\n# This example uses kerberos to authenticate.\n% ldapclient manual -a authenticationMethod=self \\\n                    -a credentialLevel=sasl/GSSAPI \\\n                    -a defaultSearchBase=dc=ipa,dc=example,dc=com \\\n                    -a domainName=ipa.example.com \\\n                    -a defaultServerList=\"server1.angelsofclockwork.net server2.angelsofclockwork.net\" \\\n                    -a followReferrals=true \\\n                    -a objectClassMap=shadow:shadowAccount=posixAccount \\\n                    -a objectClassMap=passwd:posixAccount=posixaccount \\\n                    -a objectClassMap=group:posixGroup=posixgroup \\\n                    -a serviceSearchDescriptor=group:cn=groups,cn=solaris,cn=views,cn=compat,dc=angelsofclockwork,dc=net \\\n                    -a serviceSearchDescriptor=passwd:cn=users,cn=solaris,cn=views,cn=compat,dc=angelsofclockwork,dc=net \\\n                    -a serviceSearchDescriptor=netgroup:cn=ng,cn=compat,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=ethers:cn=computers,cn=accounts,dc=ipa,dc=example,dc=com \\\n                    -a serviceSearchDescriptor=sudoers:ou=sudoers,dc=ipa,dc=example,dc=com \\\n                    -a bindTimeLimit=5\n# Make sure you set your props...\n% /usr/sbin/svccfg -s name-service/switch setprop config/sudoer = astring: \"files ldap\"\n% /usr/sbin/svccfg -s name-service/switch setprop config/password = astring: \"files ldap [NOTFOUND=return]\"\n% /usr/sbin/svccfg -s name-service/switch setprop config/group = astring: \"files ldap [NOTFOUND=return]\"\n\n% /usr/sbin/svcadm refresh svc:/system/name-service/switch\n% /usr/sbin/svcadm restart svc:/system/name-service/switch\n% /usr/sbin/svcadm restart ldap/client\n# Verify...\n% ldaplist -l passwd adusername\n. . .\n% id -a adusername\n. . .\n</code></pre> <p>Thank you to \"mewho\" on libera for finding this interesting workaround.</p>"},{"location":"el/freeipa/#illumos","title":"Illumos","text":"<p>Some steps from Solaris 11 can be followed to make Illumos systems work. However, we have been unable to resolve why sudo will not work when using an AD trust. If you are using a standalone FreeIPA and no trust, sudo should work just fine.</p>"},{"location":"el/freeipa/#legacy-hbac","title":"Legacy HBAC","text":"<p>For HBAC to work on OpenIndiana or Solaris, you will need to compile the pam_hbac module found here. I would clone the current master branch or download the master.zip to your system. Each OS has their set of instructions for compiling.</p> <p>First, create the following system account. We will need this when we are configuring our legacy clients.</p> <pre><code>dn: uid=hbac,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\nobjectClass: account\nobjectClass: simplesecurityobject\nobjectClass: top\nuid: hbac\nuserPassword: password\n</code></pre>"},{"location":"el/freeipa/#solaris-11_1","title":"Solaris 11","text":"<pre><code>% pkg install autoconf libtool pkg-config automake gcc docbook\n% autoreconf -if\n% ./configure --with-pammoddir=/usr/lib/security --mandir=/usr/share/man --sysconfdir=/etc/\n% make\n% make install\n</code></pre>"},{"location":"el/freeipa/#illumos_1","title":"Illumos","text":"<pre><code>% pkg install developer/build/autoconf developer/build/libtool \\\n              developer/pkg-config developer/build/automake    \\\n              developer/gcc48 system/header developer/object-file \\\n              developer/linker\n% autoreconf -if\n% ./configure --with-pammoddir=/usr/lib/security --mandir=/usr/share/man --sysconfdir=/etc/\n% make\n% make install\n</code></pre>"},{"location":"el/freeipa/#pam_hbacconf","title":"pam_hbac.conf","text":"<pre><code>% vim /etc/pam_hbac.conf\n\n# Replace client with your server's FQDN\nURI = ldap://server.ipa.example.com\nBASE = dc=ipa,dc=example,dc=com\nBIND_DN = uid=hbac,cn=sysaccounts,cn=etc,dc=ipa,dc=example,dc=com\nBIND_PW = password\nSSL_PATH = /var/ldap\nHOST_NAME = client\n</code></pre>"},{"location":"el/freeipa/#pam-configuration","title":"PAM Configuration","text":"<pre><code># Solaris 11 - /etc/pam.d/other\n# only modify the account section\n. . .\naccount required        pam_hbac.so ignore_unknown_user ignore_authinfo_unavail\n</code></pre> <p>In the event you cannot login or things aren't working the way you'd expect, add 'debug' to the end of the pam_hbac line and watch /var/log/authlog for errors.</p>"},{"location":"el/freeipa/#login-with-ad-users-to-legacy-clients","title":"Login with AD Users to Legacy Clients","text":"<p>For AD users to be able to login to legacy clients, you have to enable system-auth to the IPA servers. Without it, users will be denied access, regardless of HBAC controls or if you're using the pam_hbac module.</p> <pre><code>% ipa hbacsvc-add system-auth\n% ipa hbacrule-add legacy_client_auth\n% ipa hbacrule-add-host --hostgroups=ipaservers legacy_client_auth\n% ipa hbacrule-mod --usercat=all legacy_client_auth\n</code></pre>"},{"location":"el/freeipa/#legacy-active-directory-trust-notes","title":"Legacy Active Directory Trust Notes","text":"<p>Just a section of notes in IPA-AD trust scenarios.</p>"},{"location":"el/freeipa/#domain-resolution-order-oddness","title":"Domain Resolution Order Oddness","text":"<p>If using domain resolution order, AD users get double uid attributes - but only if they login with their shortname. If they login with fqdn, double uid's do not occur. But shortnames do not work anymore. Have to restart the directory server to make short names work again.</p>"},{"location":"el/freeipa/#solaris-weirdness","title":"Solaris Weirdness","text":"<p>If using domain resolution order, Solaris 10 gets the group resolution correct for short named AD users. Solaris 11 does not unless you are on SRU 11.4.7.4.0 or newer. There is a way to chop off the domain name from the uid using views.</p>"},{"location":"el/freeipa/#domain-options","title":"Domain Options","text":"<p>The next sections go over \"situational\" scenarios. These scenarios are reflective of the environment in which IPA is installed and not all will fit into your environment. These may be less common situations that could occur during or post IPA deployment.</p>"},{"location":"el/freeipa/#dns-configurations","title":"DNS Configurations","text":""},{"location":"el/freeipa/#dns-forwarding-to-dot","title":"DNS Forwarding to DoT","text":"<p>As of this writing, Enterprise Linux 9.6 and up should support DoT on the server and client side. Originally, it was required to setup unbound manually either on the IPA servers or on a separate server entirely and set IPA to forward requests appropriately.</p> <p>To set this up, you will need to install the <code>ipa-server-encrypted-dns</code> package.</p> <p>It is recommended to read the encrypted dns design page from the freeipa developers.</p>"},{"location":"el/freeipa/#dns-locations","title":"DNS Locations","text":"<p>FreeIPA has the ability to do \"locations\". Locations are a way to distribute load from clients and as a way of performing discovery, without the need to use special client code or IP subnet configurations. These locations are set up as SRV records with proper priorities set alongside CNAME records. Depending on the location in which an IPA DNS server resides, they will serve different information to the requesting client.</p> <p>For example, let's say you have two locations: Phoenix, Salt Lake City. You name these locations \"phx\" and \"slc\" respectively in FreeIPA.</p> <pre><code>% ipa location-add phx --description=\"Phoenix\"\n% ipa location-add slc --description=\"Salt Lake City\"\n</code></pre> <p>You then add the specific IPA servers to those given locations. Let's say we have two servers per location.</p> <pre><code>% ipa server-mod ipa01.phx.example.com --location=phx\n% ipa server-mod ipa02.phx.example.com --location=phx\n% ipa server-mod ipa01.slc.example.com --location=slc\n% ipa server-mod ipa02.slc.example.com --location=slc\n</code></pre> <p>If you want to lower the TTL, you can as well.</p> <pre><code>% ipa dnszone-mod example.com. --default-ttl=3600\n</code></pre> <p>After performing these changes, all servers will need the <code>named</code> service restarted.</p> <pre><code># On EL8, this will be named-pkcs11\n% systemctl restart named\n</code></pre> <p>This is when you can then test what comes back from a lookup. Notice that when we query a Phoenix-based server, we get a different result from the Salt Lake City-based server. Also notice that <code>_ldap._tcp.example.com</code> is a CNAME to the location SRV record, which makes this all happen.</p> <pre><code>% dig @10.100.0.231 _ldap._tcp.example.com SRV\n. . .\n;; ANSWER SECTION:\n_ldap._tcp.example.com. 86400 IN     CNAME   _ldap._tcp.phx._locations.example.com.\n_ldap._tcp.phx._locations.example.com. 86400 IN SRV 0 100 389 ipa01.phx.example.com.\n_ldap._tcp.slc._locations.example.com. 86400 IN SRV 50 100 389 ipa01.slc.example.com.\n_ldap._tcp.phx._locations.example.com. 86400 IN SRV 0 100 389 ipa02.phx.example.com.\n_ldap._tcp.slc._locations.example.com. 86400 IN SRV 50 100 389 ipa02.slc.example.com.\n\n% dig @10.100.1.231 _ldap._tcp.example.com SRV\n. . .\n;; ANSWER SECTION:\n_ldap._tcp.example.com. 86400 IN     CNAME   _ldap._tcp.slc._locations.example.com.\n_ldap._tcp.slc._locations.example.com. 86400 IN SRV 0 100 389 ipa01.slc.example.com.\n_ldap._tcp.slc._locations.example.com. 86400 IN SRV 0 100 389 ipa02.slc.example.com.\n_ldap._tcp.phx._locations.example.com. 86400 IN SRV 50 100 389 ipa01.phx.example.com.\n_ldap._tcp.phx._locations.example.com. 86400 IN SRV 50 100 389 ipa02.phx.example.com.\n</code></pre>"},{"location":"el/freeipa/#dns-locations-for-non-ipa-services","title":"DNS Locations for non-IPA Services","text":"<p>As of this writing, DNS location records for non-IPA services is not directly supported. However, it is possible to set it up using the <code>ipa</code> utility to do so.</p> <p>The way the location system works (at its most basic level) is by utilizing templates on the LDAP objects. For example, if you have locations setup, and you look at a DNS record's LDAP object, you'll see this:</p> <pre><code>dn: idnsname=_ldap._tcp,idnsname=example.com.,cn=dns,dc=example,dc=com\nobjectClass: top\nobjectClass: idnsrecord\nobjectClass: idnsTemplateObject\nidnsName: _ldap._tcp\nidnsTemplateAttribute;cnamerecord: _ldap._tcp.\\{substitutionvariable_ipalocation\\}._locations\nsRVRecord: 0 100 389 ipa01.phx.example.com.\nsRVRecord: 0 100 389 ipa02.phx.example.com.\nsRVRecord: 0 100 389 ipa01.slc.example.com.\nsRVRecord: 0 100 389 ipa02.slc.example.com.\n\ndn: idnsname=_ldap._tcp.phx._locations,idnsname=example.com.,cn=dns,dc=example,dc=com\nobjectClass: top\nobjectClass: idnsrecord\nidnsname: _ldap._tcp.phx._locations\nsrvrecord: 50 100 389 ipa01.slc.example.com.\nsrvrecord: 50 100 389 ipa02.slc.example.com.\nsrvrecord: 0 100 389 ipa01.phx.example.com.\nsrvrecord: 0 100 389 ipa02.phx.example.com.\n\ndn: idnsserverid=ipa01.phx.example.com,cn=servers,cn=dns,dc=example,dc=com\nobjectClass: top\nobjectClass: idnsServerConfigObject\nidnsServerid: ipa01.phx.example.com\nidnsSOAmName: ipa01.phx.example.com.\nidnsforwardpolicy: only\nidnsSubstitutionVariable;ipalocation: phx\n</code></pre> <p>When location services are turned on, the <code>substitutionvariable_ipalocation</code> is filled in for the CNAME record, per the DNS server configuration. Using a similar setup to <code>_ldap._tcp</code>, location services can be setup easily for non-IPA services.</p> <p>Let's say that you have a multi-node XMPP service, where each server is in each location you have setup and you want to make sure that the XMPP server closest to your clients will have higher priority. If you haven't made the service records already, now is the time to do so.</p> <pre><code>% ipa dnsrecord-add example.com _xmpp-client \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.phx.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-client \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.slc.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.phx.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.slc.example.com.\n</code></pre> <p>Now you should be able to verify that they exist.</p> <pre><code>% dig @10.100.0.231 _xmpp-client._tcp.example.com SRV +short\n0 100 5222 xmpp01.phx.example.com.\n0 100 5222 xmpp01.slc.example.com.\n\n% dig @10.100.0.231 _xmpp-server._tcp.example.com SRV +short\n0 100 5269 xmpp01.phx.example.com.\n0 100 5269 xmpp01.slc.example.com.\n</code></pre> <p>Now that the records exist, we need to make the \"location\" versions of them. In this scenario, we have two locations, so in total we'll have four records with differing priorities.</p> <pre><code># Phoenix\n% ipa dnsrecord-add example.com _xmpp-client.phx._locations \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.phx.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-client.phx._locations \\\n  --srv-priority=50 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.slc.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server.phx._locations \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.phx.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server.phx._locations \\\n  --srv-priority=50 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.slc.example.com.\n\n# Salt Lake City\n% ipa dnsrecord-add example.com _xmpp-client.slc._locations \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.slc.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-client.slc._locations \\\n  --srv-priority=50 --srv-weight=100 --srv-port=5222 \\\n  --srv-target=xmpp01.phx.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server.slc._locations \\\n  --srv-priority=0 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.slc.example.com.\n\n% ipa dnsrecord-add example.com _xmpp-server.slc._locations \\\n  --srv-priority=50 --srv-weight=100 --srv-port=5269 \\\n  --srv-target=xmpp01.phx.example.com.\n</code></pre> <p>For the location mechanism to work, now we have to modify the original SRV record with the correct object class and attribute.</p> <pre><code>% ipa dnsrecord-mod --setattr=objectclass=top\n  --addattr=objectclass=idnsrecord \\\n  --addattr=objectclass=idnstemplateobject example.com _xmpp-client._tcp  \\\n  --setattr=\"idnsTemplateAttribute;cnamerecord=_xmpp-client._tcp.\\{substitutionvariable_ipalocation\\}._locations\"\n</code></pre> <p>The DNS servers will now provide the appropriate priorities to the services.</p>"},{"location":"el/freeipa/#logging","title":"Logging","text":""},{"location":"el/freeipa/#audit-logs","title":"Audit Logs","text":"<p>By default, the audit logs in /var/log/dirsrv/slapd-INSTANCE/audit do not get populated. And the access logs don't show much in terms of modifications and what is being changed. There is also <code>/var/log/httpd/*</code> logs, but it may be useful to see ldif style logging for changes against FreeIPA.</p> <pre><code># Modify the DSE configuration by turning on audit logging\n[label@ipa01 ~]# ldapmodify -D \"cn=directory manager\" -W -p 389 -h localhost\nEnter LDAP Password:\ndn: cn=config\nchangetype: modify\nreplace: nsslapd-auditlog-logging-enabled\nnsslapd-auditlog-logging-enabled: on\n# Press CTRL+d here\nmodifying entry \"cn=config\"\n\n# To test, I'll add a user to a group\n[label@ipa01 ~]$ ipa group-add-member --users=jbaskets aocusers\n  Group name: aocusers\n  GID: 686600003\n  Member users: ..., jbaskets\n-------------------------\nNumber of members added 1\n-------------------------\n# Let's verify the log\n[label@ipa01 ~]$ sudo su -\n[sudo] password for label:\nLast login: Sun Mar 29 16:42:36 MST 2020 on pts/0\n[root@ipa01 ~]# cd /var/log/dirsrv/slapd-EXAMPLE-NET/\n[root@ipa01 slapd-EXAMPLE-NET]# cat audit\ntime: 20200329223754\ndn: cn=config\nresult: 0\nchangetype: modify\nreplace: nsslapd-auditlog-logging-enabled\nnsslapd-auditlog-logging-enabled: on\n-\nreplace: modifiersname\nmodifiersname: cn=directory manager\n-\nreplace: modifytimestamp\nmodifytimestamp: 20200330053754Z\n-\n\n        389-Directory/1.4.1.3 B2019.323.229\n        ipa01.example.net:636 (/etc/dirsrv/slapd-EXAMPLE-NET)\n\n# Looks like right here the modification happened \ntime: 20200329224007\ndn: cn=aocusers,cn=groups,cn=accounts,dc=example,dc=net\nresult: 0\nchangetype: modify\nadd: member\nmember: uid=jbaskets,cn=users,cn=accounts,dc=example,dc=net\n-\nreplace: modifiersname\nmodifiersname: uid=label,cn=users,cn=accounts,dc=example,dc=net\n-\nreplace: modifytimestamp\nmodifytimestamp: 20200330054006Z\n-\nreplace: entryusn\nentryusn: 900028\n-\n</code></pre>"},{"location":"el/freeipa/#certificate-and-dogtag","title":"Certificate and Dogtag","text":"<p>These are notes of things I've ran into before while dealing with the certificate system.</p>"},{"location":"el/freeipa/#renewed-ipa-http-certificate-stuck","title":"Renewed IPA HTTP Certificate Stuck","text":"<p>This was something I discovered sort of on accident but never really \"noticed\" - Though I'm sure I would've noticed sometime in 2021 when my certificate expired. I was running ipa-healthcheck --failures-only as I do sometimes, and noticed some weird certmonger things pop up. But it made me look at my certificate list...</p> <pre><code>[root@ipa01 ~]# ipa-getcert list\nNumber of certificates and requests being tracked: 9.\nRequest ID '20191106025922':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=FILE,location='/var/kerberos/krb5kdc/kdc.key'\n        certificate: type=FILE,location='/var/kerberos/krb5kdc/kdc.crt'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=ANGELSOFCLOCKWORK.NET\n        subject: CN=ipa01.angelsofclockwork.net,O=ANGELSOFCLOCKWORK.NET\n        expires: 2021-11-05 19:59:27 MST\n        principal name: krbtgt/ANGELSOFCLOCKWORK.NET@ANGELSOFCLOCKWORK.NET\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-pkinit-KPKdc\n        pre-save command:\n        post-save command: /usr/libexec/ipa/certmonger/renew_kdc_cert\n        track: yes\n        auto-renew: yes\nRequest ID '20200123075636':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=NSSDB,location='/etc/dirsrv/slapd-ANGELSOFCLOCKWORK-NET',nickname='Server-Cert',token='NSS Certificate DB',pinfile='/etc/dirsrv/slapd-ANGELSOFCLOCKWORK-NET/pwdfile.txt'\n        certificate: type=NSSDB,location='/etc/dirsrv/slapd-ANGELSOFCLOCKWORK-NET',nickname='Server-Cert',token='NSS Certificate DB'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=ANGELSOFCLOCKWORK.NET\n        subject: CN=ipa01.angelsofclockwork.net,O=ANGELSOFCLOCKWORK.NET\n        expires: 2021-11-05 19:55:33 MST\n        dns: ipa01.angelsofclockwork.net\n        principal name: ldap/ipa01.angelsofclockwork.net@ANGELSOFCLOCKWORK.NET\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-kp-clientAuth\n        pre-save command:\n        post-save command: /usr/libexec/ipa/certmonger/restart_dirsrv ANGELSOFCLOCKWORK-NET\n        track: yes\n        auto-renew: yes\nRequest ID '20200123075639':\n        status: NEWLY_ADDED_NEED_KEYINFO_READ_PIN\n        stuck: yes\n        key pair storage: type=FILE,location='/var/lib/ipa/private/httpd.key'\n        certificate: type=FILE,location='/var/lib/ipa/certs/httpd.crt'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=ANGELSOFCLOCKWORK.NET\n        subject: CN=ipa01.angelsofclockwork.net,O=ANGELSOFCLOCKWORK.NET\n        expires: 2021-11-05 19:55:48 MST\n        dns: ipa01.angelsofclockwork.net\n        principal name: HTTP/ipa01.angelsofclockwork.net@ANGELSOFCLOCKWORK.NET\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-kp-clientAuth\n        pre-save command:\n        post-save command: /usr/libexec/ipa/certmonger/restart_httpd\n        track: yes\n        auto-renew: yes\n</code></pre> <p>Interestingly, I wasn't sure what NEWLY_ADDED_NEED_KEYINFO_READ_PIN meant and I couldn't really find much on what would cause this to happen. And I know my certificate isn't expired, according to the output. In fact, I checked with openssl just in case.</p> <pre><code>[root@ipa01 ~]# openssl x509 -text -noout -in /var/lib/ipa/certs/httpd.crt | grep 'Not After'\n            Not After : Nov  6 02:55:48 2021 GMT\n</code></pre> <p>I'm not sure if this is just a result of migrating from Enterprise Linux 7 to 8 at the time, but it seemed easy enough to remove the tracking and put it back in, which ultimately fixed the monitoring state and now it was no longer \"stuck\".</p> <pre><code>[root@ipa01 ~]# ipa-getcert stop-tracking -i 20200123075639\nRequest \"20200123075639\" removed.\n[root@ipa01 ~]# ipa-getcert start-tracking -f /var/lib/ipa/certs/httpd.crt -k /var/lib/ipa/private/httpd.key -p /var/lib/ipa/passwds/ipa01.angelsofclockwork.net-443-RSA -C /usr/libexec/ipa/certmonger/restart_httpd -K HTTP/ipa01.angelsofclockwork.net@ANGELSOFCLOCKWORK.NET\nNew tracking request \"20200504003758\" added.\n[root@ipa01 ~]# ipa-getcert list -i \"20200504003758\"\nNumber of certificates and requests being tracked: 9.\nRequest ID '20200504003758':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=FILE,location='/var/lib/ipa/private/httpd.key',pinfile='/var/lib/ipa/passwds/ipa01.angelsofclockwork.net-443-RSA'\n        certificate: type=FILE,location='/var/lib/ipa/certs/httpd.crt'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=ANGELSOFCLOCKWORK.NET\n        subject: CN=ipa01.angelsofclockwork.net,O=ANGELSOFCLOCKWORK.NET\n        expires: 2021-11-05 19:55:48 MST\n        dns: ipa01.angelsofclockwork.net\n        principal name: HTTP/ipa01.angelsofclockwork.net@ANGELSOFCLOCKWORK.NET\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-kp-clientAuth\n        pre-save command:\n        post-save command: /usr/libexec/ipa/certmonger/restart_httpd\n        track: yes\n        auto-renew: yes\n</code></pre>"},{"location":"el/freeipa/#ca-related-certificates-stuck","title":"CA Related Certificates Stuck","text":"<p>Like with the IPA httpd certificates, I noticed at least 4 certificates stuck because a PIN was missing. Turns out that it's actually easy to modify the tracking request and fix the issue entirely. Below is my example doing this on the auditSigningCert. This seems to only occur on Enterprise Linux 8.</p> <pre><code>[root@ipa01 alias]# getcert list -i 20200615180351\nNumber of certificates and requests being tracked: 9.\nRequest ID '20200615180351':\n        status: NEWLY_ADDED_NEED_KEYINFO_READ_PIN\n        stuck: yes\n        key pair storage: type=NSSDB,location='/etc/pki/pki-tomcat/alias',nickname='auditSigningCert cert-pki-ca'\n        certificate: type=NSSDB,location='/etc/pki/pki-tomcat/alias',nickname='auditSigningCert cert-pki-ca'\n        CA: dogtag-ipa-ca-renew-agent\n        issuer:\n        subject:\n        expires: unknown\n        pre-save command: /usr/libexec/ipa/certmonger/stop_pkicad\n        post-save command: /usr/libexec/ipa/certmonger/renew_ca_cert \"auditSigningCert cert-pki-ca\"\n        track: yes\n        auto-renew: yes\n\n[root@ipa01 alias]# getcert start-tracking -i 20200615180351 -p /etc/pki/pki-tomcat/alias/pwdfile.txt\nRequest \"20200615180351\" modified.\n[root@ipa01 alias]# getcert list -i 20200615180351\nNumber of certificates and requests being tracked: 9.\nRequest ID '20200615180351':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=NSSDB,location='/etc/pki/pki-tomcat/alias',nickname='auditSigningCert cert-pki-ca',token='NSS Certificate DB',pinfile='/etc/pki/pki-tomcat/alias/pwdfile.txt'\n        certificate: type=NSSDB,location='/etc/pki/pki-tomcat/alias',nickname='auditSigningCert cert-pki-ca',token='NSS Certificate DB'\n        CA: dogtag-ipa-ca-renew-agent\n        issuer: CN=Certificate Authority,O=ANGELSOFCLOCKWORK.NET\n        subject: CN=CA Audit,O=ANGELSOFCLOCKWORK.NET\n        expires: 2021-03-13 23:15:41 MST\n        key usage: digitalSignature,nonRepudiation\n        pre-save command: /usr/libexec/ipa/certmonger/stop_pkicad\n        post-save command: /usr/libexec/ipa/certmonger/renew_ca_cert \"auditSigningCert cert-pki-ca\"\n        track: yes\n        auto-renew: yes\n</code></pre>"},{"location":"el/freeipa/#default-certificates-with-san","title":"Default Certificates with SAN","text":"<p>A question that arises now and again is how to setup a load balancer for FreeIPA's LDAP servers whether it's an actual load balancer (layer 4) or some sort of DNS record with multiple A records, or perhaps with some sort of round robin DNS. The issue is that the certificate verification fails, because the certificate being presented is of the IPA server itself with no SAN. To address this, you have to create a host that has the name of the load balancer or DNS record you plan on using and allow the IPA servers to manage the host.</p>"},{"location":"el/freeipa/#cms-communication-issues-403","title":"CMS Communication Issues (403)","text":"<p>This isn't necessarily certificate issue, but more or less an issue as it pertains to the certificate system itself. There may be cases where during upgrades, a configuration in /etc/pki/pki-tomcat/server.xml is not properly reconfigured. In that file, you'll notice Connector lines that have a secret and a requiredSecret parameter and they both have different values.</p> <pre><code>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" address=\"localhost4\" secret=\"AAA\" requiredSecret=\"BBB\"/&gt;\n&lt;Connector address=\"localhost6\" port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" secret=\"AAA\" requiredSecret=\"BBB\"/&gt;\n</code></pre> <p>The issue may be that these aren't correct. This generally comes down to IPA and pki-core conflicting on these attributes. To correct this, you will need to find the secret in /etc/httpd/conf.d/ipa-pki-proxy.conf (on the ProxyPass line) and ensure that's the same secret in both fields.</p> <pre><code>ProxyPassMatch ajp://localhost:8009 secret=AAA\n</code></pre> <p>Make sure they're the same in server.xml</p> <pre><code>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" address=\"localhost4\" secret=\"AAA\" requiredSecret=\"AAA\"/&gt;\n&lt;Connector address=\"localhost6\" port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" secret=\"AAA\" requiredSecret=\"AAA\"/&gt;\n</code></pre> <p>After changing, restart the service with systemctl restart pki-tomcat@pki-tomcatd.service.</p>"},{"location":"el/freeipa/#upgrade-fails-due-to-pki-misconfiguration","title":"Upgrade fails due to PKI misconfiguration","text":"<p>During certain upgrades of IPA's components, there may be a case where an upgrade will fail due to the PKI system misbehaving. This can be seen during <code>ipactl restart</code> or running the upgrade process manually. A workaround to the issue to make the upgrade process work would be the following:</p> <pre><code>## Ensure IPA is fully stopped\n% ipactl stop\nln -s /usr/share/pki/server/conf/Catalina/localhost/rewrite.config /etc/pki/pki-tomcat/Catalina/localhost/rewrite.config\nvi /etc/pki/pki-tomcat/server.xml\n\n## Add to the bottom (line 133) right under AccessLogValue\n&lt;Valve className=\"org.apache.catalina.valves.rewrite.RewriteValve\"/&gt;\n\n## Start up IPA to force the upgrade procedure\n% ipactl start\n</code></pre>"},{"location":"el/freeipa/#kerberos","title":"Kerberos","text":"<p>This section goes over some stuff about kerberos that we've ran into and might find useful someday.</p>"},{"location":"el/freeipa/#accounts-with-otp-enabled","title":"Accounts with OTP Enabled","text":"<p>When logging into a machine with a password (first factor) and an OTP token (second factor), this generally works without a problem. You can easily run klist and you'll see that you have a ticket and everything. In the cases where you're calling kinit all by itself, this doesn't work as expected at the time of this writing.</p> <pre><code>% kinit account@REALM\nkinit: Pre-authentication failed: Invalid argument while getting initial credentials\n</code></pre> <p>A bugzilla was opened about this issue in 2017, a pagure issue was opened in 2014 about this exact scenario, where IPA is configured for password+OTP and a user has an assigned token. There is currently one workaround, which is using kinit -n to perform anonymous processing.</p>"},{"location":"el/freeipa/#unknown-enctypes-on-keytabs","title":"Unknown enctypes on keytabs","text":"<p>When generating a keytab, there may be an occasions that the keytab comes with enctypes that are not supported on the client they will be used on. This is especially the case with macOS systems. If the keytab has the unknown types and you do not (or cannot) regenerate the keytabs easily, you can use ktutil to remove the entries.</p> <p>On a Linux system, it can be done like the following example:</p> <pre><code>% ktutil\nktutil:  read_kt /tmp/krb5.keytab\nktutil:  list -e\nslot KVNO Principal\n---- ---- ---------------------------------------------------------------------\n   1    1 host/sani.example.com@EXAMPLE.COM (aes256-cts-hmac-sha1-96)\n   2    1 host/sani.example.com@EXAMPLE.COM (aes128-cts-hmac-sha1-96)\n\n## For the example, we'll delete slot 2. Note that this particular enctype\n## is fully supported on most current clients.\nktutil:  delete_entry 2\nktutil:  list -e\nslot KVNO Principal\n---- ---- ---------------------------------------------------------------------\n   1    1 host/sani.example.com@EXAMPLE.COM (aes256-cts-hmac-sha1-96)\n\nktutil:  write_kt /tmp/krb5.keytab\nktutil:  exit\n</code></pre> <p>On a macOS system, the command operates differently.</p> <pre><code># Make a backup\n% cp /etc/krb5.keytab /etc/krb5.keytab_backup\n\n# Identify the Vno slots you wish to remove.\n% ktutil -k /etc/krb5.keytab list\n\n# Remove them using ktutil\n% ktutil -k /etc/krb5.keytab remove -V 3\n\n# Verify the slots are now gone.\n% ktutil -k /etc/krb5.keytab list\n</code></pre>"},{"location":"el/freeipa/#active-directory-trust","title":"Active Directory Trust","text":"<p>To initiate a trust with your active directory domain, ensure the following requirements are met.</p> <p>Requirements</p> <p>Package installed: ipa-server-trust-ad</p> <p>DNS: Properly configured that FreeIPA can resolve the AD servers A and SRV records</p> <p>This can either be forwarders to AD, a subdomain that IPA manages, or delegated subdomain from the master DNS servers in your network. This is completely dependent on your infrastructure.</p> <p>DNS: AD forest has sites and SRV records, including priorities, are set correctly</p> <p>When the following requirements are met, you have two choices before continuning. You can either use POSIX or have the id range generated automatically.</p> <p>POSIX vs Non-POSIX</p> <p>If you decide to use POSIX, your AD users are expected to have uidNumber, gidNumber, loginShell, unixHomeDirectory set. Else, you will need to setup ID overrides if you already have that information for current users (assuming this is not a new setup for the environment, ie you already have UID's for people). If you are not planning a migration from pure AD over to IPA with a trust, it is recommended to note that information so you can setup the ID overrides. Afterwards, any new users will get UID/GID's that you will not have to manage yourself.</p> <p>You will need to prep your master(s) for the trust. We will be enabling compat, adding sids, and adding agents so both masters can provide AD information.</p> <pre><code>% ipa-adtrust-install --add-sids --add-agents --enable-compat\n</code></pre> <p>This will do what we need. If you do not have legacy clients (Enterprise Linux 5, Solaris, HP-UX, AIX, SLES 11.4, FreeBSD, the list goes on), then you do not need to enable compat mode. Though, it could be useful to have it for certain apps or scenarios.</p> <p>You will now need to open the necessary ports. Do this on all IPA servers.</p> <p>Ports</p> <p>TCP: 135, 138, 139, 389, 445, 1024-1300, 3268</p> <p>UDP: 138, 139, 389, 445</p> <pre><code>% firewall-cmd --add-service=freeipa-trust --permanent\n% firewall-cmd --complete-reload\n</code></pre> <p>Now you can initiate the trust. The admin account you use should be part of the domain admins group or at least have permissions to initiate a trust. The former is path of least resistance.</p> <pre><code># If you are using POSIX ID, use ipa-ad-trust-posix.\n% ipa trust-add --type=ad example.com --range-type=ipa-ad-trust --admin adminaccount --password \n</code></pre> <p>Once the trust is up, verify it.</p> <pre><code>% ipa trust-show example.com\n Realm name: example.com\n Domain NetBIOS name: AD\n Domain Security Identifier: S-X-X-XX-XXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX\n Trust direction: Trusting forest\n Trust type: Active Directory domain\n UPN suffixes: example.com\n</code></pre> <p>You should be able to test for the users now.</p> <pre><code>% id aduser1@example.com\nuid=XXXXX(aduser1@example.com) gid=XXXXX(aduser1@example.com) groups=XXXXX(aduser1@example.com)\n</code></pre>"},{"location":"el/freeipa/#external-groups","title":"External Groups","text":"<p>Group Types</p> <p>Groups in Active Directory have three types. These three types can actually change the behavior of how SSSD on the IPA domain controllers resolve them or if they'll even be resolvable at all. The three types are 'Domain Local', 'Global', and 'Universal'. If at all possible, avoid groups being 'Global'. Domain Local or Universal is recommended.</p> <p>In the event you are using a trust, your AD user and group of users will need external groups to map the user or users over. This is required if you are trying to setup some form of permissions with HBAC and SUDO.</p> <pre><code># Create an external group that the AD user/group goes into\n% ipa group-add --external linuxadm_external\n# Add the user (or group) into the external group\n% ipa group-add-member --users=aduser1@example.com linuxadm_external\n% ipa group-add-member --users=adgroup1@example.com linuxadm_external\n# Add the external group as a member of the IPA posix group.\n# aduser1 and adgroup1 are now effectively members of the linuxadm group in IPA.\n% ipa group-add-member --groups=linuxadm_external linuxadm\n</code></pre>"},{"location":"el/freeipa/#ad-domain-options","title":"AD Domain Options","text":"<p>This section goes over \"situational\" scenarios for AD trusts. These scenarios are reflective of the environment in which IPA is installed and not all will fit into your environment. These are more or less common situations that could occur during an IPA deployment or even post-deployment.</p>"},{"location":"el/freeipa/#remove-realm-for-ad-users","title":"Remove @realm for AD users","text":"<p>A common scenario is that IPA and AD will have a trust, but there will not be any IPA users with the exception of the engineering team for managing IPA itself. The common theme is that because of this, the engineers and customers would rather not login with username@realm.</p> <p>Info</p> <p>The following is only applicable in an IPA-AD trust. An IPA-only scenario would not require any of these steps and most pieces would work natively (no @realm, sudo, hbac).</p> <p>In the event that you are in an IPA-AD scenario, please take note that this can adversely affect legacy clients. This will cause ldapsearches that are done in the compat tree to display multiple uid attributes. In most cases, this is fine and the user can still login without the realm name. The whoami and id commands will show the domain. There's no workaround for this.</p> <p>On the IPA servers, you will need to set the domain resolution order. This was introduced in 4.5.0.</p> <pre><code>% kinit admin\n% ipa config-mod --domain-resolution-order=\"example.com:ipa.example.com\"\n</code></pre> <p>After, you will need to clear out your SSSD cache.</p> <pre><code># sss_cache -E is insufficient for this.\n% systemctl stop sssd\n% rm -rf /var/lib/sss/db/*\n% systemctl start sssd\n</code></pre> <p>The below is optional. It will remove the @realm off the usernames, like on the prompt or id or whoami commands. Only do this if required. Only do this on the clients. Do not make this change on an IPA replica.</p> <pre><code># vi /etc/sssd/sssd.conf\n\n[domain/ipa.example.com]\n. . .\nfull_name_format = %1$s\n</code></pre> <p>This will ensure EL8, EL9, EL10 clients resolve the AD domain first when attempting logins and optionally drop the @realm off the usernames.</p>"},{"location":"el/freeipa/#ad-and-ipa-group-names-with-short-names","title":"AD and IPA group names with short names","text":"<p>You may notice that your clients have intermittent issues with name resolution when the following are true:</p> <ul> <li>Groups (or users) have the same names in both IPA and AD</li> <li>You are using domain resolution order</li> <li>You are shortening names on the clients</li> </ul> <p>You may want to actually search for them to identify the errant groups and then correct them. You can correct them either on the AD or IPA side. I would opt for the IPA side.</p> <pre><code>% kinit admin@IPA.EXAMPLE.COM\n% vi /tmp/dupecheck.sh\n#!/bin/bash\nfor x in ${ARRAY[*]} ; do\n  ldapsearch -x -b \"DC=example,DC=com\" -h example.com -LLL -w 'PASSWORD' -D 'username@example.com' samaccountname=\"$x\" samaccountname | grep -q $x\n  if [[ $? -eq 0 ]]; then\n    echo \"$x: DUPLICATE\"\n  fi\ndone\n\n% bash /tmp/dupecheck.sh\n</code></pre> <p>If you run into any duplicates, they should show up in a list for you address.</p> <p>sAMAccountName vs CN</p> <p>The \"CN\" and \"sAMAccountName\" attributes are not the same in AD, depending on who made the group or other factors. The sAMAccountName attribute is the value used to determine names from AD, whether you are enrolled with AD or the IPA server SSSD is pulling the information. This is why we are searching for that attribute, and not the CN.</p>"},{"location":"el/freeipa/#sites-and-ad-dcs","title":"Sites and AD DC's","text":"<p>By creating a subdomain section in /etc/sssd/sssd.conf on an IPA server, it is possible to set an AD Site or AD server(s) directly in SSSD. By default, sssd tries to do location based discovery. There may be a case where this isn't possible (eg, only a set of AD servers may only be contacted in certain \"air gapped\" networks).</p> <pre><code>[domain/ipa.example.com/example.com]\n# If you want a site\nad_site = Site_Name\n# If you want a server(s)\nad_server = dc1.example.com, dc2.example.com\n# A backup?\nad_backup_server = dc3.example.com, dc4.example.com\n</code></pre> <p>If you don't have access or a way to find the sites using the Windows tools, you can run an ldapsearch to find it (or an equivalent ldap browsing tool).</p> <pre><code>% ldapsearch -x -h example.com -s one -WD 'CN=username,CN=Users,DC=example,DC=com' \\\n  -b 'CN=Sites,CN=Configuration,DC=example,DC=com' cn\n</code></pre> <p>This should report back your sites. If you want to know the servers for those sites (in case you don't want to deal with the sites, but just the DC's themselves), you use ldapsearch but use the base DN of the site name.</p> <pre><code>% ldapsearch -x -h example.com -WD 'CN=username,CN=Users,DC=example,DC=com' \\\n  -b 'CN=Servers,CN=Site_Name,CN=Sites,CN=Configuration,DC=example,DC=com' dnsHostName\n</code></pre> <p>Hardcoded DC's</p> <p>If the DC's change at any time and they are harded in your sssd.conf, it is up to you to know when new controllers are being added or removed as to not disrupt the connectivity from IPA to AD when performing user or group lookups.</p>"},{"location":"el/freeipa/#set-default-shell-for-ad-users","title":"Set Default Shell for AD Users","text":"<p>By default, after a trust has been established, the shell all AD users get is /bin/sh. To change this, you must change the sssd.conf on the IPA masters.</p> <pre><code>% vi /etc/sssd/sssd.conf\n[domain/ipa.example.com]\n. . .\ndefault_shell = /bin/bash\n\n% systemctl restart sssd\n</code></pre>"},{"location":"el/freeipa/#footnotes","title":"Footnotes","text":"<ol> <li> <p>For more information on DNS for FreeIPA, please read this page and this page \u21a9</p> </li> <li> <p>The -P asks for the password of the username in question, that way it is cached right away. The directory service on the system then has credentials to compare to. I have found that sometimes if you don't use -P, even if you're logged in as the account, the password does not get cached and you'll get stuck at a background image the next time you login. Again, this is only sometimes. Your mileage may vary here.\u00a0\u21a9</p> </li> <li> <p>The -P asks for the password of the username in question, that way it is cached right away. The directory service on the system then has credentials to compare to. I have found that sometimes if you don't use -P, even if you're logged in as the account, the password does not get cached and you'll get stuck at a background image the next time you login. Again, this is only sometimes. Your mileage may vary here.\u00a0\u21a9</p> </li> <li> <p>Please read this page for more information.\u00a0\u21a9</p> </li> <li> <p>This may have changed. However it is up to you to test if this is the case.\u00a0\u21a9</p> </li> </ol>"},{"location":"el/nat/","title":"NAT/Router","text":"<p>This page goes over setting up a router or a simple NAT service for Enterprise Linux.</p>"},{"location":"el/nat/#requirements","title":"Requirements","text":"<p>Here are the list of requirements below.</p> <ul> <li>Enterprise Linux 8, 9 or Fedora</li> <li>An active internet connection to install the packages required or available internal mirrors</li> <li>A system with at least two (2) network interfaces</li> </ul>"},{"location":"el/nat/#tutorial","title":"Tutorial","text":""},{"location":"el/nat/#interface-setup","title":"Interface Setup","text":"<p>To properly setup the system, a few things have to be done.</p> <ol> <li>One interface must be the WAN interface, in most cases this is set    to DHCP.</li> <li>Another interface must be the LAN interface or a group of interfaces    must become a bridge with a static address</li> <li><code>ip_forward</code> must be turned on - optionally if you have ipv6, turn on    that forwarding as well</li> </ol> <p>IPv6 and NAT</p> <p>If you have an IPv6 prefix, whether it's from your ISP or it's a brokered prefix from he.net, NAT is generally not needed. Instead of using NAT for IPv6, you can just do simple forwarding. This is covered in a later section.</p>"},{"location":"el/nat/#firewalld","title":"FirewallD","text":"<p>When using firewalld, Enterprise Linux 7+ and all Fedora\\'s can setup a simple NAT with masquerade without having to know iptables or nftables syntax. This may be more or less ideal for some users who want to quickly get a NAT and router going. The drawback is that the syntax and knowing how the rules work are hidden behind a frontend. To setup a NAT:</p> <pre><code># Tell eth0 to be our WAN\n% nmcli con mod eth0 connection.zone external\n# Tell eth1 to be our LAN (or a bridge if you have one)\n% nmcli con mod eth1 connection.zone internal\n# Doesn't hurt to re-up\n% nmcli con up eth0 ; nmcli con up eth1\n\n# The external zone already has masquerade on, but just in case\n% firewall-cmd --zone=external --add-masquerade --permanent\n% firewall-cmd --complete-reload\n% firewall-cmd --get-active-zones\nexternal\n  interfaces: eth0\ninternal\n  interfaces: eth1\n</code></pre>"},{"location":"el/nat/#nftables","title":"nftables","text":"<p>This is for Enterprise Linux 8/9 or Fedora where nftables is the default. While iptables exists for Enterprise Linux 8 still, it is being superseded by nftables. It is recommended to stick with nftables.</p> <p>The syntax for nftables is a little tricky and quite different from what we may be used to with iptables. This may be an oversimplification and may or may not work. For ideas, you can view the files in /etc/nftables. This is a rough example of what I tried on migration to Enterprise Linux 8.</p> <pre><code># Disable firewalld, we'll enable nftables later\n% systemctl disable firewalld --now\n% systemctl mask firewalld\n# Flush all rules\n% nft flush ruleset\n</code></pre> <p>Rest coming soon.</p>"},{"location":"el/nat/#ipv6-forwarding","title":"IPv6 Forwarding","text":"<p>Coming soon.</p>"},{"location":"el/nat/#dhcp","title":"DHCP","text":"<p>Optional. Coming soon</p>"},{"location":"el/openldap/","title":"Deprecation","text":"<p>Please note that the OpenLDAP server is considered deprecated in RHEL (and thusly other EL derivatives). This document will stay here as a reference for those who are still using the server software on Enterprise Linux 7, potentially using the OpenLDAP LTB version of the software, or using the openldap-servers package from Rocky Linux 9's plus repository. It may apply to Fedora users in some contexts, but there are some differences they may never be documented here. If you see a need for corrections, please open up an issue on our github.</p> <p>Most of this information should be considered out of date. OpenLDAP 2.6.x makes some changes that the below document may or may not cover.</p>"},{"location":"el/openldap/#preface","title":"Preface","text":"<p>This tutorial goes over how to install OpenLDAP to a Enterprise Linux Server and options on configuring and setting up accounts for host access, etc. This how-to is the method of implementation that I used, and can be modified/changed to any users preferences if preferred. Enterprise Linux and Fedora users will have the ability to use SSSD for SUDO (and it's relatively easy to set it up).</p>"},{"location":"el/openldap/#overview","title":"Overview","text":"<p>Simply put, LDAP is a directory service for authentication across a network. Rather than have local accounts on a bunch of machines, LDAP can be used to have one account across a bunch of machines. LDAP was once an easy setup in RHEL 5 but had changed in RHEL 6 and 7, and here provides the necessary information needed to get a simple LDAP system running with possible SUDO support and various options of how to support your LDAP system.</p>"},{"location":"el/openldap/#requirements","title":"Requirements","text":"<p>First and foremost, we have a list of requirements. Keep in mind, if you do not fulfill these requirements, you may run into some issues down the road.</p> <ul> <li>Enterprise Linux 8, Enterprise Linux 9</li> <li>DNS Server (LDAP does NOT appreciate IP addresses for the URI)</li> <li>An active internet connection to install the packages required</li> </ul>"},{"location":"el/openldap/#tutorial-preface-notes-and-recommendations","title":"Tutorial Preface, Notes, and Recommendations","text":"<p>Warning</p> <p>Potential Pitfalls!</p> <ul> <li>The incorrect configuration in your firewall or other settings can   cause login failures</li> <li>Not using certificates (TLS/SSL) will cause you not to be able to   login (This is a EL7+ LDAP Client Requirement)</li> <li>SELinux is a pain when using mounted home directories or   certificates (primarily in Enterprise Linux 7+, will you have   problems with certificates/home directories)</li> <li>If you use /home as an NFS mount, you'll see some nasty side   effects if you have local users.</li> </ul> <p>Note</p> <p>Recommended Information</p> <ul> <li>It's recommended to use colored vim syntax. Root doesn't use vim   when vim-enhanced is installed. You can make an alias for vi to run   vim.</li> <li>Turn on syntaxing in <code>~/.vimrc</code> -- <code>syntax on</code></li> <li>Make the vim colors brighter in <code>~/.vimrc</code> -- <code>set background=dark</code></li> <li>Export your EDITOR variable in <code>~/.bash_profile</code> -- <code>export EDITOR=vim</code></li> <li>Keep selinux set to enforcing</li> </ul> <p>Note</p> <p>Database Information</p> <p>We will be using lmdb, which is recommended over using hdb or bdb.</p> <p>Note</p> <p>EL 9 OpenLDAP</p> <p>Enterprise Linux 9 has fully dropped OpenLDAP where there are no server packages normally built. In some EL distributions, openldap-servers is still built and provided in an extra repository. Rocky Linux 9 has openldap-servers in their plus repository. EPEL also has it available.</p>"},{"location":"el/openldap/#installation","title":"Installation","text":"<p>Below details the process for installing OpenLDAP to our system(s). This includes installing the packages, setting up certificates, and configuring the LDAP server via LDIF files.</p>"},{"location":"el/openldap/#packages","title":"Packages","text":"<p>You will need the following packages. A couple of them may already be installed. If you don't plan on migrating local accounts to LDAP, you can leave out migrationtools.</p> <pre><code># If you are on Rocky Linux 9, you will need to enable the plus repository\ndnf install openldap openldap-servers migrationtools nss-tools -y\n</code></pre>"},{"location":"el/openldap/#certificates","title":"Certificates","text":"<p>Enterprise Linux 7 clients and other newer distributions that are non-el require TLS/SSL for authentication when going toward LDAP. because of this, we will need to create certificates, regardless if you are in a lab or not.</p> <p>Note</p> <p>Certificate Information</p> <p>NSS should no longer be required. Anything NSS related has been removed.</p> <p>I have two ways of doing it, we can do it manually or through a script. I prefer using my script to take care of it. First the manual way.</p> <pre><code>mkdir /etc/pki/ldap \ncd /etc/pki/ldap\nopenssl genrsa -des3 -out ca.key 4096  # Remember the password you put here\n\nopenssl genrsa -out ldapserver.key 4096\n\nopenssl req -new -x509 -key ca.key -out ca.pem -days 3650\nCountry Name (2 letter code) [XX]:US\nState or Province Name (full name) []:Arizona\nLocality Name (eg, city) [Default City]:Phoenix\nOrganization Name (eg, company) [Default Company Ltd]:SSN Studio\nOrganizational Unit Name (eg, section) []:Channel Maintainers\nCommon Name (eg, your name or your server's hostname) []:SSN     # If you want to use a server name here, perform this step on another server first\nEmail Address []:youremail@mail.com\n\nopenssl req -new -key ldapserver.key -out ldapserver.csr\nCountry Name (2 letter code) [XX]:US\nState or Province Name (full name) []:Arizona\nLocality Name (eg, city) [Default City]:Phoenix\nOrganization Name (eg, company) [Default Company Ltd]:SSN Studio\nOrganizational Unit Name (eg, section) []:LDAP Server Maintainer\nCommon Name (eg, your name or your server's hostname) []:zera1.angelsofclockwork.net    # Set your common name to your server name for this certificate \nEmail Address []:youremail@mail.com\n\nopenssl x509 -req -in ldapserver.csr -out ldapserver.pem -CA ca.pem -CAkey ca.key -days 3650 -set_serial 01\n\nln -s ca.pem `openssl x509 -hash -in ca.pem -noout`.0\n# Do an ls on the directory and save the hashed name including the .0 somewhere\n\ncertutil -N -d /etc/pki/ldap\n# Do not enter any passwords. When asked, just hit enter beyond this point.\n\nchown root:ldap *\nchmod 640 *\n</code></pre> <p>The scripted way.</p> <pre><code>#!/bin/bash\n# CA Information\nCAcountry=\"US\"\nCAstate=\"Arizona\"\nCAlocale=\"Phoenix\"\nCAorganization=\"SSN Studio\"\nCAorganizationalunit=\"Channel Maintainers\"\n# If you set the below to a hostname, you\u2019re screwed. Don\u2019t do it!\n# Only do it if you have an actual hostname you will do CA signing on!\nCAconicalname=\"SSN\"\nCAemail=\"tucklesepk@gmail.com\"\n# LDAP Server information\ncountry=\"US\"\nstate=\"Arizona\"\nlocale=\"Phoenix\"\norganization=\"SSN Studio\"\norganizationalunit=\"LDAP Server Maintainer\"\nconicalname=\"zera1.angelsofclockwork.net\"\nemail=\"pc68xl@gmail.com\"\n\ncertdir=\"/etc/pki/ldap\"\n\nmkdir $certdir ; cd $certdir\necho \"Enter a password when asked.\"\nopenssl genrsa -des3 -out ca.key 4096\nopenssl genrsa -out ldapserver.key 4096\n# Create the self-signed CA cert\nopenssl req -new -x509 -key ca.key -out ca.pem -days 3650 -subj /C=\"$CAcountry\"/ST=\"$CAstate\"/L=\"$CAlocale\"/O=\"$CAorganization\"/OU=\"$CAorganizationalunit\"/CN=\"$CAconicalname\"/emailAddress=\"$CAemail\"/\n# Create the LDAP server cert\nopenssl req -new -key ldapserver.key -out ldapserver.csr -subj /C=\"$country\"/ST=\"$state\"/L=\"$locale\"/O=\"$organization\"/OU=\"$organizationalunit\"/CN=\"$conicalname\"/emailAddress=\"$email\"/\n# Sign it\nopenssl x509 -req -in ldapserver.csr -out ldapserver.pem -CA ca.pem -CAkey ca.key -days 3650 -set_serial 01\nln -s ca.pem `openssl x509 -hash -in ca.pem -noout`.0\nchown root:ldap *\nchmod 640 *\n</code></pre> <p>Make sure to obtain your hash. Your hash will be different from mine.</p> <pre><code>ls -l /etc/pki/ldap | grep '0'\n39642ab3.0\n</code></pre>"},{"location":"el/openldap/#ldap-server-configuration","title":"LDAP Server Configuration","text":"<p>Configurations done in OpenLDAP are done via LDIF. Your passwords should be hashed as well. Before we begin, let's start by generating a password for our root DN. This is required.</p> <pre><code>slappasswd \nNew password:\nRe-enter new password: \n{SSHA}CuaKctEx7rl/+ldG0EjktMzJdrxNc46+\n</code></pre> <p>Keep this SSHA output for our configuration files. Next, we'll need to make a couple LDIFs.</p> <p>This is our suffix.ldif file. This file helps to create the mdb database for our LDAP structure. It also sets our DIT suffix, root password, etc. You should change the olcSuffix, olcRootDN, and olcRootPW to whatever you plan on using. The olcDbMaxSize is set to 20GB. This is normally sufficient and can be changed. The olcDbEnvFlags can be changed as well.</p> <pre><code>dn: olcDatabase=mdb,cn=config\nobjectClass: olcDatabaseConfig\nobjectClass: olcMdbConfig\nolcDatabase: mdb\nolcDbDirectory: /var/lib/ldap\nolcSuffix: dc=angelsofclockwork,dc=net\nolcRootDN: cn=manager,dc=angelsofclockwork,dc=net\nolcRootPW: {SSHA}CuaKctEx7rl/+ldG0EjktMzJdrxNc46+   \nolcDbIndex: objectClass eq,pres\nolcDbIndex: ou,cn,mail,surname,givenname eq,pres,sub\nolcLastMod: TRUE\nolcDbEnvFlags: nometasync\nolcDbEnvFlags: writemap\nolcDbMaxSize: 21474836480\n</code></pre> <p>Now, below we have our primary modification ldif. Comments describe what each one does.</p> <pre><code># Sets our cert path and information\n# The \"CertificateFile\" has to be set to the hostname of the LDAP server in\n# older versions. New versions may not need this.\ndn: cn=config\nchangetype: modify\nreplace: olcTLSCACertificatePath\nolcTLSCACertificatePath: /etc/pki/ldap\n-\nreplace: olcTLSCertificateFile\nolcTLSCertificateFile: /etc/pki/ldap/ldapserver.pem\n-\nreplace: olcTLSCertificateKeyFile\nolcTLSCertificateKeyFile: /etc/pki/ldap/ldapserver.key\n\n# Adding a rootDN for the config.\n# Note that this isn't fully necessary as you can use -Y EXTERNAL -H ldapi:/// instead\n# So, treat this as an optional thing. If you do want it, consider a different password.\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=config\n-\nreplace: olcRootPW\nolcRootPW: {SSHA}CuaKctEx7rl/+ldG0EjktMzJdrxNc46+\n\n# Set the password again in the mdb database\n# This is because sometimes the password set when making the database doesn't 'work' sometimes\ndn: olcDatabase={2}mdb,cn=config\nchangetype: modify\nreplace: olcRootPW\nolcRootPW: {SSHA}CuaKctEx7rl/+ldG0EjktMzJdrxNc46+ \n\n# Sets the default password hash to SSHA -- Refer to the 'bug' information if this does not work\ndn: olcDatabase={-1}frontend,cn=config\nchangetype: modify\nreplace: olcPasswordHash\nolcPasswordHash: {SSHA}\n\n# Changes the rootdn information in the monitor database\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\" read by dn.base=\"cn=manager,dc=angelsofclockwork,dc=net\" read by * none \n</code></pre> <p>Let's make sure we turn on ldaps. It's recommended to use TLS, but some applications insist on SSL. (Very few, but they are out there.)</p> <pre><code># vi /etc/sysconfig/slapd\n\n. . .\nSLAPD_URLS=\"ldapi:/// ldap:/// ldaps:///\"\n\n# slaptest -u\nConfig file testing succeeded\n\n# /etc/openldap/ldap.conf\n. . .\nTLS_CACERTDIR /etc/pki/ldap\n</code></pre> <p>Now, we need to add our LDIFs into LDAP.</p> <pre><code>rm -f /etc/openldap/slapd.d/cn=config/olcDatabase=\\{2\\}hdb.ldif\nchown -R ldap:ldap /var/lib/ldap\nsystemctl enable slapd\nsystemctl start slapd\nldapadd -Y EXTERNAL -H ldapi:/// -f suffix.ldif\nldapmodify -Y EXTERNAL -H ldapi:/// -f info.ldif\n</code></pre> <p>You may end up getting a checksum error in your logs. To solve this, you need to do a simple operation against the configuration.</p> <pre><code>ldapmodify -h localhost -xWD \"cn=config\"\nEnter LDAP Password:\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=config\nmodifying entry \"olcDatabase={0}config,cn=config\"\nslaptest -u\nconfig file testing succeeded\n</code></pre> <p>That should do it. You can do a -Y EXTERNAL -H ldapi:/// instead if you wanted to. I did the above to show passwords will work for config.</p>"},{"location":"el/openldap/#ldap-structure","title":"LDAP Structure","text":"<p>The next piece is to get our backend structure built. In EL7, core is the only schema that is there. In EL6, it's a good chunk of these. I like to put them in a file so I can loop through them.</p> <p>Note</p> <p>ppolicy schema</p> <p>As of OpenLDAP 2.6.x, the ppolicy schema no longer applies as it is built-in to the slapo-ppolicy module. See the upgrade document for information.</p> <pre><code>/etc/openldap/schema/corba.ldif\n/etc/openldap/schema/cosine.ldif\n/etc/openldap/schema/duaconf.ldif\n/etc/openldap/schema/dyngroup.ldif\n/etc/openldap/schema/inetorgperson.ldif\n/etc/openldap/schema/java.ldif\n/etc/openldap/schema/misc.ldif\n/etc/openldap/schema/nis.ldif\n/etc/openldap/schema/openldap.ldif\n/etc/openldap/schema/collective.ldif \n</code></pre> <p>Note</p> <p>rfc2307</p> <p>If you want to be able to combine groupOfNames and posixGroup together (similar to Active Directory, other open source, and commercial offerings), don't use nis. Use the rfc2307bis schema instead.</p> <p>Once you have your list of schema to put in, we can loop through them.</p> <pre><code>for x in $(cat schemaorder) ; do ldapadd -Y EXTERNAL -H ldapi:/// -f $x ; done\nadding new entry \"cn=corba,cn=schema,cn=config\"\nadding new entry \"cn=cosine,cn=schema,cn=config\"\nadding new entry \"cn=duaconf,cn=schema,cn=config\"\nadding new entry \"cn=dyngroup,cn=schema,cn=config\"\nadding new entry \"cn=inetorgperson,cn=schema,cn=config\"\nadding new entry \"cn=java,cn=schema,cn=config\"\nadding new entry \"cn=misc,cn=schema,cn=config\"\nadding new entry \"cn=nis,cn=schema,cn=config\"\nadding new entry \"cn=openldap,cn=schema,cn=config\"\nadding new entry \"cn=collective,cn=schema,cn=config\"\n</code></pre> <p>I normally like to keep all LDIFs in a folder by themselves to avoid clutter (non-configuration LDIF).</p> <pre><code>mkdir ldif ; cd ldif\n</code></pre> <p>Let's get our base created. Make sure to replace my DN with your DN that you chose earlier. Call this base.ldif.</p> <pre><code>dn: dc=angelsofclockwork,dc=net\ndc: angelsofclockwork\nobjectClass: top\nobjectClass: domain\n\ndn: ou=People,dc=angelsofclockwork,dc=net\nou: People\nobjectClass: top\nobjectClass: organizationalUnit\n\ndn: ou=Group,dc=angelsofclockwork,dc=net\nou: Group\nobjectClass: top\nobjectClass: organizationalUnit\n</code></pre> <pre><code>ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f base.ldif\nEnter LDAP Password:\nadding new entry \"dc=angelsofclockwork,dc=net\"\nadding new entry \"ou=People,dc=angelsofclockwork,dc=net\"\nadding new entry \"ou=Group,dc=angelsofclockwork,dc=net\"\n</code></pre> <p>If this doesn't add, make sure your LDAP server is running, check /var/log/messages, and ensure you've completed all steps before this.</p> <pre><code>ldapsearch -x -LLL -b 'dc=angelsofclockwork,dc=net'\ndn: dc=angelsofclockwork,dc=net\ndc: angelsofclockwork\nobjectClass: top\nobjectClass: domain\n\ndn: ou=People,dc=angelsofclockwork,dc=net\nou: People\nobjectClass: top\nobjectClass: organizationalUnit\n\ndn: ou=Group,dc=angelsofclockwork,dc=net\nou: Group\nobjectClass: top\nobjectClass: organizationalUnit\n</code></pre>"},{"location":"el/openldap/#add-users-via-migration","title":"Add Users via Migration","text":"<p>Note</p> <p>But... I don't want to add my users locally</p> <p>You don't have to add your users locally to the system. This just aids in the creation of users. Go to the next section if you want to add users and do permissions by hand.</p> <p>This is the fun part. We'll need to add some users, set some passwords and migrate them into the LDAP system. I'll make three users as an example, give them an ID starting at 10000, home directories in /lhome, set a password, and proceed to migrate them. If you don't want to use /lhome, keep them set to /home and their home directories should get created automatically when logging into another machine.</p> <pre><code># mkdir /lhome\n# mkdir ldif/user\n# semanage fcontext -a -t home_root_t \"/lhome(/.*)?\"\n# restorecon -v /lhome \\\n  restorecon reset /lhome context unconfined_u:object_r:default_t:s0-&gt;unconfined_u:object_r:home_root_t:s0\n# groupadd -g 10000 sokel\n# groupadd -g 10001 suree\n# groupadd -g 10002 ranos\n# useradd -u 10000 -g 10000 -d /lhome/sokel sokel\n# useradd -u 10001 -g 10001 -d /lhome/suree suree\n# useradd -u 10002 -g 10002 -d /lhome/ranos ranos\n# passwd sokel ; passwd suree ; passwd ranos\n# cat /etc/passwd | grep sokel &gt; ldif/user/passwd.sokel\n# cat /etc/passwd | grep suree &gt; ldif/user/passwd.suree\n# cat /etc/passwd | grep ranos &gt; ldif/user/passwd.ranos\n# cat /etc/group | grep sokel &gt; ldif/user/group.sokel\n# cat /etc/group | grep suree &gt; ldif/user/group.suree\n# cat /etc/group | grep ranos &gt; ldif/user/group.ranos\n</code></pre> <p>We'll set some aliases for our migration scripts too</p> <pre><code># alias miguser='/usr/share/migrationtools/migrate_passwd.pl'\n# alias miggroup='/usr/share/migrationtools/migrate_group.pl'\n</code></pre> <p>Before we continue, we need to modify our migration scripts. This is extremely important, otherwise our LDIFs will come out incorrect. Change them to your DN.</p> <pre><code># sed -i.bak \"s/padl.com/angelsofclockwork.net/g\" /usr/share/migrationtools/migrate_common.ph\n# sed -i.bak \"s/padl,dc=com/angelsofclockwork,dc=net/g\" /usr/share/migrationtools/migrate_common.ph\n</code></pre> <p>Now we can use a loop to convert them. You can do it by hand also, but that's up to you.</p> <pre><code># for x in sokel suree ranos ; do miguser ldif/user/passwd.$x &gt; ldif/user/$x.ldif ; done\n# for x in sokel suree ranos ; do miggroup ldif/user/group.$x &gt;&gt; ldif/user/$x.ldif ; done\n# cd ldif/user/\n# cat *.ldif &gt;&gt; /tmp/ourusers.ldif\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f /tmp/ourusers.ldif\nEnter LDAP Password:\nadding new entry \"uid=ranos,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=ranos,ou=Group,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"uid=sokel,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=sokel,ou=Group,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"uid=suree,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=suree,ou=Group,dc=angelsofclockwork,dc=net\"\n</code></pre> <p>The manual way.</p> <pre><code># /usr/share/migrationtools/migrate_passwd.pl ldif/user/passwd.sokel &gt; ldif/user/sokel.ldif \n# /usr/share/migrationtools/migrate_group.pl ldif/user/group.sokel &gt;&gt; ldif/user/sokel.ldif\n# /usr/share/migrationtools/migrate_passwd.pl ldif/user/passwd.suree &gt; ldif/user/suree.ldif \n# /usr/share/migrationtools/migrate_group.pl ldif/user/group.suree &gt;&gt; ldif/user/suree.ldif\n# /usr/share/migrationtools/migrate_passwd.pl ldif/user/passwd.ranos &gt; ldif/user/ranos.ldif \n# /usr/share/migrationtools/migrate_group.pl ldif/user/group.ranos &gt;&gt; ldif/user/ranos.ldif\n\n# cd ldif/user/\n# ls\ngroup.ranos  group.suree   passwd.sokel  ranos.ldif  suree.ldif\ngroup.sokel  passwd.ranos  passwd.suree  sokel.ldif\n\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f sokel.ldif\nEnter LDAP Password:\nadding new entry \"uid=sokel,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=sokel,ou=Group,dc=angelsofclockwork,dc=net\"\n\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f suree.ldif\nEnter LDAP Password:\nadding new entry \"uid=suree,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=suree,ou=Group,dc=angelsofclockwork,dc=net\"\n\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f ranos.ldif\nEnter LDAP Password:\nadding new entry \"uid=ranos,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=ranos,ou=Group,dc=angelsofclockwork,dc=net\"\n</code></pre>"},{"location":"el/openldap/#add-users-via-ldif","title":"Add Users via LDIF","text":"<p>This is for those who don't want to create the account locally. For each user, you need to create an LDIF that satisfies their account information such as UID, GID and their group information. If you plan on having NFS exports to /lhome, make sure homeDirectory is correctly pointing as such. Otherwise, keep it as /home/username.</p> <pre><code>dn: uid=zera,ou=People,dc=angelsofclockwork,dc=net\nobjectClass: posixAccount\nobjectClass: top\nobjectClass: shadowAccount\nobjectClass: inetOrgPerson\ncn: Zera Nalika\ngidNumber: 11000\nsn: Nalika\nuidNumber: 11000\ngivenName: Zera\nuid: zera\nloginShell: /bin/bash\nhomeDirectory: /home/zera\ndisplayName: Zera Nalika\nuserPassword: changeme2\n\ndn: cn=zera,ou=Group,dc=angelsofclockwork,dc=net\nobjectClass: posixGroup\nobjectClass: top\ncn: zera\ngidNumber: 11000\n</code></pre> <p>That's about it for that. You create these for each user as needed and then add them into ldap.</p> <pre><code># ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f zera.ldif\nadding new entry \"uid=zera,ou=People,dc=angelsofclockwork,dc=net\"\n\nadding new entry \"cn=zera,ou=Group,dc=angelsofclockwork,dc=net\"\n</code></pre> <p>For users who are doing the /lhome thing, make their directories. When you are changing ownership, do it by UID and GID number.</p> <pre><code># mkdir /lhome\n# semanage fcontext -a -t home_root_t \"/lhome(/.*)?\"\n# mkdir /lhome/zera\n# cp /etc/skel/.* /lhome/zera\n# chown -R 11000:11000 /lhome/zera\n# restorecon -Rv /lhome\n</code></pre>"},{"location":"el/openldap/#nfs-export-home-directories","title":"NFS Export Home Directories","text":"<p>Warning</p> <p>/home vs /lhome</p> <p>If you used /lhome and you want to use NFS mounts, you may continue here. Otherwise, skip this section entirely. If you use /home and still want to do NFS, you will need to do persistent NFS to say /export/home, and then setup AutoFS to use /export/home as a way to automount into /home.</p> <p>Warning</p> <p>Potential Pitfall</p> <p>Do NOT use NFSv3. The steps below show how to prevent user squashing to allow the user to have access to their home directories. Typically, in an NFSv4 fashion, it tends to mount it with permissions set to nobody. Other solutions have been to force NFSv3. This is NOT recommended. YOU HAVE BEEN WARNED.</p> <p>First, we'll need to install nfs-utils, set up our exports, and modify our id map file.</p> <pre><code># dnf install nfs-utils libnfsidmap -y\n\n# vi /etc/exports\n/lhome *(rw,sync,root_squash,no_all_squash)\n\n# vi /etc/idmapd.conf\n\n# Comment out the first Domain line and make your own\nDomain = zera1.angelsofclockwork.net\n\n# systemctl start nfs-server\n# systemctl enable nfs-server\n</code></pre> <p>Sometimes you'll still run into the nobody problem. Sometimes this helps.</p> <pre><code># vi /etc/sysconfig/nfs\nNEED_IDMAPD=yes\nNFSMAPID_DOMAIN=library.angelsofclockwork.net\n</code></pre>"},{"location":"el/openldap/#firewall","title":"Firewall","text":"<p>Warning</p> <p>Keep your firewall on</p> <p>It is bad practice to turn your firewall off. Don't do it.</p> <p>We need to open up our firewall.</p> <p>Note</p> <p>Port Reference</p> <ul> <li>LDAP Ports: 389/tcp 636/tcp</li> <li>NFS Ports: 111/tcp 111/udp 2049/tcp</li> </ul> <p>If using firewalld, you can add these ports by service.</p> <pre><code># firewall-cmd --add-service=ldap --zone=public --permanent\n# firewall-cmd --add-service=ldaps --zone=public --permanent\n# firewall-cmd --add-service=nfs --zone=public --permanent\n# firewall-cmd --reload\n</code></pre>"},{"location":"el/openldap/#client","title":"Client","text":"<p>Setting up the client can be straight-forward or troubling, depending on the distribution you're using. We'll be going over EL7+. Fedora also works here as well.</p> <p>Warning</p> <p>Third-party Repositories</p> <p>If you use third-party repositories, you may want to disable them, at least temporarily. Depending on the repository, there may be conflicts when installing the appropriate packages. You may want to consider on setting up priorities, and ensure your base and updates are higher than the rest.</p>"},{"location":"el/openldap/#enterprise-linuxcurrent-fedora-releases","title":"Enterprise Linux/Current Fedora Releases","text":"<p>We'll be using SSSD for this. We need to install some key packages first. Some of these packages may not install because they were either superceded or obsoleted.</p> <pre><code># yum install pki-{ca,common,silent} openldap-clients nss-pam-ldapd policycoreutils-python sssd sssd-common sssd-client sssd-ldap\n</code></pre> <p>Use authselect to configure pam and nss. You'll need to configure /etc/sssd/sssd.conf by hand after.</p> <pre><code># authselect select sssd with-mkhomedir with-sudo\n\n# vi /etc/sssd/sssd.conf\n[domain/default]\n\ncache_credentials = True\nkrb5_realm = #\nldap_search_base = dc=angelsofclockwork,dc=net\nid_provider = ldap\nauth_provider = ldap\nchpass_provider = ldap\nsudo_provider = ldap\nldap_uri = ldap://zera1.angelsofclockwork.net\nldap_id_use_start_tls = True\nldap_tls_cacertdir = /etc/openldap/certs\nldap_tls_cacert = /etc/openldap/certs/ca.pem\n# Add the below\nldap_sudo_search_base = ou=SUDOers,dc=angelsofclockwork,dc=net\n\n[sssd]\n# Modify this line and add sudo to the list\nservices = nss, pam, autofs, sudo\n\n[sudo]\n</code></pre> <p>Now, let's get our CA cert that we made way long ago and download it. If you used a real CA to sign your certificate, obtain their certificate.</p> <p>Note</p> <p>Hash</p> <p>Remember your hash from when you were making your certificates? You need to obtain it. In both examples, we created it while using a symbolic link.</p> <pre><code># scp zera1.angelsofclockwork.net:/etc/pki/ldap/ca.pem /etc/openldap/certs/ca.pem\n# cd /etc/openldap/certs\n# ln -s ca.pem 39642ab3.0\n</code></pre> <p>Now, modify /etc/openldap/ldap.conf and add the following to the bottom, ensuring your BASE is set correctly.</p> <pre><code>URI ldap://library.angelsofclockwork.net\nBASE dc=angelsofclockwork,dc=net\nssl start_tls\n</code></pre> <p>You can attempt an ldapsearch and it should work. Search for one of your users.</p> <pre><code># ldapsearch -x -LLL uid=zera\n\ndn: uid=zera,ou=People,dc=angelsofclockwork,dc=net\ncn: Zera Nalika\ngidNumber: 11000\nuidNumber: 11000\ngivenName: Zera\nobjectClass: posixAccount\nobjectClass: top\nobjectClass: shadowAccount\nobjectClass: hostObject\nobjectClass: radiusprofile\nobjectClass: inetOrgPerson\nobjectClass: ldapPublicKey\nuid: zera\nloginShell: /bin/bash\nhomeDirectory: /lhome/zera\ndisplayName: Zera Nalika\n</code></pre>"},{"location":"el/openldap/#automounting-home-directories","title":"Automounting Home Directories","text":"<p>If you chose to do /lhome NFS mounting, proceed here.</p> <pre><code># mkdir /lhome\n# semanage fcontext -a -t autofs_t \"/lhome(/.*)?\"\n# restorecon -v /lhome\n# setsebool use_nfs_home_dirs 1\n</code></pre> <p>Now, let's get our automounting setup.</p> <pre><code># vi /etc/auto.master\n. . .\n/lhome /etc/auto.lhome # Add this under the /misc line\n</code></pre> <p>Let's copy the misc template and make a change to it.</p> <pre><code># cp /etc/auto.misc /etc/auto.lhome\n# vi /etc/auto.lhome\n\n# Comment the cd line, and add our mount under it.\n#cd             -fstype=iso9660,ro,nosuid,nodev :/dev/cdrom\n*               -rw,soft,intr       zera1.angelsofclockwork.net:/lhome/&amp;\n\n# restorecon -v /etc/auto.lhome\n# systemctl enable autofs\n# systemctl start autofs\n</code></pre> <p>Let's make our change to the idmapd configuration.</p> <pre><code># vi /etc/idmapd.conf\n\n#Domain = local.domain.edu\nDomain = zera1.angelsofclockwork.net\n\n# systemctl restart sssd autofs\n</code></pre>"},{"location":"el/openldap/#ldap-structure-add-ons","title":"LDAP Structure Add-ons","text":"<p>Here you'll find my value-added portions of getting LDAP going further than what the above presented.</p>"},{"location":"el/openldap/#sudo","title":"SUDO","text":"<p>Getting SUDO to work in LDAP can be a real pain. It doesn't have to be.</p> <p>The default sudo schema provided by the LDAP packages, which I have taken and converted into the proper olc format.</p> <pre><code>dn: cn=sudo,cn=schema,cn=config\nobjectClass: olcSchemaConfig\ncn: sudo\nolcAttributeTypes: {0}( 1.3.6.1.4.1.15953.9.1.1 NAME 'sudoUser' DESC 'User(s)\n who may  run sudo' EQUALITY caseExactIA5Match SUBSTR caseExactIA5SubstringsMa\n tch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )\nolcAttributeTypes: {1}( 1.3.6.1.4.1.15953.9.1.2 NAME 'sudoHost' DESC 'Host(s)\n who may run sudo' EQUALITY caseExactIA5Match SUBSTR caseExactIA5SubstringsMat\n ch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )\nolcAttributeTypes: {2}( 1.3.6.1.4.1.15953.9.1.3 NAME 'sudoCommand' DESC 'Comma\n nd(s) to be executed by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1\n 466.115.121.1.26 )\nolcAttributeTypes: {3}( 1.3.6.1.4.1.15953.9.1.4 NAME 'sudoRunAs' DESC 'User(s)\n  impersonated by sudo (deprecated)' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1\n .4.1.1466.115.121.1.26 )\nolcAttributeTypes: {4}( 1.3.6.1.4.1.15953.9.1.5 NAME 'sudoOption' DESC 'Option\n s(s) followed by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115\n .121.1.26 )\nolcAttributeTypes: {5}( 1.3.6.1.4.1.15953.9.1.6 NAME 'sudoRunAsUser' DESC 'Use\n r(s) impersonated by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466\n .115.121.1.26 )\nolcAttributeTypes: {6}( 1.3.6.1.4.1.15953.9.1.7 NAME 'sudoRunAsGroup' DESC 'Gr\n oup(s) impersonated by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.14\n 66.115.121.1.26 )\nolcAttributeTypes: {7}( 1.3.6.1.4.1.15953.9.1.8 NAME 'sudoNotBefore' DESC 'Sta\n rt of time interval for which the entry is valid' EQUALITY generalizedTimeMat\n ch ORDERING generalizedTimeOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.24\n  )\nolcAttributeTypes: {8}( 1.3.6.1.4.1.15953.9.1.9 NAME 'sudoNotAfter' DESC 'End\n of time interval for which the entry is valid' EQUALITY generalizedTimeMatch\n ORDERING generalizedTimeOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.24 )\nolcAttributeTypes: {9}( 1.3.6.1.4.1.15953.9.1.10 NAME 'sudoOrder' DESC 'an int\n eger to order the sudoRole entries' EQUALITY integerMatch ORDERING integerOrd\n eringMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.27 )\nolcObjectClasses: {0}( 1.3.6.1.4.1.15953.9.2.1 NAME 'sudoRole' DESC 'Sudoer En\n tries' SUP top STRUCTURAL MUST cn MAY ( sudoUser $ sudoHost $ sudoCommand $ s\n udoRunAs $ sudoRunAsUser $ sudoRunAsGroup $ sudoOption $ sudoOrder $ sudoNotB\n efore $ sudoNotAfter $ description ) )\n</code></pre> <p>Save this as sudoschema.ldif and add it in.</p> <pre><code># ldapadd -Y EXTERNAL -H ldapi:/// -f sudoschema.ldif\n</code></pre> <p>Let's create our defaults. This will start our sudo OU and give it some defaults. You may change these if you so desire.</p> <pre><code># vi sudo.ldif\n\ndn: ou=SUDOers,dc=angelsofclockwork,dc=net\nobjectClass: top\nobjectClass: organizationalUnit\nou: SUDOers\n\ndn: cn=defaults,ou=SUDOers,dc=angelsofclockwork,dc=net\nobjectClass: top\nobjectClass: sudoRole\ncn: defaults\ndescription: SUDOers Default values\nsudoOption: requiretty\nsudoOption: env_reset\nsudoOption: env_keep =  \"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS\"\nsudoOption: env_keep += \"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\"\nsudoOption: env_keep += \"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES\"\nsudoOption: env_keep += \"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\"\nsudoOption: env_keep += \"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\"\n\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f sudo.ldif\n</code></pre> <p>Now, let's create our first SUDO container. It will be for our \\\"admins\\\". We could specify \\\"sudoHost: ALL\\\" if we wanted. But for the example, I chose a couple of hosts.</p> <pre><code># vi admins.ldif\n\ndn: cn=ADMINS,ou=SUDOers,dc=angelsofclockwork,dc=net\nobjectClass: sudoRole\ncn: ADMINS\ndescription: Administration Role\nsudoCommand: ALL\nsudoHost: zera2.angelsofclockwork.net\nsudoHost: zera3.angelsofclockwork.net\nsudoRunAs: ALL\nsudoRunAsGroup: ALL\nsudoRunAsUser: ALL\nsudoUser: zera\n\n# ldapadd -xWD \"cn=manager,dc=angelsofclockwork,dc=net\" -f admins.ldif\n</code></pre> <p>If you used authselect with the with-sudo option, this should have turned on sss for sudoers. You may want to verify /etc/nsswitch.conf just to be sure.</p> <p>Note</p> <p>SSSD Cache</p> <p>Sometimes SSSD likes to cache things or never update things for whatever reason or another. To get around this, stop sssd, delete everything under /var/lib/sss/db/ and then start sssd again.</p> <p>Now, let's test.</p> <pre><code>[root@zera3 ~]# su - zera\n[zera@zera3 ~]$ sudo -l\n[sudo] password for zera:\nMatching Defaults entries for zera on this host:\n    requiretty, env_reset, env_keep=\"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS\", env_keep+=\"MAIL\n    PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE\", env_keep+=\"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT\n    LC_MESSAGES\", env_keep+=\"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE\", env_keep+=\"LC_TIME LC_ALL\n    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY\", secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin, env_reset, requiretty\n\nUser sokel may run the following commands on this host:\n    (ALL : ALL) ALL\n</code></pre>"},{"location":"el/openldap/#member-groups","title":"Member Groups","text":"<p>Member groups are extremely useful, especially for when you're granting permissions to external applications (and SSSD if you wish).</p> <pre><code># vi modules.ldif\n\ndn: cn=module,cn=config\nobjectClass: olcModuleList\ncn: module\nolcModulePath: /usr/lib64/openldap\nolcModuleLoad: memberof.la\n\n# vi memberof.ldif\n\ndn: olcOverlay=memberof,olcDatabase={2}mdb,cn=config\nobjectClass: olcMemberOf\nobjectClass: olcOverlayConfig\nobjectClass: olcConfig\nobjectClass: top\nolcOverlay: memberof\nolcMemberOfDangling: ignore\nolcMemberOfRefInt: TRUE\nolcMemberOfGroupOC: groupOfNames\nolcMemberOfMemberAD: member\nolcMemberOfMemberOfAD: memberOf\n\n# ldapadd -Y EXTERNAL -H ldapi:/// -f modules.ldif\n# ldapadd -Y EXTERNAL -H ldapI:/// -f memberof.ldif\n</code></pre> <p>After that, we can now create our groups. Example.</p> <pre><code>dn: cn=Admins,ou=Group,dc=angelsofclockwork,dc=net\nobjectClass: groupOfNames\ncn: Admins\nmember: uid=chris,ou=People,dc=angelsofclockwork,dc=net\nmember: uid=zera,ou=People,dc=angelsofclockwork,dc=net\nmember: uid=sithlord,ou=People,dc=angelsofclockwork,dc=net\n</code></pre> <p>In SSSD, we can make some minor changes.</p> <pre><code>ldap_search_base = dc=angelsofclockwork,dc=net?sub?|(memberOf=cn=Admins,ou=Group,dc=angelsofclockwork,dc=net)\nldap_access_filter = (|(memberOf=cn=Admins,ou=Group,dc=angelsofclockwork,dc=net))\n# Change this to rfc2307 if you are using nis\nldap_schema = rfc2307bis \nenumerate = True\n\n# systemctl stop sssd ; rm -rf /var/lib/sss/db/* ; systemctl start sssd\n</code></pre> <p>If we were to do an ldapsearch, we can see the groups show up.</p> <pre><code># ldapsearch -x -LLL uid=zera memberOf\ndn: uid=zera,ou=People,dc=angelsofclockwork,dc=net\nmemberOf: cn=Admins,ou=Group,dc=angelsofclockwork,dc=net\n</code></pre> <p>Make sure you turn on referential integrity!</p>"},{"location":"el/openldap/#referential-integrity","title":"Referential Integrity","text":"<p>Having referential integrity is absolutely important. It basically means that if a user gets deleted, their group membership disappears also. This prevents you from having to clean up manually.</p> <pre><code># vi module.ldif\n\ndn: cn=module,cn=config\nchangetype: modify\nreplace: olcModuleLoad\nolcModuleLoad: refint.la\nolcModuleLoad: memberof.la\n\n# ldapmodify -Y EXTERNAL -H ldapi:/// -f module.ldif\n</code></pre> <p>You also need the overlay. An overlay allows certain plugins to work on a DIT.</p> <pre><code># vi overlay.ldif\ndn: olcOverlay=refint,olcDatabase={2}mdb,cn=config\nobjectClass: olcOverlayConfig\nobjectClass: olcConfig\nobjectClass: olcRefintConfig\nobjectClass: top\nolcOverlay: refint\nolcRefintAttribute: memberOf member manager\n\n# ldapmodify -Y EXTERNAL -H ldapi:/// -f overlay.ldif\n</code></pre>"},{"location":"el/openldap/#acl","title":"ACL","text":"<p>An ACL (Access Control List) allows permissions to be given to those in the LDAP tree. The problem with a default LDAP setup is that, attributes like userPassword show up in an ldapsearch. This gives little protection. So, to get around this issue, we have to create ACLs.</p> <p>Note</p> <p>The Manager's Rights</p> <p>The manager has all rights to the DIT. In previous implementations, I have put him in access controls as a reference and would put \\\"write\\\" as his access. This isn't needed, but it doesn't hurt to have it.</p> <p>This ldif creates an ACL that allows the Admins group to do anything they want on the DIT (similar to manager). This also prevents anonymous searches from pulling up a user's password.</p> <pre><code># vi acl.ldif\n\ndn: olcDatabase={2}mdb,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by group.exact=\"cn=Admins,ou=Group,dc=angelsofclockwork,dc=net\" write by anonymous auth by self write by * none break\nolcAccess: {2}to * by group.exact=\"cn=Admins,ou=Group,dc=angelsofclockwork,dc=net\" write by * read\nolcAccess: {3}to dn.base=\"\" by * read\n\n# ldapmodify -Y EXTERNAL -H ldapi:/// -f acl.ldif\n</code></pre> <p>It's highly recommended, however, to disable anonymous searching, especially if you go production with LDAP. A lot of LDAP implementations disallow anonymous searching by default. You can do this with ACLs, but it's not recommended. We cover this in the search.</p>"},{"location":"el/openldap/#disable-anonymous-binding","title":"Disable Anonymous Binding","text":"<p>It's recommended to disable anonymous searching. This can be handled by making a modification to the global configuration and the DIT configuration.</p> <pre><code>dn: cn=config\nchangetype: modify\nadd: olcDisallows\nolcDisallows: bind_anon\n\ndn: olcDatabase={2}mdb,cn=config\nchangetype: modify\nadd: olcRequires\nolcRequires: authc\n</code></pre> <p>Once you add this in, all anonymous searching will cease.</p> <pre><code># ldapsearch -x -LLL uid=zera\nldap_bind: Inappropriate authentication (48)\n        additional info: anonymous bind disallowed\n</code></pre>"},{"location":"el/openldap/#ldap-logging","title":"LDAP Logging","text":"<p>Logging is of course, very important for an LDAP server. There are a few types of logs we can do. There are the standard logs and then there are also audit logs. Audit logs allow an administrator to view changes being done to LDAP in an LDIF form. We can setup both.</p> <p>Let's create our modification LDIF. This will turn on standard logging and enable the audit module. Run an ldapmodify against this LDIF.</p> <pre><code>dn: cn=config\nchangetype: modify\nreplace: olcLogFile\nolcLogFile: /var/log/ldap-standard.log\n-\nreplace: olcLogLevel\nolcLogLevel: 256\n\n# Keep in mind, if you have other modules being loaded,\n# add them to the list\ndn: cn=module,cn=config\nchangetype: modify\nreplace: olcModuleLoad\nolcModuleLoad: refint.la\nolcModuleLoad: memberof.la\nolcModuleLoad: auditlog.la\n</code></pre> <p>Now, we need to make sure audit logging is done on our database.</p> <pre><code>dn: olcOverlay=auditlog,olcDatabase={2}mdb,cn=config\nobjectClass: olcAuditlogConfig\nobjectClass: olcOverlayConfig\nolcOverlay: auditlog\nolcAuditlogFile: /var/log/ldap-audit.log\n</code></pre> <p>It's recommended to have logrotate working for our logs. Here is a file I've dropped into /etc/logrotate.d. Experiment with these options. Since I work in an environment that has tons of transactions going all the time, and thus, my rotations are at 100M and 250M respectively.</p> <pre><code>/var/log/ldap-standard.log {\nmissingok\ncompress\nnotifempty\ndaily\nrotate 10\nsize=100M\n}\n\n/var/log/ldap-audit.log {\nmissingok\ncompress\nnotifempty\ndaily\nrotate 10\nsize=250M\n}\n</code></pre> <p>In /etc/rsyslog.conf, optionally, you can create this. If you find that logs are not appearing after the changes above, use this.</p> <pre><code>local4.*                   /var/log/ldap.log\n</code></pre>"},{"location":"el/openldap/#password-policy","title":"Password Policy","text":"<p>Password policies are a great asset, especially when working in an environment that have or require security policies. First, let's load our module and then add our overlay. This LDIF will do both. You may want to remove the comments before adding.</p> <pre><code>dn: cn=module,cn=config\nchangetype: modify\nreplace: olcModuleLoad\nolcModuleLoad: refint.la\nolcModuleLoad: memberof.la\nolcModuleLoad: auditlog.la\nolcModuleLoad: ppolicy.la\n\ndn: olcOverlay=ppolicy,olcDatabase={2}mdb,cn=config\nobjectClass: olcOverlayConfig\nobjectClass: olcPPolicyConfig\nolcOverlay: ppolicy\nolcPPolicyDefault: cn=default,ou=policies,dc=angelsofclockwork,dc=net\n# Set the below to TRUE if you want users to get locked out after failed attempted\nolcPPolicyUseLockout: TRUE\n# Set the below to TRUE if you want passwords to be hashed.\n# HIGHLY RECOMMENDED YOU SET THIS TO TRUE\nolcPPolicyHashCleartext: TRUE\n</code></pre> <p>Now, we need an LDIF to create our standard password policy. It's important to have a default password policy and then create separate ones as needed. Make sure to read the comments. You may want to remove the comments before adding.</p> <pre><code>dn: cn=default,ou=policies,dc=angelsofclockwork,dc=net\nobjectClass: pwdPolicy\nobjectClass: person\nobjectClass: top\ncn: passwordDefault\nsn: passwordDefault\npwdAttribute: userPassword\n# If set to 0, quality is not checked.\n# If set to 1, quality is checked by an internal module which you setup.\n# If set to 2, the system used to change the password must have a checking mechanism.\n# Pick your poison.\npwdCheckQuality: 0\n# Password lives for 84 days\npwdMinAge: 0\npwdMaxAge: 7257600\n# Minimum length is 7\npwdMinLength: 7\n# Password history of 10, cannot use a password that's in history\npwdInHistory: 10\n# 5 Failures till a lockout, 10 minutes for it to reset, 30 minute lockout.\npwdMaxFailure: 5\npwdFailureCountInterval: 600\npwdLockout: TRUE\npwdLockoutDuration: 1800\n# A user can change their own password.\npwdAllowUserChange: TRUE\n# Systems that authenticate to LDAP can warn 14 days before an expiration\npwdExpireWarning: 1209600\n# Allowed binds on an expired password.\npwdGraceAuthNLimit: 5\npwdMustChange: TRUE\npwdSafeModify: FALSE\n</code></pre> <p>In the instance you want to use the built-in module for password checking, your LDIF would have these lines.</p> <pre><code>pwdCheckQuality: 1\npwdCheckModule: check_password.so\n</code></pre>"},{"location":"el/pxeboot/","title":"PXE (with grub2)","text":"<p>This page goes over setting up a pxeboot system using tftp on Enterprise Linux or Fedora</p>"},{"location":"el/pxeboot/#requirements","title":"Requirements","text":"<p>Here are the list of requirements below.</p> <ul> <li>Enterprise Linux 8, 9, or Fedora</li> <li>A DHCP server setup that allows you to setup the <code>next_server</code> directive or setup the tftp server location</li> <li>Optionally if you are using a local mirror, <code>httpd</code> or <code>nginx</code> installed. (This guide assumes <code>httpd</code>)</li> </ul>"},{"location":"el/pxeboot/#tutorial-preface-notes-and-recommendations","title":"Tutorial Preface, Notes, and Recommendations","text":"<p>In some environments, it may be better (or easier, depending on your perspective) to setup a PXE server and roll out systems in a lab or otherwise in that fashion. It's one of the most straight forward ways to build out systems easily and consistently. The difference between a typical PXE setup and this is we're using grub2 menus, rather than the classic menu style. This makes it simpler to keep all configurations consistent between classic boot and EFI boot.</p> <p>If you plan on using supporting other architectures, it will be easier to use that architecture to run the grub2-mknetdir command and brings those to your tftp server.</p>"},{"location":"el/pxeboot/#cobbler","title":"Cobbler","text":"<p>While cobbler is a perfectly viable solution to setting up a pxeboot system for various distros and configurations, it is out of scope for this article. It is unknown if it sets up or directly supports grub2.</p>"},{"location":"el/pxeboot/#server-setup","title":"Server Setup","text":"<p>This section goes over the server setup portion for the tftp server.</p>"},{"location":"el/pxeboot/#tftp","title":"TFTP","text":"<p>Let's install the tftpserver package plus some additional grub packages. If you are wanting other architectures, you can obtain the other grub2 module packages from your distribution's BaseOS or equivalent repository for that architecture and install it manually.</p> <pre><code># x86_64\n% dnf install \\\n  grub2-efi-x64-modules \\\n  grub2-tools-extra \\\n  grub2-pc-modules \\\n  shim-ia32 \\              # this does not exist on el9+\n  tftp-server\n\n# aarch64\n% dnf install \\\n  grub2-efi-aa64-modules \\\n  grub2-tools-extra \\\n  tftp-server\n</code></pre> <p>Let's make our initial net directories and ensure the selinux contexts are correct.</p> <p>Secure Boot</p> <p>Secure Boot does not work with the default files provided. You will need to obtain the <code>shimx64.efi</code> or <code>shim.efi</code> file from your distribution's shim-{x64,aa64} package.</p> <pre><code>% grub2-mknetdir --net-directory /var/lib/tftpboot/\nNetboot directory for i386-pc created. Configure your DHCP server to point to /srv/tftp/boot/grub2/i386-pc/core.0\nNetboot directory for x86_64-efi created. Configure your DHCP server to point to /srv/tftp/boot/grub2/x86_64-efi/core.efi\n\n% restorecon -R /var/lib/tftpboot\n</code></pre> <p>Now you'll need to enable the tftp socket and open the port. Traditionally, you would use xinetd. It's no longer required for the tftp service.</p> <pre><code># Note: This is port 69 with the UDP protocol\n% firewall-cmd --add-service=tftp --permanent\n% systemctl enable tftp.socket --now\n</code></pre>"},{"location":"el/pxeboot/#dhcp-isc","title":"DHCP (ISC)","text":"<p>On your DHCP server configuration (typically /etc/dhcp/dhcpd.conf if running on Fedora or EL), you should set the following options:</p> <pre><code>option pxe-system-type code 93 = unsigned integer 16;\noption rfc3442-classless-static-routes code 121 = array of integer 8;\noption ms-classless-static-routes code 249 = array of integer 8;\n\noption space pxelinux;\noption pxelinux.magic code 208 = string;\noption pxelinux.configfile code 209 = text;\noption pxelinux.pathprefix code 210 = text;\noption pxelinux.reboottime code 211 = unsigned integer 32;\noption architecture-type   code 93 = unsigned integer 16;\noption pxelinux.mtftp-ip    code 1 = ip-address;\noption pxelinux.mtftp-cport code 2 = unsigned integer 16;\noption pxelinux.mtftp-sport code 3 = unsigned integer 16;\noption pxelinux.mtftp-tmout code 4 = unsigned integer 8;\noption pxelinux.mtftp-delay code 5 = unsigned integer 8;\n</code></pre> <p>Whether this section is within a subnet block or not, it is needed to ensure the right bootloader is called. Note that we're only loading x86. If you are loading armhfp, use 00:0a. If you are loading aarch64, use 00:0b.</p> <pre><code>class \"pxeclients\" {\n        match if substring (option vendor-class-identifier, 0, 9) = \"PXEClient\";\n        # x86_64 EFI\n        if option pxe-system-type = 00:07 {\n                filename \"boot/grub2/x86_64-efi/core.efi\";\n        } else if option pxe-system-type = 00:08 {\n                filename \"boot/grub2/x86_64-efi/core.efi\";\n        } else if option pxe-system-type = 00:09 {\n                filename \"boot/grub2/x86_64-efi/core.efi\";\n        } else {\n                # BIOS boot only\n                filename \"boot/grub2/i386-pc/core.0\";\n        }\n}\n</code></pre> <p>Note that in your subnet blocks, you should also mention <code>next_server</code>, which should point to your TFTP server. The DHCP and TFTP server can be on the same machine and there's nothing stopping you from doing that; <code>next_server</code> needs to be set regardless here. See an example below of a full work dhcpd.conf.</p> <pre><code>ddns-update-style interim;\n\nallow booting;\nallow bootp;\nauthoritative;\nlog-facility local6;\n\nignore client-updates;\nset vendorclass = option vendor-class-identifier;\n\n## Allowing EFI Clients\noption pxe-system-type code 93 = unsigned integer 16;\noption rfc3442-classless-static-routes code 121 = array of integer 8;\noption ms-classless-static-routes code 249 = array of integer 8;\n\noption space pxelinux;\noption pxelinux.magic code 208 = string;\noption pxelinux.configfile code 209 = text;\noption pxelinux.pathprefix code 210 = text;\noption pxelinux.reboottime code 211 = unsigned integer 32;\noption architecture-type code 93 = unsigned integer 16;\n\noption pxelinux.mtftp-ip    code 1 = ip-address;\noption pxelinux.mtftp-cport code 2 = unsigned integer 16;\noption pxelinux.mtftp-sport code 3 = unsigned integer 16;\noption pxelinux.mtftp-tmout code 4 = unsigned integer 8;\noption pxelinux.mtftp-delay code 5 = unsigned integer 8;\n\nsubnet 10.100.0.0 netmask 255.255.255.0 {\n        interface               br1000;\n        option routers          10.100.0.1;\n        option domain-name-servers      10.100.0.1, 10.100.0.231;\n        option domain-name              \"angelsofclockwork.net\";\n        option subnet-mask              255.255.255.0;\n        range           10.100.0.110 10.100.0.199;\n        ## EFI Client Catch\n        class \"pxeclients\" {\n                match if substring (option vendor-class-identifier, 0, 9) = \"PXEClient\";\n                if option pxe-system-type = 00:07 {\n                        filename \"boot/grub2/x86_64-efi/core.efi\";\n                } else if option pxe-system-type = 00:08 {\n                        filename \"boot/grub2/x86_64-efi/core.efi\";\n                } else if option pxe-system-type = 00:09 {\n                        filename \"boot/grub2/x86_64-efi/core.efi\";\n                } else if option pxe-system-type = 00:0a {\n                        filename \"boot/grub2/armv7a-efi/core.efi\";\n                } else if option pxe-system-type = 00:0b {\n                        filename \"boot/grub2/aarch64-efi/core.efi\";\n                } else {\n                        filename \"boot/grub2/i386-pc/core.0\";\n                }\n        }\n        default-lease-time      21600;\n        max-lease-time  43200;\n        next-server     10.100.0.1;\n}\n</code></pre> <p>Ensure that the dhcpd service is restarted after making the necessary changes.</p>"},{"location":"el/pxeboot/#dhcp-kea","title":"DHCP (Kea)","text":"<p>Kea is a different configuration style from ISC. Some of the configuration is the same and also frustratingly different.</p> <p>You'll need to turn on some options, similar to dhcpd. In the <code>Dhcp4</code> section, we'll set them.</p> <pre><code>...\n    \"option-def\": [\n      {\n        \"space\": \"dhcp4\",\n        \"name\": \"rfc3442-classless-static-routes\",\n        \"code\": 121,\n        \"array\": true,\n        \"type\": \"int8\"\n      },\n      {\n        \"space\": \"dhcp4\",\n        \"name\": \"ms-classless-static-routes\",\n        \"code\": 249,\n        \"array\": true,\n        \"type\": \"int8\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"magic\",\n        \"code\": 208,\n        \"type\": \"string\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"configfile\",\n        \"code\": 209,\n        \"type\": \"string\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"pathprefix\",\n        \"code\": 210,\n        \"type\": \"string\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"reboottime\",\n        \"code\": 211,\n        \"type\": \"uint32\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"mtftp-ip\",\n        \"code\": 1,\n        \"type\": \"ipv4-address\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"mtftp-cport\",\n        \"code\": 2,\n        \"type\": \"uint16\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"mtftp-sport\",\n        \"code\": 3,\n        \"type\": \"uint16\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"mtftp-tmout\",\n        \"code\": 4,\n        \"type\": \"uint8\"\n      },\n      {\n        \"space\": \"pxelinux\",\n        \"name\": \"mtftp-delay\",\n        \"code\": 5,\n        \"type\": \"uint8\"\n      },\n      {\n        \"space\": \"dhcp4\",\n        \"name\": \"iscsi-initiator-iqn\",\n        \"code\": 203,\n        \"type\": \"string\"\n      },\n      {\n        \"name\": \"PXEDiscoveryControl\",\n        \"code\": 6,\n        \"space\": \"vendor-encapsulated-options-space\",\n        \"type\": \"uint8\",\n        \"array\": false\n      },\n      {\n        \"name\": \"PXEMenuPrompt\",\n        \"code\": 10,\n        \"space\": \"vendor-encapsulated-options-space\",\n        \"type\": \"record\",\n        \"array\": false,\n        \"record-types\": \"uint8,string\"\n      },\n      {\n        \"name\": \"PXEBootMenu\",\n        \"code\": 9,\n        \"space\": \"vendor-encapsulated-options-space\",\n        \"type\": \"record\",\n        \"array\": false,\n        \"record-types\": \"uint16,uint8,string\"\n      }\n    ],\n...\n</code></pre> <p>Unlike dhcpd, we'll see the class information also in the <code>Dhcp4</code> section. This will make it effectively work in all subnets. The below also enables x86, ARM, and POWER systems.</p> <pre><code>...\n    \"client-classes\": [\n      { \"name\": \"PXEClient-x86_64-1\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00007'\", \"boot-file-name\": \"boot/grub2/x86_64-efi/core.efi\" },\n      { \"name\": \"PXEClient-x86_64-2\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00008'\", \"boot-file-name\": \"boot/grub2/x86_64-efi/core.efi\" },\n      { \"name\": \"PXEClient-x86_64-3\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00009'\", \"boot-file-name\": \"boot/grub2/x86_64-efi/core.efi\" },\n      { \"name\": \"PXEClient-aarch64-1\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:0000b'\", \"boot-file-name\": \"boot/grub2/arm64-efi/core.efi\" },\n      { \"name\": \"PXEClient-ppc64le-1\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:0000e'\", \"boot-file-name\": \"boot/grub2/powerpc-ieee1275/core.elf\" },\n      /// these are whatever\n      { \"name\": \"PXEClient-i386-1\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00006'\", \"boot-file-name\": \"boot/grub2/i386-pc/core.0\" },\n      { \"name\": \"PXEClient-i386-3\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00000'\", \"boot-file-name\": \"boot/grub2/i386-pc/core.0\" },\n      { \"name\": \"PXEClient-i386-2\", \"test\": \"substring(option[60].hex,0,20) == 'PXEClient:Arch:00002'\", \"boot-file-name\": \"elilo.efi\" }\n    ],\n...\n</code></pre> <p>Subnet blocks are straight forward. They also will sit in <code>Dhcp4</code>. Note that each subnet block will need a unique <code>id</code> number. Ensure <code>next_server</code> is setup correctly also.</p> <pre><code>...\n    \"subnet4\": [\n      {\n        \"id\": 1,\n        \"subnet\": \"10.100.0.0/24\",\n        \"interface\": \"br1000\",\n        \"option-data\": [\n          {\n            \"space\": \"dhcp4\",\n            \"name\": \"routers\",\n            \"code\": 3,\n            \"data\": \"10.100.0.1\"\n          },\n          {\n            \"space\": \"dhcp4\",\n            \"name\": \"domain-name-servers\",\n            \"code\": 6,\n            \"data\": \"10.100.0.1, 10.100.0.231\"\n          },\n          {\n            \"space\": \"dhcp4\",\n            \"name\": \"domain-name\",\n            \"code\": 15,\n            \"data\": \"angelsofclockwork.net\"\n          },\n          {\n            \"space\": \"dhcp4\",\n            \"name\": \"subnet-mask\",\n            \"code\": 1,\n            \"data\": \"255.255.255.0\"\n          }\n        ],\n        \"pools\": [\n          {\n            \"pool\": \"10.100.0.110 - 10.100.0.199\"\n          }\n        ],\n        \"valid-lifetime\": 21600,\n        \"max-valid-lifetime\": 43200,\n        \"next-server\": \"10.100.0.1\",\n        \"reservations\": []\n      },\n...\n</code></pre>"},{"location":"el/pxeboot/#web-server-httpd","title":"Web Server (httpd)","text":"<p>If we plan on hosting the installation mirror in your environment, it's recommended to stand up a simple web server. It does not require any kind of special configuration. We'll use the default /var/www/html/ path. If you wish to use another such as /srv/www, you will need to setup a virtual host (this is outside the scope of this page).</p> <pre><code>% dnf install httpd -y\n% systemctl enable httpd --now\n% firewall-cmd --add-service=http --permanent\n% firewall-cmd --complete-reload\n\n# create the directories for our distributions\n% mkdir -p /var/www/html/os/{fedora,centos,rocky}\n</code></pre>"},{"location":"el/pxeboot/#setting-up-grub","title":"Setting up Grub","text":"<p>When you run grub2-mknetdir, it created a core.* set of files. An accompanying grub.cfg must sit next to them. To prevent a duplication of work, it can be simplified by making all grub configurations at /var/lib/tftpboot and then symlink them next to each directory containing core.*. Let's make a very, very simple one.</p> <pre><code>set default=0\nset timeout=60\nmenuentry 'EFI Firmware System Setup' $menuentry_id_option 'uefi-firmware' {\n  fwsetup\n}\n\nmenuentry 'Reboot' {\n  reboot\n}\n\nmenuentry 'Shutdown' {\n  halt\n}\n</code></pre> <p>Now let's just symlink it.</p> <pre><code>% cd /var/lib/tftpboot/boot/grub2/x86_64-efi\n% ln -s ../../../grub.cfg\n% cd /var/lib/tftpboot/boot/grub2/i386-pc\n% ln -s ../../../grub.cfg\n</code></pre> <p>This should produce a grub menu for both EFI and BIOS systems that contain three bootable options.</p>"},{"location":"el/pxeboot/#adding-distributions","title":"Adding Distributions","text":"<p>Now that grub is sort of setup, we should add a distribution to it at least. Below are a couple examples using Fedora, Rocky Linux, and CentOS Stream.</p> <p>Note</p> <p>When setting up for UEFI, if <code>linux</code> and <code>initrd</code> do not work for you, you may need to use <code>linuxefi</code> and <code>initrdefi</code> instead. This should be a rare case.</p>"},{"location":"el/pxeboot/#rocky-linux","title":"Rocky Linux","text":"<p>Setting up Rocky Linux (or any other Enterprise Linux distribution) should be straight forward. We'll download both Rocky Linux 8 and Rocky Linux 9 and setup the menus.</p> <p>Note</p> <p>If you plan on not hosting a mirror of the base repositories, ensure that your inst.repo/inst.stage2 commands are accurate to a mirror of your choice.</p> <p>The below assumes we are hosting a mirror of the downloaded ISO, which will make installations quicker as it'll be confined to your network.</p> <pre><code>% cd /var/tmp\n# Rocky Linux 8\n% wget https://dl.rockylinux.org/pub/rocky/8/isos/x86_64/Rocky-8-latest-x86_64-dvd.iso\n# Rocky Linux 9\n% wget https://dl.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9-latest-x86_64-dvd.iso\n\n# Optionally, if you plan on supporting ARM...\n% wget https://dl.rockylinux.org/pub/rocky/8/isos/aarch64/Rocky-8-latest-aarch64-dvd.iso\n% wget https://dl.rockylinux.org/pub/rocky/9/isos/aarch64/Rocky-9-latest-aarch64-dvd.iso\n</code></pre> <p>Here we'll copy the data we want into the necessary directories. Any pxeboot related images will go to /var/lib/tftpboot/rocky-X-ARCH (X being the major version, ARCH being the architecture). If we are keeping a local mirror of the DVD, we'll put it into /var/www/html/os/rocky/X/ARCH. Below is for x86_64, but the same steps can be repeated for aarch64 without any issues. Just replace x86_64 with aarch64.</p> <pre><code>## Rocky 8\n% mount -o loop Rocky-8-latest-x86_64-dvd.iso /mnt\n% mkdir /var/lib/tftpboot/rocky-8-x86_64\n% cp /mnt/images/pxeboot/* /var/lib/tftpboot/rocky-8-x86_64\n% mkdir -p /var/www/html/os/rocky/8/x86_64\n% rsync -vrlptDSH --delete /mnt/ /var/www/html/os/rocky/8/x86_64\n% umount /mnt\n\n## Rocky 9\n% mount -o loop Rocky-9-latest-x86_64-dvd.iso /mnt\n% mkdir /var/lib/tftpboot/rocky-9-x86_64\n% cp /mnt/images/pxeboot/* /var/lib/tftpboot/rocky-9-x86_64\n% mkdir -p /var/www/html/os/rocky/9/x86_64\n% rsync -vrlptDSH --delete /mnt/ /var/www/html/os/rocky/9/x86_64\n% umount /mnt\n\n# Copy the appropriate files over for the kernels\n% mkdir -p /var/lib/tftpboot/rocky-{8,9}-x86_64\n% cp /var/www/html/os/rocky/8/x86_64/images/pxeboot/* /var/lib/tftpboot/rocky-8-x86_64\n% cp /var/www/html/os/rocky/9/x86_64/images/pxeboot/* /var/lib/tftpboot/rocky-9-x86_64\n\n% restorecon -R /var/www/html/os/rocky\n% restorecon -R /var/lib/tftpboot\n</code></pre> <p>At this point, we'll need to setup the grub menus. We'll setup non-kickstart examples for BIOS and UEFI.</p> <pre><code>. . .\n# Rocky 8\nmenuentry 'Install Rocky Linux 8 (No KS) (UEFI)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 8 kernel...\"\n  linux rocky-8-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/8/x86_64 inst.stage2=http://10.100.0.1/os/rocky/8/x86_64 ip=dhcp\n  initrd rocky-8-x86_64/initrd.img\n}\nmenuentry 'Install Rocky Linux 8 (No KS) (BIOS)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 8 kernel...\"\n  linux16 rocky-8-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/8/x86_64 inst.stage2=http://10.100.0.1/os/rocky/8/x86_64 ip=dhcp\n  initrd16 rocky-8-x86_64/initrd.img\n}\n\n# if you are setting up arm...\nmenuentry 'Install Rocky Linux 8 (No KS) (aarch64)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 8 kernel...\"\n  linux rocky-9-aarch64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/8/aarch64 inst.stage2=http://10.100.0.1/os/rocky/8/aarch64 ip=dhcp\n  initrd rocky-9-aarch64/initrd.img\n}\n</code></pre> <pre><code>. . .\n# Rocky 9\nmenuentry 'Install Rocky Linux 9 (No KS) (UEFI)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 9 kernel...\"\n  linux rocky-9-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/9/x86_64 inst.stage2=http://10.100.0.1/os/rocky/9/x86_64 ip=dhcp\n  initrd rocky-9-x86_64/initrd.img\n}\nmenuentry 'Install Rocky Linux 9 (No KS) (BIOS)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 9 kernel...\"\n  linux16 rocky-9-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/9/x86_64 inst.stage2=http://10.100.0.1/os/rocky/9/x86_64 ip=dhcp\n  initrd16 rocky-9-x86_64/initrd.img\n}\n\n# if you are setting up arm...\nmenuentry 'Install Rocky Linux 9 (No KS) (aarch64)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading Rocky Linux 9 kernel...\"\n  linux rocky-9-aarch64/vmlinuz inst.repo=http://10.100.0.1/os/rocky/9/aarch64 inst.stage2=http://10.100.0.1/os/rocky/9/aarch64 ip=dhcp\n  initrd rocky-9-aarch64/initrd.img\n}\n</code></pre> <p>The Rocky Linux installation should now be bootable.</p>"},{"location":"el/pxeboot/#centos-stream","title":"CentOS Stream","text":"<p>Much like Rocky Linux (or other derivatives), the path is the same for setting it up.</p> <p>Using upstream mirror path</p> <p>If you plan on not hosting a mirror of the base repositories, ensure that your inst.repo/inst.stage2 commands are accurate to a mirror of your choice.</p> <pre><code>% cd /var/tmp\n# CentOS Stream 9\n% wget -O CentOS-Stream-9-latest-x86_64-dvd1.iso \\\n  'https://mirrors.centos.org/mirrorlist?path=/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-dvd1.iso&amp;redirect=1&amp;protocol=https'\n\n# Optionally, if you plan on supporting ARM...\n% wget -O CentOS-Stream-9-latest-aarch64-dvd1.iso \\\n  'https://mirrors.centos.org/mirrorlist?path=/9-stream/BaseOS/aarch64/iso/CentOS-Stream-9-latest-aarch64-dvd1.iso&amp;redirect=1&amp;protocol=https'\n</code></pre> <p>Here we'll copy the data we want into the necessary directories. Any pxeboot related images will go to /var/lib/tftpboot/rocky-X-ARCH (X being the major version, ARCH being the architecture). If we are keeping a local mirror of the DVD, we'll put it into /var/www/html/os/rocky/X/ARCH. Below is for x86_64, but the same steps can be repeated for aarch64 without any issues. Just replace x86_64 with aarch64.</p> <pre><code>## CentOS Stream 9\n% mount -o loop CentOS-Stream-9-latest-x86_64-dvd1.iso /mnt\n% mkdir /var/lib/tftpboot/centos-9-x86_64\n% cp /mnt/images/pxeboot/* /var/lib/tftpboot/centos-9-x86_64\n% mkdir -p /var/www/html/os/centos/9/x86_64\n% rsync -vrlptDSH --delete /mnt/ /var/www/html/os/centos/9/x86_64\n% umount /mnt\n\n% mkdir -p /var/lib/tftpboot/centos-9-x86_64\n% cp /var/www/html/os/centos/9/x86_64/images/pxeboot/* /var/lib/tftpboot/centos-9-x86_64\n\n% restorecon -R /var/www/html/os/centos/9\n% restorecon -R /var/lib/tftpboot\n</code></pre> <p>At this point, we'll need to setup the grub menus. We'll setup non-kickstart examples for BIOS and UEFI.</p> <pre><code>. . .\n# CentOS Stream 9\nmenuentry 'Install CentOS Stream 9 (No KS) (UEFI)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading CentOS Stream 9 kernel...\"\n  linux centos-9-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/centos/9/x86_64 inst.stage2=http://10.100.0.1/os/centos/9/x86_64 ip=dhcp\n  initrd centos-9-x86_64/initrd.img\n}\nmenuentry 'Install CentOS Stream 9 (No KS) (BIOS)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading CentOS Stream 9 kernel...\"\n  linux16 centos-9-x86_64/vmlinuz inst.repo=http://10.100.0.1/os/centos/9/x86_64 inst.stage2=http://10.100.0.1/os/centos/9/x86_64 ip=dhcp\n  initrd16 centos-9-x86_64/initrd.img\n}\n\n# if you are setting up arm...\nmenuentry 'Install CentOS Stream 9 (No KS) (aarch64)' --class fedora --class gnu-linux --class gnu --class os {\n  echo \"Loading CentOS Stream 9 kernel...\"\n  linux centos-9-aarch64/vmlinuz inst.repo=http://10.100.0.1/os/centos/9/aarch64 inst.stage2=http://10.100.0.1/os/centos/9/aarch64 ip=dhcp\n  initrd centos-9-aarch64/initrd.img\n}\n</code></pre> <p>The CentOS Stream installation should now be bootable.</p>"},{"location":"el/pxeboot/#fedora","title":"Fedora","text":"<p>Let's put up a regular installer with no kickstart for Fedora. This does not involve pulling down any ISO's and will rely entirely on using upstream repositories.</p> <pre><code>% cd /var/lib/tftpboot\n% mkdir fedora-x86_64\n% cd fedora-x86_64\n# Replace XX with the current fedora version\n% wget https://dl.fedoraproject.org/pub/fedora/linux/releases/XX/Everything/x86_64/os/images/pxeboot/initrd.img\n% wget https://dl.fedoraproject.org/pub/fedora/linux/releases/XX/Everything/x86_64/os/images/pxeboot/vmlinuz\n\n# If you want arm systems... aarch64\n% cd ..\n% mkdir fedora-aarch64\n# Replace XX with the current fedora version\n% wget https://dl.fedoraproject.org/pub/fedora/linux/releases/XX/Everything/aarch64/os/images/pxeboot/initrd.img\n% wget https://dl.fedoraproject.org/pub/fedora/linux/releases/XX/Everything/aarch64/os/images/pxeboot/vmlinuz\n</code></pre> <p>Now we can add a couple menu entry items for Fedora. I'm making both EFI and Classic entries to ensure we can boot both EFI and BIOS systems from the same menu.</p> <pre><code>. . .\nmenuentry 'Install Fedora Linux (EFI)' --class fedora --class gnu-linux --class gnu --class os {\n  linux fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os ip=dhcp\n  initrd fedora-x86_64/initrd.img\n}\nmenuentry 'Install Fedora Linux (Classic)' --class fedora --class gnu-linux --class gnu --class os {\n  linux16 fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ ip=dhcp\n  initrd16 fedora-x86_64/initrd.img\n}\n# Add the below for ARM systems\nmenuentry 'Install Fedora Linux (ARM)' --class fedora --class gnu-linux --class gnu --class os {\n  linux fedora-aarch64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ ip=dhcp\n  initrd fedora-aarch64/initrd.img\n}\n</code></pre> <p>Now the Fedora installation should be bootable.</p>"},{"location":"el/pxeboot/#customizing-grub","title":"Customizing Grub","text":"<p>Grub is customizable. It is possible to setup background images, choose menu colors, setup themes, and so on.</p>"},{"location":"el/pxeboot/#colors-and-backgrounds","title":"Colors and Backgrounds","text":"<p>Colors and backgrounds are perfectly possible, even in an EFI setup. We'll need to load a few modules and then set the colors and background we want. Note that if you're using a background, it should live in /var/lib/tftpboot to make things easier.</p> <pre><code>. . .\ninsmod all_video\ninsmod gfxterm\ninsmod gfxterm_menu\ninsmod gfxmenu\ninsmod gfxterm_background\ninsmod png\nterminal_output gfxterm\nbackground_image -m stretch /bg.png\n\nset menu_color_highlight=cyan/black\nset menu_color_normal=white/black\nset color_normal=white/black\n. . .\n</code></pre> <p>The background would be /var/lib/tftpboot/bg.png in this example. Selected items will appear to be cyan and the typical gray selection box is now transparent, which is done by setting it to black. Everything else should appear as white text with a transparent background. Example below.</p> <p></p>"},{"location":"el/pxeboot/#special-submenus","title":"Special Submenus","text":"<p>Submenus are easily created using submenu in the grub configuration. For example:</p> <pre><code>submenu 'Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n   set menu_color_highlight=black/light-cyan\n   set menu_color_normal=white/black\n   set color_normal=white/black\n\n   menuentry 'Install Fedora Linux (EFI)' --class fedora --class gnu-linux --class gnu --class os {\n     linux fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os ip=dhcp\n     initrd fedora-x86_64/initrd.img\n   }\n   menuentry 'Install Fedora Linux (Classic)' --class fedora --class gnu-linux --class gnu --class os {\n     linux16 fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ ip=dhcp\n     initrd16 fedora-x86_64/initrd.img\n   }\n   menuentry 'Install Fedora Linux (ARM)' --class fedora --class gnu-linux --class gnu --class os {\n     linux fedora-aarch64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ ip=dhcp\n     initrd fedora-aarch64/initrd.img\n   }\n}\n</code></pre> <p>This now means \"Fedora Linux\" will show up as a menu option and it will take you to a brand new menu with the two listed items, and another color scheme. Note that we created color items because submenus will reset the theme options. Example of how it looks is below.</p> <p></p> <p>It is also possible to place everything into separate source-able files. Note that when you do this, you will need to symlink those files just like you did with grub.cfg.</p> <pre><code>submenu 'Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n  set menu_color_highlight=black/light-cyan\n  set menu_color_normal=white/black\n  set color_normal=white/black\n  source fedora.cfg\n}\n</code></pre> <pre><code>menuentry 'Install Fedora Linux (EFI)' --class fedora --class gnu-linux --class gnu --class os {\n  linux fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os ip=dhcp\n  initrd fedora-x86_64/initrd.img\n}\nmenuentry 'Install Fedora Linux (Classic)' --class fedora --class gnu-linux --class gnu --class os {\n  linux16 fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ ip=dhcp\n  initrd16 fedora-x86_64/initrd.img\n}\nmenuentry 'Install Fedora Linux (ARM)' --class fedora --class gnu-linux --class gnu --class os {\n  linux fedora-aarch64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os/ ip=dhcp\n  initrd fedora-aarch64/initrd.img\n}\n</code></pre> <p>Submenus can be nested too. Here's a deeper, working example of my own setup using Fedora 40.</p> <pre><code># grub.cfg\nset default=0\nset timeout=60\ninsmod all_video\ninsmod gfxterm\ninsmod gfxterm_menu\ninsmod gfxmenu\ninsmod gfxterm_background\ninsmod png\nterminal_output gfxterm\nloadfont /unicode.pf2\nbackground_image -m stretch /bg.png\n\nset menu_color_highlight=cyan/black\nset menu_color_normal=white/black\nset color_normal=white/black\n\nsubmenu 'Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n  set menu_color_highlight=black/light-cyan\n  set menu_color_normal=white/black\n  set color_normal=white/black\n  source fedora.cfg\n}\n\nmenuentry 'EFI System Setup' $menuentry_id_option 'uefi-firmware' {\n  fwsetup\n}\n\nmenuentry 'Reboot' {\n  reboot\n}\n\nmenuentry 'Shutdown' {\n  halt\n}\n\n# fedora.cfg\nsubmenu 'Fedora Linux (latest stable)' --class fedora --class gnu-linux --class gnu --class os {\n  set menu_color_highlight=black/light-cyan\n  set menu_color_normal=white/black\n  set color_normal=white/black\n\n  # EFI Only\n  submenu 'EFI Mode' --class fedora --class gnu-linux --class gnu --class os {\n    set menu_color_highlight=black/light-cyan\n    set menu_color_normal=white/black\n    set color_normal=white/black\n\n    menuentry 'Install Fedora Linux (No KS)' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os ip=dhcp\n      initrd fedora-x86_64/initrd.img\n    }\n\n    menuentry 'Install Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os ip=dhcp\n      initrd fedora-x86_64/initrd.img\n    }\n\n    menuentry 'Fedora Linux (Rescue Mode)' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-x86_64/vmlinuz inst.rescue inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os\n      initrd fedora-x86_64/initrd.img\n    }\n  }\n\n  # Classic Only\n  submenu 'Classic Mode' --class fedora --class gnu-linux --class gnu --class os {\n    set menu_color_highlight=black/light-cyan\n    set menu_color_normal=white/black\n    set color_normal=white/black\n\n    menuentry 'Install Fedora Linux (No KS)' --class fedora --class gnu-linux --class gnu --class os {\n      linux16 fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ ip=dhcp\n      initrd16 fedora-x86_64/initrd.img\n    }\n\n     menuentry 'Install Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n      linux16 fedora-x86_64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/ ip=dhcp\n      initrd16 fedora-x86_64/initrd.img\n    }\n\n    menuentry 'Fedora Linux (Rescue Mode)' --class fedora --class gnu-linux --class gnu --class os {\n      linux16 fedora-x86_64/vmlinuz inst.rescue inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/x86_64/os/\n      initrd16 fedora-x86_64/initrd.img\n    }\n  }\n\n  # EFI mode for ARM\n  submenu 'EFI Mode (aarch64)' --class fedora --class gnu-linux --class gnu --class os {\n    set menu_color_highlight=black/light-cyan\n    set menu_color_normal=white/black\n    set color_normal=white/black\n\n    menuentry 'Install Fedora Linux (No KS)' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-aarch64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os ip=dhcp\n      initrd fedora-aarch64/initrd.img\n    }\n\n    menuentry 'Install Fedora Linux' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-aarch64/vmlinuz inst.repo=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os ip=dhcp\n      initrd fedora-aarch64/initrd.img\n    }\n\n    menuentry 'Fedora Linux (Rescue Mode)' --class fedora --class gnu-linux --class gnu --class os {\n      linux fedora-aarch64/vmlinuz inst.rescue inst.stage2=http://dl.fedoraproject.org/pub/fedora/linux/releases/40/Everything/aarch64/os\n      initrd fedora-aarch64/initrd.img\n    }\n  }\n}\n</code></pre>"},{"location":"el/pxeboot/#secure-boot","title":"Secure Boot","text":"<p>Using the above setup, it is perfectly possible to have Secure Boot working. Instead of using <code>core.efi</code>, you would use a <code>shimx64.efi</code> file from the shim package. The <code>grub2-mknetdir</code> command does not provide this file, so we need to extract it from a running system or download and unpack it.</p> <pre><code>% dnf download shim-x64\n% rpm2cpio shim-x64-15.8-2.el9.x86_64.rpm | cpio -idmv\n% ls -l boot/efi/EFI/rocky\ntotal 3656\n-rwx------. 1 root root    104 Apr  4 14:23 BOOTX64.CSV\n-rwx------. 1 root root 857352 Apr  4 14:23 mmx64.efi\n-rwx------. 1 root root 959224 Apr  4 14:23 shim.efi\n-rwx------. 1 root root 959224 Apr  4 14:23 shimx64.efi\n-rwx------. 1 root root 952016 Apr  4 14:23 shimx64-rocky.efi\n</code></pre> <p>Note that both <code>shim.efi</code> and <code>shimx64.efi</code> should be the same file. Copying <code>shimx64.efi</code> is sufficient enough.</p> <p>Ensure that your DHCP configuration is now pointing to this file and the permissions are set to <code>755</code>.</p>"},{"location":"el/pxeboot/#font-issues","title":"Font Issues","text":"<p>If you notice your grub2 menu is missing characters (e.g. you see blocks), you may need to get at least the unicode.pf2 file from the same system you obtained the <code>shimx64.efi</code> file. It can be found in <code>/usr/share/grub</code>. However, this may not work, and may require you to use the <code>grub2-mkfont</code> tool.</p>"},{"location":"el/sysadmin/","title":"The System Administrator Experience","text":"<p>This write up provides steps on the System Administrator experience. This is not an end-all, be-all, and has many variables to keep in mind. But can provide a baseline for you.</p> <p>Please keep in mind, this is for Red Hat based distributions, mainly Enterprise Linux 8 and 9. CentOS Stream works within reason.</p> <p>Also note that it will be recommended that you do things in ansible. The RHCE for RHEL 9 will require you to be able to use ansible. As such, we will be focusing on RHEL 9.</p>"},{"location":"el/sysadmin/#recommendations","title":"Recommendations","text":"<p>Note</p> <p>Software Replacements</p> <ul> <li>Postgresql can be replaced with MySQL/MariaDB</li> <li>Use Katello/Foreman, straight Pulp, or Uyuni</li> <li>You can use any hypervisor other than KVM if you wish, with   specific caveats</li> <li>nagios can be replaced with icinga</li> <li>You can replace firewalld with the regular nftables service. This   may be required for your virtual host</li> </ul> <p>Note</p> <p>General Notes</p> <ul> <li>It's recommended to use colored vim syntax. Root doesn't use vim   when vim-enhanced is installed. You can make an alias for vi to run   vim (not recommended).</li> <li>Turn on syntaxing in <code>~/.vimrc</code> with <code>syntax on</code></li> <li>Make the vim colors brighter in <code>~/.vimrc</code> with <code>set background=dark</code></li> <li>Export your EDITOR variable in <code>~/.bash_profile</code> with <code>export EDITOR=vim</code></li> <li>Keep selinux set to enforcing</li> </ul> <p>Note</p> <p>Hardware Requirements</p> <ul> <li>RAM - Minimum: 32GB, Recommended: 64GB</li> <li>CPU - Minimum: Intel or AMD Quad Core, Recommended: 8 Core with HyperThreading</li> <li>Storage - Minimum: 4TB, Recommended: 8TB</li> <li>Network - minium 1gb link recommended</li> </ul> <p>Please consider on building an actual lab machine that you can do this on.</p>"},{"location":"el/sysadmin/#certification-completions","title":"Certification Completions","text":"<p>Certification guidelines will be updated later.</p>"},{"location":"el/sysadmin/#notes-and-changelog","title":"Notes and Changelog","text":"<p>Note</p> <p>Post Experience Notes</p> <p>While this write up uses KVM exclusively, you may want to enhance your learning after the fact by setting up another virtualization platform on your virtual host. It may require you to redesign everything or even start over, but it is something you can consider which you like best overall.</p> Date Changes January 07, 2024 Restructure with markdown"},{"location":"el/sysadmin/#begin","title":"Begin","text":"<p>We'll now begin the system administrator experience. We will provide from beginning to end, what to do, without giving away what has to be done or has to be configured. This is on you to perform. At the end, there is a \"wiki\" that you create where you will have a chance to document everything you did. I recommend writing down or putting in a word document what you are doing or have done throughout so it'll make your wiki documentation much, much better.</p>"},{"location":"el/sysadmin/#setup-a-kvm-hypervisor","title":"Setup a KVM Hypervisor","text":"<p>Now you'll need to setup a KVM Hypervisor. You can do this on Fedora 39+ or Enterprise Linux 9. Because EL9 is a stable platform for libvirt, I recommend using going that route. If you want the latest features for the cost of some stability, Fedora will work for you.</p> <p>You may want to make sure your hardware supports virtualization.</p> <pre><code>egrep --color 'vmx|svm' /proc/cpuinfo\n</code></pre>"},{"location":"el/sysadmin/#recommendations-and-options","title":"Recommendations and Options","text":"<ul> <li> <p>Create multiple datastores (storage pools where the VM images will   sit)</p> <ul> <li>Example, 2x2TB means you can make two datastores, 4x1TB means   you can make four.</li> </ul> </li> <li> <p>Attempt to use LVM as the backing for the store.</p> <ul> <li>You can create a Volume Group and have the VM's live as Logical   Volumes.</li> <li>You can create a Volume Group and have one or more partitions to   make \"more\" datastores</li> </ul> </li> <li> <p>Destroy the \"built in\" network that libvirt already provides and   make your own</p> <ul> <li>It already makes virbr0. Make your own OR modify it to not   support DHCP/DNS (eg, static only)</li> </ul> </li> </ul>"},{"location":"el/sysadmin/#hints","title":"Hints","text":"<ul> <li> <p>Most of your commands will be from the following:</p> <ul> <li>virsh</li> <li>fdisk/parted</li> <li>pvcreate &amp; vgcreate</li> <li>mkfs</li> </ul> </li> <li> <p>To get the most performance out of your VM's disk wise, consider   these options:</p> <ul> <li>Avoid QCOW2</li> <li>Use virtio for the hardware whenever possible</li> <li>Set caching to \"none\" for hard disks on VM's when using raw   volumes or partitions</li> </ul> </li> </ul>"},{"location":"el/sysadmin/#dhcp-and-dns","title":"DHCP and DNS","text":"<p>You'll need to setup a DHCP and DNS server. You have a few choices.</p> <ol> <li>Create two VM's to run DHCP for HA and create FreeIPA servers to    handle DNS (two replicas, doubles as authentication for Linux/UNIX    clients)</li> <li>Create two VM's to run DHCP for HA and create two standalone BIND    servers as master/slave</li> <li>Use your hypervisor to host DHCP and BIND (not recommended)</li> </ol> <p>It would be sensible to do \"1\", if you do \"2\", you at least get more exposure to how zone files are created and the like. For ease of use, we recommend choosing option 1.</p> <p>Also, it is possible to allow cobbler handle DHCP and DNS or integrate directly into DNS such as making changes, but this is outside the scope of this write up.</p> <p>Warning</p> <p>Do NOT run DHCP from the FreeIPA replicas. The FreeIPA servers should have STATIC addresses set.</p> <p>Note</p> <p>When you are setting up DHCP and DNS on separate servers (such as FreeIPA replicas), the DHCP server needs to be configured to tell all the clients the true gateway (this is either a VM in on KVM or a hypervisor of your choice if you are doing straight KVM) and the DNS servers.</p> <p>Setup a VM or your hypervisor as the gateway to the internet.</p> <ol> <li>IP forwarding enabled (/etc/sysctl.conf)</li> <li>NAT enabled (firewalld can help you with this, check out the zones)</li> <li>A virtual interface (hypervisor) or a second interface for your    network (as a VM)</li> </ol> <p>When setting up DHCP and DNS:</p> <ol> <li>Decide on a domain name. This can be a domain you own or one you    make up internally. I personally used one of my four domains for    this lab. RFC expects that internal networks have world routable    domains. This is up to you. Do NOT use '.local' domains</li> <li>Setup DNS forwarders to ensure your VM's can get DNS requests from    the internet. You create a forwarders { } block with each outside    DNS IP listed in BIND or you can optionally set them in the    FreeIPA interface. You can list as many as you want. With a default    configuration of FreeIPA, forwarders are not strictly required. Do    NOT put these extra DNS servers in your dhcpd.conf configuration</li> <li>You need two zones. Forward Zone: This is for your domain, name to    an IP. Reverse Zone: This is for reverse IP lookups, IP to a name.    FreeIPA handles this for you on setup if you state you are handling    a reverse zone and what the subnet is.</li> </ol>"},{"location":"el/sysadmin/#bonus-points","title":"Bonus Points","text":"<ul> <li>Setup Dynamic DNS - This requires an almost specific configuration   between dhcpd and named (bind) or FreeIPA's named.</li> <li>Dynamic DNS needs to be aware of a domain name</li> <li>Use SSSD for the IPA clients to update their DNS automatically   (FreeIPA only) - this may not be required if dhcpd and named are   configured correctly</li> <li>Setup an unbound service running on port 9053 that forwards to   1.1.1.1 for encrypted DNS</li> </ul> <p>From this point forward, you are to ensure each of your VM's that you create have DNS entries. If you have Dynamic DNS running, you will NOT need to do any manual changes. If using FreeIPA, you may not need to make these changes. You can use nsupdate or the ipa equivalent to add additional entries as needed if you are implementing static A records or CNAME records.</p>"},{"location":"el/sysadmin/#server-and-content-management","title":"Server and Content Management","text":"<p>At this point, you'll need to setup Foreman/Katello, Pulp, or Uyuni on a VM. I recommend using Pulp if you want something smaller and simpler. If you want something close to Red Hat Satellite, go through katello. It is a combination of pulp, candlepin, foreman. This recommendation is primarily because of Satellite 6 existing in a large amount of Red Hat shops.</p> <p>Katello, go here.</p> <p>Note</p> <p>Heads up</p> <ul> <li>You're going to be hosting repositories, I SERIOUSLY recommend   creating a VM that has at least 250GB starting and going from there.   Don't try to host Fedora.</li> <li>Katello is resource heavy, you may need to tune it.</li> <li>Pulp may be easier on you, resource wise.</li> </ul>"},{"location":"el/sysadmin/#bonus-points_1","title":"Bonus Points","text":"<ul> <li>Setup errata importation for the Enterprise Linux   Channels/Repositories to properly see Advisories and Information for   package updates if the repos you are importing does not contain them</li> <li>Create custom kickstarts for your systems (this will help you out   later)</li> </ul> <p>Kickstart examples can be found at my github.</p>"},{"location":"el/sysadmin/#connect-content-management-to-hypervisor","title":"Connect Content Management to Hypervisor","text":"<p>Next you will need to connect your Content Management to your hypervisor. View their documentation to get an idea of how it works.</p>"},{"location":"el/sysadmin/#spin-up-vms-using-katellospacewalk-or-pxe-server","title":"Spin Up VM's Using Katello/Spacewalk or PXE Server","text":"<p>You will need to spin up two EL8 or EL9 VM's via Katello or PXE. Do not spin them up using virt-install, virt-manager, or anything else. This will require you to connect Katello to the hypervisor. Ensure they are registered properly to your content management server.</p> <p>If you find the clients aren't registering on Katello, click here.</p> <p>If you find that you do not want to use Katello to perform this task, then you can setup cobbler and work it out from there. I currently do not have a tutorial for this, but there is plenty of documentation online. There are also ansible playbooks you could look at for examples if you wanted to go that route, but it may be time consuming and something to setup at the very end.</p>"},{"location":"el/sysadmin/#setup-freeipa","title":"Setup FreeIPA","text":"<p>Setup FreeIPA with two replicas, using CA and DNS built in configuration. This is recommended if you do not want to setup BIND by hand. FreeIPA also provides authentication to your systems without having to go through the hassle of setting up OpenLDAP by hand nor having Windows AD.</p> <ul> <li>FreeIPA</li> <li>FreeIPA Guide</li> </ul> <p>I recommend against setting up OpenLDAP for the case of UNIX authentication. For anything else, go for it.</p> <p>Once FreeIPA is available, all systems should be using FreeIPA as your DNS servers and they should all be enrolled to your domain.</p>"},{"location":"el/sysadmin/#spin-up-two-vms-for-databases","title":"Spin Up Two VM's for Databases","text":"<p>Create two new VM's from your Content Management or PXE system that are EL9 and install the default postgresql on them.</p> <p>Attempt to install and configure pgpool-II for master-master replication. Note that this may not be default in Enterprise Linux and you can safely skip this.</p>"},{"location":"el/sysadmin/#spin-up-configuration-management","title":"Spin Up Configuration Management","text":"<p>While Katello has some form of ansible built in, it may be better to create a solitary configuration management VM and hook it in. Spin up a VM that is EL9 and install a master for configuration management.</p> <p>It is HIGHLY recommended that you use ansible. Ansible is the supported and recommended system by Red Hat and is utilized in the certification exams for EL9. At some point, you could spin up a docker container for AWX if you wanted, but this is not a strict requirement.</p>"},{"location":"el/sysadmin/#spin-up-vm-for-nfsiscsi","title":"Spin Up VM for NFS/iSCSI","text":"<p>This VM should be EL9. Ensure it has an extra 20GB disk attached to it. Install the following:</p> <ol> <li>An NFS server (nfs-utils)</li> <li>An iSCSI server (scsi-target-utils, targetcli)</li> </ol> <p>You are to:</p> <ol> <li>Export an NFS directory</li> <li>Export a LUN to any server</li> </ol> <p>iSCSI for RHEL 9</p>"},{"location":"el/sysadmin/#deploy-bacula-server","title":"Deploy Bacula Server","text":"<p>Bacula is a backup service. It is actually confusing to setup. It's not easy. There are plenty of write-ups for bacula and RHEL/Enterprise Linux. The digital ocean write-ups are complete, but do NOT give you everything you need to know to do it \"correct\" or to succeed completing this portion.</p> <p>Your server will need the following:</p> <ol> <li>Ensure the system has a large disk or a large second disk (this can    be any size, start small though) - You can also use your NFS server    or iSCSI's LUN.</li> <li>Ensure it is partitioned for ext4</li> <li>Ensure it is mounted to /bacula</li> <li>If using iSCSI or NFS, ensure the disk from that server is bigger    than 20GB. 50 should suffice.</li> <li>Bakula will need to be configured to use postgresql (digital ocean    does NOT use postgresql, you will need to do some reading)</li> <li>Register each machine you have to it, storing to flatfile</li> </ol>"},{"location":"el/sysadmin/#deploy-twofour-vms","title":"Deploy Two/Four VM's","text":"<ol> <li>First one/two will be web servers running apache (httpd)</li> <li>Next one/two will be app servers</li> </ol> <p>This is a typical \"web/app\" configuration. Some shops use apache frontends to weblogic backends. Sometimes it's tomcat backends. Some shops opt for other methods and software too.</p> <p>If wish to setup Wildfly and host a wiki, you will need to do the following:</p> <ol> <li>Setup Wildfly Wiki or on your app servers</li> <li>Setup apache to forward requests to your tomcat servers for the wiki</li> <li>Do this as a VirtualHost configuration with the ServerName as    \"wiki.domain.tld\", replacing \"domain.tld\" with your domain</li> <li>Set a ServerAlias as wiki</li> </ol> <p>If you wish to setup a Git</p>"},{"location":"el/sysadmin/#deploy-load-balancer-vm","title":"Deploy Load Balancer VM","text":"<p>This will be considered a \"VIP\" of sorts for your wiki and other applications. This VM can either use iptables round-robin or HAProxy. I highly recommend trying both to see what's easier for you. HAProxy is recommended, because it's an actual load balancer application.</p> <p>You will need the following:</p> <ol> <li>A DNS CNAME for this machine called \"wiki.domain.tld\", replacing    domain.tld with your domain</li> <li>You will need to configure apache to respond to requests for    \"wiki.domain.tld\" (virtual host configuration) and forward them on    to the app servers</li> <li>HAProxy will need to forward 80 and 443 requests to the two web    servers</li> </ol> <p>Warning</p> <p>Dynamic DNS</p> <p>If you are using Dynamic DNS, you may need to run rndc sync before making changes in the case of standalone BIND. You will want to use the nsupdate command to make changes to your Dynamic Zones. If you are using FreeIPA DNS this is not required.</p>"},{"location":"el/sysadmin/#deploy-postfix-vm","title":"Deploy Postfix VM","text":"<p>You will need to do the following:</p> <ol> <li>Ensure postfix is listening on all interfaces</li> <li>Ensure postfix is setup to send and receive messages only from your    internal network</li> <li>Setup a gmail account or another relay to allow the above to work to    outside mail (this is sort of tricky for gmail, but doable)</li> </ol>"},{"location":"el/sysadmin/#bonus-points_2","title":"Bonus Points","text":"<ul> <li>Create two relays as \"mailhost1\" and \"mailhost2\" for your domain   with the same configurations</li> <li> <p>Create a CNAME for \"mailhost.domain.tld\" for your load balancer,   forwarding port 25 to both servers</p> <ul> <li>Optionally, you can use round-robin DNS instead of HAProxy</li> </ul> </li> </ul>"},{"location":"el/sysadmin/#setup-nagios-vm","title":"Setup Nagios VM","text":"<p>This will be a monitoring server on EL9. You will need to set it up to use snmp to monitor the communication state of every service above. This means:</p> <ol> <li>Is the right port open?</li> <li>I got the right kind of response.</li> <li>Filesystem Space, too full?</li> </ol> <p>If you are planning to use full on SNMP, all servers will need the appropriate SNMP ports open and they will need the snmpd clients installed (with a monitor snmpd account)</p>"},{"location":"el/sysadmin/#setup-syslog-vm","title":"Setup Syslog VM","text":"<p>Setup this server as a syslog server. It can be EL8 or higher. Ensure that it is listening on port 514 UDP and TCP in the configuration and that those ports are open.</p> <p>You will need to go to your servers and setup /etc/rsyslog.conf to send ALL logs to this syslog server</p> <p>Optionally, setup an all inclusive logging solution, like graylog, elastic search, mongodb, fluentd. The sky is the limit here!</p>"},{"location":"el/sysadmin/#document-your-work","title":"Document Your Work","text":"<p>On your new wiki, document everything you did, right now, on your new wiki.</p>"},{"location":"el/sysadmin/#rpm-build-server","title":"RPM Build Server","text":"<p>For fun, you can setup a new server that is your designated RPM building machine. You will need to install mock to do this. Optionally, you can setup koji, bodhi, the things that the Fedora project uses. This is not for the faint of heart.</p>"},{"location":"el/sysadmin/#git-server","title":"Git Server","text":"<p>Also for fun, you can setup a git server. There are many options out there. A popular opensource one is Gitea.</p>"},{"location":"el/sysadmin/#ansible","title":"Ansible","text":"<p>Consider setting up ansible and the open source tower. Automate everything via ansible.</p>"},{"location":"el/unbound/","title":"Unbound","text":""},{"location":"el/unbound/#requirements","title":"Requirements","text":""},{"location":"el/unbound/#setup","title":"Setup","text":""},{"location":"el/unbound/#installation","title":"Installation","text":"<pre><code>% yum install unbound -y\n% systemctl enable unbound\n</code></pre>"},{"location":"el/unbound/#dns-over-tls-dot","title":"DNS over TLS (DoT)","text":"<p>Setting up DoT with unbound is straight forward, whether you already have a DNS server already or not. Let's go over the most basic configuration.</p> <pre><code>% vi /etc/unbound/unbound.conf\nserver:\n        . . .\n        # Set the below to an IP address if you wish - as I have multiple VLAN's\n        # it is just easier for me to listen everywhere\n        interface: 0.0.0.0\n        interface: ::\n        # Optionally set a port - I have bind already running, so port 9053 works\n        interface-automatic: no\n        port: 9053\n        . . .\n        # Set access control rules here. I'll show a few examples with just two of\n        # my networks\n        # REFUSE everything\n        access-control: 0.0.0.0/0 refuse\n        access-control: ::0/0 refuse\n        # Allow localhost to snoop\n        access-control: 127.0.0.1/32 allow_snoop\n        access-control: ::1 allow_snoop\n        # Allow the entire localhost subnet\n        access-control: 127.0.0.0/8 allow\n        access-control: ::ffff:127.0.0.1 allow\n        # Allow my main network and sandbox network\n        access-control: 10.100.0.0/24 allow\n        access-control: 10.100.1.0/24 allow\n        . . .\n        # Ensure tls-cert-bundle is set\n        tls-cert-bundle: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem\n        . . .\n# Create the forward zone for DoT queries\nforward-zone:\n        name: \".\"\n        forward-tls-upstream: yes\n        # Cloudflare\n        forward-addr: 1.1.1.1@853#cloudflare-dns.com\n        forward-addr: 1.0.0.1@853#cloudflare-dns.com\n        forward-addr: 2606:4700:4700::1111@853#cloudflare-dns.com\n        forward-addr: 2606:4700:4700::1001@853#cloudflare-dns.com\n        # Quad9\n        forward-addr: 9.9.9.9@853#dns.quad9.net\n        forward-addr: 149.112.112.112@853#dns.quad9.net\n\n% systemctl enable unbound --now\n# If you are using bind already with forwarders, you should edit it. Example.\n% vi /etc/named.conf\noptions {\n        . . .\n        forwarders {\n                # This assumes your bind server and unbound server are on\n                # the same server like I did.\n                127.0.0.1 port 9053;\n        };\n        forward only;\n        . . .\n</code></pre>"},{"location":"misc/euphemism/","title":"The Euphemism Review","text":"<p>Warning</p> <p>This is a humorous article by contributor Louis Abel. The following content does not necessarily represent the viewpoints or opinions held by other authors on this website.</p> <p>Welcome to the ported edition of the \"The Euphemism Review\" the journal for imprecise speech in the corporate environment.</p>"},{"location":"misc/euphemism/#please-dont-say-timeframe","title":"Please don't say \"timeframe\"","text":"<p>The Eskimos have over a hundred words for what we simply call... \"snow\". The reason is that snow is important to them. It is vital to know if the snow is the kind that can be walked on without sinking, the kind that a sled runs on easily, the kind that igloos can be built from, and so on. If you ask a Eskimo for a bucket of \"snow\" they will have no idea what you are talking about and will, without a doubt, consider you to be an ignorant savage.</p> <p>Here in modern western society we have many words that relate to time, this is because time is important to us. Whether that is a blessing or a curse is is debatable, but it's normally the latter. We need to know when things will happen and how long they will take. Some of these words are:</p> <ul> <li>Schedule</li> <li>Calendar</li> <li>Frequency, or \"how often\"</li> <li>Daily</li> <li>Monthly</li> <li>Yearly</li> <li>Deadline</li> <li>Time</li> <li>Period</li> <li>Periodically</li> </ul> <p>Not only is \"timeframe\" not a word, you certainly can't use it in place of all of the above and expect to be understood even by a fluent speaker. And yes, we know that Microsoft Word seems to accept it as a word, but given their reputation... Don't be fooled.</p> <p>Below, here's a handy dandy table you can use to practice.</p> Instead of... Use.. It has to be done in the June 1st timeframe. The deadline is June 1st What timeframe do you need that by. When do you need it. Let's figure the timeframes for that. Let's make a schedule. What timeframe did that happen in? When did that happen? Can we do that in the timeframe? Can we do that in time? What's going on in your October timeframe? What's on your calendar in October? Group them by timeframe. What? <p>Look how clear and understandable it is. It's also shorter. Who would've thought.</p>"},{"location":"misc/ipv6he/","title":"Hurricane Electric IPv6 Tunnel","text":"<p>On distributions that use Network Manager, you can setup an IPv6 tunnel with Hurricane Electric. Make sure you have done the following.</p> <ol> <li>Create an account at Hurricane Electric</li> <li>Click \"Create Regular Tunnel\" on the left hand side</li> <li>Enter your IPv4 public IP address in the first box</li> <li>Choose the closest tunnel server to you (in my case, it's Phoenix) - Note the IP Address (eg. 66.220.7.82)</li> <li>Click \"create tunnel\"</li> <li>Note all the information in your \"tunnel details\"</li> </ol> <pre><code>% nmcli con add type ip-tunnel \\\n  # Name of the interface\n  ifname sit0 \\\n  # Tunnel protocol with the endpoint\n  mode sit remote 66.220.7.82 -- \\\n  # Disabling IPv4 on this interface\n  ipv4.method disabled \\\n  # Manual IPv6 configuration\n  ipv6.method manual \\\n  # IPv6 endpoint addresses (not your subnet)\n  ipv6.address 2001:470:1f18:96::2/64 \\\n  ipv6.gateway 2001:470:1f18:96::1/64\n</code></pre> <p>You will also need to open some parts of your firewall to allow communication. In particular, ICMP (at least type 8) should be allowed from the tunnel server for the heartbeat.</p> <p>After this, you should be able to assign addresses from your routed /64 on your current machine or machines in your network and be able to ping out. You can also create a /48 and make multiple /64's if you wish.</p> <p>It is possible to update the tunnel automatically with your IPv4 address in the event it changes.</p> <pre><code>% vi /etc/NetworkManager/dispatcher.d/pre-up.d/00-tunnelfix.sh\n#!/bin/sh\nuser=USERNAME\npass=PASSWORD\ntunnel=TUNNEL_ID\n\nif [ \"$1\" = sit0 ]; then\n  wget -O /dev/null https://$user:$pass@ipv4.tunnelbroker.net/ipv4_end.php?tid=$tunnel\nfi\n</code></pre>"},{"location":"misc/mingw/","title":"MinGW","text":"<p>Original author: Tommy Nguyen</p> <p>To my knowledge, the best MinGW distribution is provided by Stephan T. Lavavej (a Microsoft employee who works on the C++ team) and is available on his site. It contains mingw-w64, GCC and binutils, coreutils and several other libraries and command line utilities (including git). Installation simply requires extracting to any location and using the provided bat files to open a command prompt with a preset PATH.</p>"},{"location":"misc/mingw/#why-not-use-wsl","title":"Why not use WSL?","text":"<p>They serve different purposes. The MinGW distribution contains Windows ports of GCC, coreutils, etc. that run natively on Windows. On the other hand, WSL attempts to allow you to run native Linux binaries on Windows. WSL2 supposedly uses Hyper-V for virtualization.</p>"},{"location":"misc/port465/","title":"Is port 465 deprecated?","text":"<p>Original author: Tommy Nguyen</p> <p>Last modified: Mon Aug 1 17:02</p> <p>Note</p> <p>For a guide on how to setup Exim4 with Gmail and implicit TLS, see How To Secure A Linux Server.</p> <p>No.\u00a0Some sources like Debian's guide on Gmail and Exim4 and the StackOverflow question What is the difference between ports 465 and 587? claim that port 465 is deprecated. RFC 8314 entitled Cleartext Considered Obsolete: Use of Transport Layer Security (TLS) for Email Submission and Access recommends that you use port 465 with implicit TLS instead of STARTTLS on port 587:</p> <p>In brief, this memo now recommends that:</p> <ul> <li>TLS version 1.2 or greater be used for all traffic between MUAs and     Mail Submission Servers, and also between MUAs and Mail Access     Servers.</li> <li>MUAs and Mail Service Providers (MSPs) (a) discourage the use of     cleartext protocols for mail access and mail submission and     (b) deprecate the use of cleartext protocols for these purposes as     soon as practicable.</li> <li>Connections to Mail Submission Servers and Mail Access Servers be     made using \"Implicit TLS\" (as defined below), in preference to     connecting to the \"cleartext\" port and negotiating TLS using the     STARTTLS command or a similar command.</li> </ul> <p>More specifically:</p> <p>The STARTTLS mechanism on port 587 is relatively widely deployed due to the situation with port 465 (discussed in Section 7.3). This differs from IMAP and POP services where Implicit TLS is more widely deployed on servers than STARTTLS. It is desirable to migrate core protocols used by MUA software to Implicit TLS over time, for consistency as well as for the additional reasons discussed in Appendix A.</p> <p>However, some have conflated SMTPS with implicit TLS on port 465, which is not the same thing. In particular, section 7.3 of RFC 8314 explains that SMTPS was briefly assigned to port 465 and subsequently revoked:</p> <p>... Unfortunately, some widely deployed mail software interpreted \"smtps\" as \"submissions\" [RFC6409] and used that port for email submission by default when an end user requested security during account setup.</p> <p>... Although STARTTLS on port 587 has been deployed, it has not replaced the deployed use of Implicit TLS submission on port 465.</p> <p>To reiterate, \"Implicit TLS submission\" which is defined in section 3 is not the same as SMTPS and you should use port 465 over port 587 if possible. Another point of confusion is the use of SSL on port 465. As a result, you\\'ll find many resources on the Internet claiming not to use port 465. It is true that you should prefer TLS over SSL, but port 465 is not deprecated.</p> <p>Note</p> <p>The RFC also states:</p> <p>Note that there is no significant difference between the security properties of STARTTLS on port 587 and Implicit TLS on port 465 if the implementations are correct and if both the client and the server are configured to require successful negotiation of TLS prior to Message Submission.</p> <p>The key phrase here being \"require successful negotation\". If STARTTLS is not configured this way, then it is less secure than Implicit TLS.</p>"},{"location":"training/ex362/","title":"EX362 Exam Prep","text":"<p>This page contains the necessary resources to help you prepare for the Red Hat Certified Specialist in Identity Management exam, EX362. This follows the youtube playlist as much as possible with various examples and ideas. Soon to come, you will also find our own example practice exam for you to try your hand at to test your knowledge.</p> <p>The list of objectives can be found here. Note that the exam objectives can change at any time. It is the responsibility of the reader to always review the objectives prior to studying and taking the exam to ensure success.</p> <p>Affiliation and Exam Information</p> <p>Please note that we are not affiliated with Red Hat. The materials and examples used are our own and do not reflect the training programs provided by Red Hat and are educational only. We do not disclose any of the tasks, questions, or material on the exam as it would violate the NDA. Any questions sent to us about anything directly related to the exam will not be answered. We also do not provide any one-on-one tutoring or online teaching courses.</p> <p>If exam objectives have changed to where the videos and this material are missing information, we can add on at any time upon request. If exam objectives have not changed but operational tasks have, we will note them as we find them. If there are things about FreeIPA that you'd like to see in the videos that may fit into objective, we can add it also upon request. However, it is likely those extra things would be better suited in the separate FreeIPA section on this site.</p>"},{"location":"training/ex362/#overview","title":"Overview","text":"<p>This series goes over setting up FreeIPA in a lab/VM environment by following the objectives as outlined by Red Hat. The list of objectives can be found here.</p> <p>Multi-method</p> <p>Throughout this material, you will see a combination of both \"Script or CLI\" and \"Ansible\" methods of working with FreeIPA (or Red Hat IdM), in selectable tabs. This is because we believe in the user understanding and knowing how to do things by hand first and foremost before ever automating it. Automation cannot be fully achieved without having an understanding of the underlying software and applications.</p> <p>In conclusion, we highly recommend that any user studying for their exam reading this guide understands how to do everything by hand first before attempting to redo it via ansible.</p>"},{"location":"training/ex362/#exam-information","title":"Exam Information","text":"<p>The EX362 exam tests your knowledge in a real world format style test - Meaning just like any Red Hat exam, it is performance-based and you perform tasks as if you were on the job. You are evaluated on the tasks you perform and if they meet the objective criteria. The EX362 is related to FreeIPA or Red Hat Identity Management and counts toward the RHCA (Red Hat Certified Architect). You are expected to have familiarity with ansible for this exam. As such, ansible setup and explanation will be limited.</p> <p>To take the exam, you must have at least an RHCSA. If you are attempting to become a Red Hat Certified Architect, you must have an RHCE.</p>"},{"location":"training/ex362/#ansible-information","title":"Ansible Information","text":"<p>As ansible is expected for this exam, you may be required to work with ansible collections to work with FreeIPA. The community version of the collection is simply <code>freeipa.ansible_freeipa</code>. This can be installed via <code>ansible-galaxy</code> or via <code>dnf install ansible-freeipa</code>. You will find that the Red Hat official collection name has a different name entirely.</p> <p>Throughout this page, we will be using the <code>ansible-galaxy</code> version of the collection, which ensure we are using a FQCN. This is because if you are using Ansible Automation Platform (or AWX), you will need to use the FQCN in just about all cases.</p> <p>Note</p> <p>As ansible is a fairly new addition to this exam and to this study guide, there may be inaccuracies. We highly encourage PR's or comments that address problems with the ansible data we provide here.</p>"},{"location":"training/ex362/#resources","title":"Resources","text":"<ul> <li>FreeIPA</li> <li>FreeIPA Ansible Collection</li> <li>Red Hat Documentation</li> <li>Trust Anatomy/SSSD Troubleshooting</li> <li>Directory Server Tuning</li> <li>FreeIPA Workshop Curriculum</li> <li>Ansible Documentation</li> <li>Our Page</li> </ul>"},{"location":"training/ex362/#hardware-recommendations","title":"Hardware Recommendations","text":"<p>The minimum requirements for IdM are fairly low. 2GB of RAM, 1 core, and a 10GB disk. However, we believe that's too low, especially if we plan on scaling out. And during upgrades, you would need at least 4GB of RAM for the operations to be successful. Below are our minimum recommendations:</p> <ul> <li>2 (virtual) CPU Core</li> <li>4 GB of RAM</li> <li>10GB+ disk or partition for /var/lib/dirsrv</li> </ul> <p>Per the Red Hat documentation, consider that with at least 10k users and 100 groups, you would need at least 3GB of RAM and 1GB swap. If you end up having 100k users and 50k groups, then 16GB of RAM and 4GB of swap is recommended. In fact, in larger deployments, it's more effective to increase RAM than disk, as most data is stored in cache.</p> <p>View the resources above in the previous section for directory server tuning information.</p>"},{"location":"training/ex362/#expected-lab-systems","title":"Expected lab systems","text":"<p>Below is a list of expected lab systems to perform the work on this page.</p> System Name IP Address Role idm1.example.com 192.168.15.2 IdM Server idm2.example.com 192.168.15.3 IdM Server client.example.com 192.168.15.10 IdM Client nfs.example.com 192.168.15.11 NFS Server utility.example.com 192.168.15.12 Utility Server ansible.example.com 192.168.15.50 Ansible controller <p>You may want to consider setting up an NTP server, if you do not wish to use the default from chrony. This can be done on the utility server. See Setup an NTP Server.</p>"},{"location":"training/ex362/#setup-ansible-controller-and-clients","title":"Setup Ansible Controller and Clients","text":"<p>As the exam may expect familiarity with ansible, setting up an ansible controller may be ideal.</p> <p>Note</p> <p>We still recommend basic familiarity with FreeIPA itself as it is ideal for understanding the entire stack. Learning by hand is important first before attempting to automate.</p>"},{"location":"training/ex362/#controller-setup","title":"Controller Setup","text":"<pre><code># as root, install the necessary packages and create the user\n% dnf install ansible -y\n% useradd ansible\n\n# ensure ansible can do root things locally.\n% visudo -f /etc/sudoers.d/ansible\nansible ALL=(ALL) NOPASSWD: ALL\n</code></pre> <p>Become the ansible user, and finish the general configuration.</p> <pre><code>% ssh-keygen\n% ansible-config init --disabled &gt; ansible.cfg\n</code></pre> <p>Configure <code>ansible.cfg</code> in any way you see fit. We recommend these settings at a minimum.</p> <pre><code>[defaults]\nroles_path    = roles:/usr/share/ansible/roles\ncollections_paths = collections:/usr/share/ansible/collections\nremote_user = ansible\n; id_rsa is the default generated key. you can use any format.\nprivate_key_file = /home/ansible/.ssh/id_rsa\nansible_managed = EX362 Study\n\n[inventory]\nenable_plugins = host_list, virtualbox, yaml, constructed, script, ini, auto\n</code></pre> <p>Configure the base inventory. For the inventory, you should ensure all lab systems are listed.</p> <pre><code>[ipa:children]\nipaserver\nipareplicas\nipaclients\n\n[ipa:vars]\n\n[ipaserver:vars]\n\n[ipareplica:vars]\n\n[ipaclients:vars]\n\n[ipaserver]\nidm1.example.com    ansible_host=192.168.15.2\n\n[ipareplica]\nidm2.example.com    ansible_host=192.168.15.2\n\n[ipaclients]\nansible.example.com ansible_connection=local\nclient.example.com  ansible_host=192.168.15.10\nnfs.example.com     ansible_host=192.168.15.11\nutility.example.com ansible_host=192.168.15.12\n</code></pre> <p>Install the required collections.</p> <pre><code>% ansible-galaxy collection install freeipa.ansible_freeipa\n\n# if you plan on managing network manager using ansible, use this collection.\n% ansible-galaxy collection install community.general\n\n# if you plan on managing firewalld and other features, use this collection.\n% ansible-galaxy collection install ansible.posix\n</code></pre> <p>At this point, you will need to configure all the clients with an ansible user and the public key. See the ansible documentation for more details.</p>"},{"location":"training/ex362/#install-and-configure-red-hat-identity-management-idm","title":"Install and configure Red Hat Identity Management (IdM)","text":""},{"location":"training/ex362/#install-idm-using-either-scripts-or-using-ansible-automation-platform","title":"Install IdM using either scripts or using Ansible Automation Platform","text":"System Name IP Address idm1.example.com 192.168.15.2 idm2.example.com 192.168.15.3 ansible.example.com 192.168.15.50 <p>Domain/Realm Information</p> <p>The domain/realm for this will be <code>example.com</code></p> <p>Static Addresses</p> <p>IPA Servers should either have a DHCP reservation or a static address. In the event that you have either, DNS should always be pointing at 127.0.0.1, especially if your replica serves DNS. Both of our replicas serve DNS, so loopback is sufficient and recommended for our name server.</p> <p>In later versions of FreeIPA, there is support to force network manager to ensure resolv.conf is loopback without the need to set it by hand with nmcli.</p> Script or CLIAnsible <pre><code>% hostnamectl set-hostname idm1.example.com\n# Set a static address - It's important for your IdM servers\n# to have static addresses or a DHCP reservation.\n% nmcli con mod eth0 ipv4.address 192.168.15.2/24\n% nmcli con mod eth0 ipv4.gateway 192.168.15.1\n% nmcli con mod eth0 ipv4.method manual\n% nmcli con mod eth0 ipv4.dns-search example.com\n\n# You should set this if your replica serves DNS! If not, set it to\n# one or more of your IdM replicas that do.\n% nmcli con mod eth0 ipv4.dns 127.0.0.1\n% nmcli con up eth0\n</code></pre> <pre><code># Examples of using ipa-server-install\n# RHEL 9\n% dnf install ipa-server ipa-server-dns ipa-client sssd sssd-ipa\n# Installation, interactive, does not setup specific components\n% ipa-server-install\n\n# Installation, mostly automatic (recommended)\n# This will setup DNS and the necessary pieces for an AD trust\n# Optionally, you can set --setup-adtrust use the --netbios-name switch\n# to set your forest netbios name\n% ipa-server-install --domain example.com --realm EXAMPLE.COM \\\n    --reverse-zone=15.168.192.in-addr.arpa. \\\n    --no-forwarders \\\n    --no-ntp \\\n    --setup-dns \\\n    -p Passw0rd! \\\n    -a Passw0rd!\n\n# Same as the above, but sets NTP server to sync to before starting\n# the installation.\n% ipa-server-install --domain example.com --realm EXAMPLE.COM \\\n    --reverse-zone=15.168.192.in-addr.arpa. \\\n    --no-forwarders \\\n    --ntp-server=192.168.15.12 \\\n    --setup-dns \\\n    -p Passw0rd! \\\n    -a Passw0rd!\n</code></pre> <pre><code>% firewall-cmd --permanent --add-service={freeipa-4,dns}\n</code></pre> <pre><code>% kinit admin\n# We need to make sure that any A records get a corresponding PTR record, otherwise you're making them manually.\n% ipa dnsconfig-mod --allow-sync-ptr=True\n</code></pre> <p>Ensure that your ansible controller is setup and install the collections as needed.</p> <p>Ensure ansible is operable on all machines</p> <p>It is recommended that on all machines in this lab, you are configuring ansible as a user with full sudo rights.</p> <p>Static Addressing, command vs collection</p> <p>Earlier, it was suggested to install community.general as it provides an nmcli module. We will be using this. It should be noted that you may not have access to that collection on the exam.</p> <p>We also suggested ansible.posix. You may not also have access to this on the exam.</p> <p>Modify the inventory with the necessary variables and domain information.</p> <pre><code>[ipa:children]\nipaserver\nipareplicas\nipaclients\n\n; Based on exam requirements, these vars might have to be set differently\n[ipa:vars]\n; if you are using an ntp server, set to false and  set ipaclient_ntp_servers\n; ipaclient_no_ntp=false\n; ipaclient_ntp_servers='[\"192.168.15.12\"]'\nipaclient_no_ntp=true\n; we plan on setting up roaming home directories. setting this\n; to true shouldn't hurt.\nipaclient_mkhomedir=true\nipaclient_ssh_trust_dns=true\n\n[ipaserver:vars]\nipaadmin_principal=admin\nipaadmin_password='Passw0rd!'\nipadm_password='Passw0rd!'\n\nipaserver_domain=example.com\nipaserver_realm=EXAMPLE.COM\nipaserver_setup_dns=true\nipaserver_setup_kra=true\nipaserver_setup_firewalld=true\nipaserver_no_forwarders=true\nipaserver_auto_forwarders=false\nipaserver_no_host_dns=true\nipaserver_reverse_zones='[\"15.168.192.in-addr.arpa.\"]'\nipaserver_external_ca=false\n; ipaserver_setup_adtrust=true\n; ipaserver_netbios_name=EXAMPLEAD\n\n[ipareplica:vars]\nipaadmin_principal=admin\nipaadmin_password='Passw0rd!'\nipadm_password='Passw0rd!'\n\nipaserver_realm=EXAMPLE.COM\nipareplica_domain=example.com\nipareplica_setup_ca=true\nipareplica_setup_dns=true\nipareplica_setup_kra=true\nipareplica_setup_firewalld=true\nipareplica_no_forwarders=true\nipareplica_auto_forwarders=false\n; ipareplica_setup_adtrust=true\n; ipareplica_netbios_name=EXAMPLEAD\n\n[ipaclients:vars]\nipaclient_domain=example.com\nipaclient_realm=EXAMPLE.COM\n; the reason why we have a separate principal and password\n; is because we may have a service account that enrolls instead\nipaadmin_principal=admin\nipaadmin_password='Passw0rd!'\n\n[ipaserver]\nidm1.example.com    ansible_host=192.168.15.2\n\n[ipareplica]\nidm2.example.com    ansible_host=192.168.15.2\n\n[ipaclients]\nansible.example.com ansible_connection=local\nclient.example.com  ansible_host=192.168.15.10\nnfs.example.com     ansible_host=192.168.15.11\nutility.example.com ansible_host=192.168.15.12\n</code></pre> <p>Create the role.</p> <pre><code>% vi role_ipa_server.yml\n---\n- name: \"Standup IPA Server\"\n  hosts: ipaserver\n  become: true\n\n  pre_tasks:\n    # ensure hostname is what is expected\n    - name: \"Set hostname\"\n      ansible.builtin.hostname:\n        name: idm1.example.com\n        use: systemd\n\n    # This sets up network manager using community.general.\n    - name: \"Set static address\"\n      community.general.nmcli:\n        ifname: enp1s0\n        conn_name: enp1s0\n        type: ethernet\n        method4: manual\n        ip4:\n          - 192.168.15.2/24\n        gw4: 192.168.15.1\n        dns4_search: example.com\n        dns4: 127.0.0.1\n        autoconnect: true\n        state: present\n\n  roles:\n    - role: freeipa.ansible_freeipa.ipaserver\n      state: present\n\n  post_tasks:\n    # We need to ensure firewalld was setup the way we wanted it to\n    - name: \"Ensure firewalld rules are accurate\"\n      ansible.posix.firewalld:\n        service: \"{{ item }}\"\n        permanent: true\n        immediate: true\n        state: enabled\n      with_items:\n        - \"freeipa-4\"\n        - \"dns\"\n\n    # We need to make sure that any A records get a PTR record.\n    - name: \"Ensure PTR is in sync\"\n      freeipa.ansible_freeipa.ipadnsconfig:\n        ipaadmin_principal: \"{{ ipaadmin_principal }}\"\n        ipaadmin_password: \"{{ ipaadmin_password }}\"\n        allow_sync_ptr: true\n</code></pre> <p>Run the role to setup the server.</p> <pre><code>% ansible-playbook role_ipa_server.yml\n</code></pre>"},{"location":"training/ex362/#install-and-configure-a-replica-idm-server","title":"Install and configure a replica IdM Server","text":"Script or CLIAnsible <pre><code>% hostnamectl set-hostname idm2.example.com\n% nmcli con mod eth0 ipv4.address 192.168.15.3/24\n% nmcli con mod eth0 ipv4.gateway 192.168.15.1\n% nmcli con mod eth0 ipv4.method manual\n% nmcli con mod eth0 ipv4.dns-search example.com\n% nmcli con mod eth0 ipv4.dns 192.168.15.2\n% nmcli con up eth0\n</code></pre> <pre><code># Adding a replica, optionally change --no-ntp to --ntp-server\n% ipa-replica-install --setup-dns \\\n    --setup-ca \\\n    --no-forwarders \\\n    --no-ntp\n\n# Adding a replica unattended without forwarders.\n# Optionally set --ntp-server.\n% ipa-client-install --realm EXAMPLE.COM --no-ntp\n% kinit admin\n% ipa hostgroup-add-member --hosts=ipa02.example.com ipaservers\n% ipa-replica-install --setup-dns \\\n    --setup-ca \\\n    --no-forwarders \\\n    --no-ntp \\\n    --unattended\n</code></pre> <pre><code>% vi role_ipa_replica.yml\n---\n- name: \"Standup IPA Replica\"\n  hosts: ipareplicas\n  become: true\n\n  pre_tasks:\n    # ensure hostname is what is expected\n    - name: \"Set hostname\"\n      ansible.builtin.hostname:\n        name: idm2.example.com\n        use: systemd\n\n    # This sets up network manager using community.general.\n    - name: \"Set static address\"\n      community.general.nmcli:\n        ifname: enp1s0\n        conn_name: enp1s0\n        type: ethernet\n        method4: manual\n        ip4:\n          - 192.168.15.3/24\n        gw4: 192.168.15.1\n        dns4_search: example.com\n        dns4: 192.168.15.2\n        autoconnect: true\n        state: present\n\n    - name: \"Ensure firewalld rules are accurate\"\n      ansible.posix.firewalld:\n        service: \"{{ item }}\"\n        permanent: true\n        immediate: true\n        state: enabled\n      with_items:\n        - \"freeipa-4\"\n        - \"dns\"\n\n  roles:\n    - role: freeipa.ansible_freeipa.ipareplica\n      state: present\n</code></pre> <p>Run the role to setup the replica.</p> <pre><code>% ansible-playbook role_ipa_replica.yml\n</code></pre>"},{"location":"training/ex362/#create-users-groups-and-policies","title":"Create Users, Groups, and Policies","text":"Users Login Name Type Group Role UID/GID John Smith jsmith Normal admins Auto Bob Rufus brufus Normal corp Auto Larry Dufus ldufus Normal helpdesk Auto Robert Cole rcole Staged Auto Thomas Snyder tsnyder Preserved Auto SysHost Management syshostmgt Normal Host Manager 10000 Groups Policy HelpDesk helpdesk corp enrollers Enrollment Administrator Roles Privilege Host Manager Host administrators Host group administrators Netgroups administrators Host enrollment Script or CLIAnsible <p>Custom UID/GID</p> <p>It is possible to create the users with a custom uid/gid with the switches --uid and --gidnumber which you will see below. It is also possible to set random passwords with --random.</p> <p>See ipa user-add --help for more switches.</p> <p>Password Expiration</p> <p>When you make a user with the --password switch or use ipa passwd to set a password, it is automatically expired and must be changed on next login. If you want to avoid this from happening, you will need to set a random password via --password or --random, and then use kpasswd username to change it to the desired password. This does not make the account non-expiring.</p> <pre><code># Creating users with a password, create all the accounts from the table (except from syshost)\n% ipa user-add --first=\"John\" --last=\"Smith\" --password jsmith\n\n# Create the system account with a password of Sup3R$ecre7! and a UID of 10000\n% ipa user-add --first=\"SysHost\" --last=\"Management\" --uid=10000 --gidnumber=10000 --password syshostmgt\n\n# Stage a user\n% ipa stageuser-add --first=\"Robert\" --last=\"Cole\" rcole\n\n# Preserve a user\n% ipa user-del tsynder --preserve\n\n# Create a regular (POSIX) group\n% ipa group-add corp\n\n# Create a member only group\n% ipa group-add --nonposix HelpDesk\n% ipa group-add --nonposix enrollers\n\n# Add the HelpDesk group to the helpdesk policy\n# Add the enrollers group to the Enrollment Administrator role\n% ipa role-add-member \"helpdesk\" --groups=HelpDesk\n% ipa role-add-member \"Enrollment Administrator\" --groups=enrollers\n\n# Create a role with privileges\n% ipa role-add \"Host Manager\"\n% ipa role-add-privilege \"Host Manager\" \\\n    --privileges=\"Host administrators\" \\\n    --privileges=\"Host group administrators\" \\\n    --privileges=\"Netgroups administrators\" \\\n    --privileges=\"Host enrollment\"\n\n# Add the syshostmgt user as a member of the role\n% ipa role-add-member \"Host Manager\" --users=\"syshostmgt\"\n\n# Set our user passwords to CentOS123!$ so that way we don't have to change them later\n% kpasswd jsmith\n\n# If we already set the password we want but we don't want it to expire without making a policy or prompt for a password change (NOT RECOMMENDED)\n% ldapmodify -x -w 'Passw0rd!' -D 'cn=Directory Manager'\ndn: uid=syshostmgt,cn=users,cn=accounts,dc=example,dc=com\nchangetype: modify\ndelete: krbLastPwdChange\n\n(Press CTRL+D)\n</code></pre> <pre><code>% vi create_ipa_users.yml\n</code></pre> <pre><code>---\n- name: \"Create users\"\n  hosts: ipaserver\n  become: false\n  vars:\n    # All users are setup as a dictionary\n    users:\n      - name: jsmith\n        first: John\n        last: Smith\n        password: \"CentOS123!$\"\n      - name: brufus\n        first: Bob\n        last: Rufus\n        password: \"CentOS123!$\"\n      - name: ldufus\n        first: Larry\n        last: Dufus\n        password: \"CentOS123!$\"\n      - name: syshostmgt\n        first: SysHost\n        last: Management\n        uid: 10000\n        gid: 10000\n        password: \"CentOS123!$\"\n      - name: tsnyder\n        first: Thomas\n        last: Snyder\n        password: \"CentOS123!$\"\n    staged_users:\n      - name: rcole\n        first: Robert\n        last: Cole\n    preserved_users:\n      - tsnyder\n\n  tasks:\n    - name: Create all users\n      freeipa.ansible_freeipa.ipauser:\n        ipaadmin_password: \"{{ ipaadmin_password }}\"\n        users: \"{{ users }}\"\n\n    - name: Preserve users\n      freeipa.ansible_freeipa.ipauser:\n        ipaadmin_password: \"{{ ipaadmin_password }}\"\n        name: \"{{ item }}\"\n        state: absent\n        preserve: true\n\n    # The current freeipa collection doesn't support staged users\n    - name: kinit as admin\n      ansible.builtin.shell: \"set -o pipefail &amp;&amp; echo \\\"{{ ipaadmin_password }}\\\" | kinit {{ ipa_admin }}\"\n\n    - name: Stage users\n      ansible.builtin.shell: 'ipa stageuser-add --first=\"{{ item.first }}\" --last=\"{{ item.last }}\" {{ item.name }}'\n      loop: \"{{ staged_users }}\"\n</code></pre> <pre><code>% vi create_ipa_groups.yml\n</code></pre> <pre><code>---\n- name: \"Create groups and add users to them\"\n  hosts: ipaserver\n  become: false\n  vars:\n    groups:\n      - name: admins\n        user:\n          - jsmith\n      - name: HelpDesk\n        nonposix: true\n        user:\n          - ldufus\n      - name: enrollers\n        nonposix: true\n      - name: corp\n        posix: true\n        user:\n          - brufus\n\n  tasks:\n    - name: Create all groups\n      freeipa.ansible_freeipa.ipagroup:\n        ipaadmin_password: \"{{ ipaadmin_password }}\"\n        groups: \"{{ groups }}\"\n</code></pre> <pre><code>% vi create_ipa_policy.yml\n</code></pre> <pre><code>---\n- name: \"Create policies\"\n  hosts: ipaserver\n  become: false\n  vars:\n    roles:\n      - name: \"Host Manager\"\n        privilege:\n          - Host administrators\n          - Host group administrators\n          - Netgroups administrators\n          - Host enrollment\n        user:\n          - syshostmgt\n      - name: \"helpdesk\"\n        privilege:\n          - Modify Group membership\n          - Modify Users and Reset passwords\n        group:\n          - HelpDesk\n      - name: \"Enrollment Administrator\"\n        privilege:\n          - Host Enrollment\n        group:\n          - enrollers\n\n  tasks:\n    - name: \"Ensure all roles exist\"\n      freeipa.ansible_freeipa.iparole:\n        ipaadmin_password: \"{{ ipaadmin_principal }}\"\n        name: \"{{ item.name }}\"\n        privilege: \"{{ item.privilege|default(omit) }}\"\n        group: \"{{ item.group|default(omit) }}\"\n        user: \"{{ item.user|default(omit) }}\"\n      loop: \"{{ roles }}\"\n</code></pre>"},{"location":"training/ex362/#new-passwords-expired","title":"New Passwords Expired","text":"<p>The common question we receive (and even the #freeipa IRC receive) is \"Why can't we just set the password to not be expired right away?\" See this page for information on why this is. You may also look at the pagure page and the Red Hat bugzilla related bug.</p>"},{"location":"training/ex362/#implement-single-sign-on-sso","title":"Implement Single Sign On (SSO)","text":""},{"location":"training/ex362/#create-an-sso-client","title":"Create an SSO client","text":"<p>To setup a very, very simple SSO, you can setup a simple location that requires a login.</p> <pre><code>% ipa-getkeytab -s idm1.example.com -p http/http.example.com -k /etc/httpd/conf/http.keytab\n% vi /etc/httpd/conf.d/location.conf\n&lt;Location \"/\"&gt;\n  AuthType Kerberos\n  AuthName \"IPA Kerberos Auth\"\n  # Keytab\n  Krb5Keytab /etc/httpd/conf/http.keytab\n  # Kerb settings\n  KrbMethodNegotiate on\n  KrbMethodK5Passwd on\n  KrbServiceName HTTP\n  KrbAuthRealms EXAMPLE.COM\n  KrbSaveCredentials off\n  Require valid-user\n&lt;/Location&gt;\n</code></pre>"},{"location":"training/ex362/#verify-sso-client-operation","title":"Verify SSO client operation","text":"<p>...</p>"},{"location":"training/ex362/#install-and-configure-an-idm-client","title":"Install and configure an IdM Client","text":""},{"location":"training/ex362/#install-and-configure-idm-clients","title":"Install and configure IdM Clients","text":"Client Name IP Address client.example.com 192.168.15.10 nfs.example.com 192.168.15.11 utility.example.com 192.168.15.12 Script or CLIAnsible <p>Note</p> <p>Depending on your architecture and setup, IdM clients should either be pointing directly at the IdM servers for DNS (at least two of them) or pointing at the DNS server in the environment that is delegating that domain to the IdM domain controllers.</p> <p>In our lab, our IdM servers are our only DNS servers, thus it makes sense that our clients should point to them. In that scenario, you would configure your DHCP server to use the IdM servers as the name servers and/or configure them in a static manner depending on your environment.</p> <pre><code># If your client is not pointing at the IdM DNS and you\n# don't have another DNS server that's performing delegation,\n# change your name servers.\n% nmcli con mod eth0 ipv4.dns 192.168.15.2\n% nmcli con mod eth0 +ipv4.dns 192.168.15.3\n% nmcli con mod eth0 ipv4.dns-search example.com\n\n# Optionally, if your clients don't have DHCP \n# reservations, set a static address.\n% nmcli con mod eth0 ipv4.address 192.168.15.10/24\n% nmcli con mod eth0 ipv4.gateway 192.168.15.1\n% nmcli con mod eth0 ipv4.method manual\n\n# It might be a good idea to set your hostname if you haven't already\n% hostnamectl set-hostname client.example.com\n% hostname client.example.com\n\n# Install the ipa-client packages\n% dnf install ipa-client -y\n# Optionally set --no-ntp to --ntp-server\n% ipa-client-install --realm EXAMPLE.COM --domain example.com --no-ntp\n. . .\n% id admin\nuid=686600000(admin) gid=686600000(admins) groups=686600000(admins)\n</code></pre> <p>Create the role for the client.</p> <pre><code>% vi role_ipa_client.yml\n---\n- name: \"Enroll client system\"\n  hosts: ipaclients\n  become: true\n\n  roles:\n    - role: freeipa.ansible_freeipa.ipaclient\n      state: present\n</code></pre> <p>Now run the role to setup the client.</p> <pre><code>% ansible-playbook role_ipa_client.yml\n</code></pre>"},{"location":"training/ex362/#configure-kerberized-services","title":"Configure Kerberized services","text":"<p>One of the things that you may end up doing, whether by hand or in an automated fashion, is creating kerberized services. In a later section, we address creating an NFS service for both a server and a client for the purpose of automating home directory mounts on a client when a user logs in. Before we dive into that, this just goes over simple kerberized service creation.</p> <pre><code># Create kerberos service\n% ipa service-add HTTP/http.example.com\n</code></pre> <p>Not only that, it's probably a good idea to actually get the keytab.</p> <pre><code>% kinit admin\n% ipa-getkeytab -s idm1.example.com -p HTTP/http.example.com -k /etc/krb5.keytab\n</code></pre> <p>For an example of automating keytab creation and retrieval, see the CentOS/FreeIPA page on this site.</p>"},{"location":"training/ex362/#manage-the-idm-integrated-certificate-authority","title":"Manage the IdM integrated certificate authority","text":""},{"location":"training/ex362/#configure-and-manage-a-certificate-authority","title":"Configure and manage a certificate authority","text":"<p>By default FreeIPA stands up its own CA. And because of this, this allows you or your workplace to be able to issue certificates, that can be used in a wide variety of services, the most common or obvious one would be for Apache httpd.</p> <p>There's a couple of ways you can get a certificate signed by FreeIPA. One method is to generate your own CSR and request it to be signed by FreeIPA. Another way is you can do it all from one command, <code>ipa-getcert</code>, and optionally, either have the certificate in PEM format or an NSS database. We'll address these examples.</p> <pre><code># Creating an SSL certificate in the PEM format\n% ipa service-add HTTP/http.example.com\n% ipa-getcert request -f /etc/pki/tls/certs/http.pem -k /etc/pki/tls/private/http.key -K HTTP/http.example.com -D http.example.com\nNew signing request \"20190902000318\" added.\n# Verify\n% ipa-getcert list\nNumber of certificates and requests being tracked: 1.\nRequest ID '20190902000318':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=FILE,location='/etc/pki/tls/private/http.key'\n        certificate: type=FILE,location='/etc/pki/tls/certs/http.pem'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=EXAMPLE.COM\n        subject: CN=http.example.com,O=EXAMPLE.COM\n        expires: 2021-09-02 00:03:19 UTC\n        dns: http.example.com\n        principal name: HTTP/http.example.com@EXAMPLE.COM\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-kp-clientAuth\n        pre-save command:\n        post-save command:\n        track: yes\n        auto-renew: yes\n\n# Create an SSL certificate in the NSS format\n% ipa-getcert request -d /etc/pki/tls/certs/nss -n 'Test' -K HTTP/http.example.com -D http.example.com\nNew signing request \"20190902000756\" added.\n# Verify\n% ipa-getcert list\n. . .\nRequest ID '20190902000756':\n        status: MONITORING\n        stuck: no\n        key pair storage: type=NSSDB,location='/etc/pki/tls/certs/nss',nickname='Test',token='NSS Certificate DB'\n        certificate: type=NSSDB,location='/etc/pki/tls/certs/nss',nickname='Test',token='NSS Certificate DB'\n        CA: IPA\n        issuer: CN=Certificate Authority,O=EXAMPLE.COM\n        subject: CN=http.example.com,O=EXAMPLE.COM\n        expires: 2021-09-02 00:07:57 UTC\n        dns: http.example.com\n        principal name: HTTP/http.example.com@EXAMPLE.COM\n        key usage: digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment\n        eku: id-kp-serverAuth,id-kp-clientAuth\n        pre-save command:\n        post-save command:\n        track: yes\n        auto-renew: yes\n</code></pre> <p>By default, when a certificate request is performed (and succeeds to be signed by the IPA CA), it is typically tracked and auto-renewed by default. This is done by the certmonger service, which eliminates the need to have to renew anything by hand.</p>"},{"location":"training/ex362/#create-secret-vaults","title":"Create Secret Vaults","text":"<p>When a domain supports the KRA role, it can hold password vaults or anything that's considered \"secret\". You can add the KRA role by installing the relevant package and installing the role.</p> Script or CLIAnsible <p>On each IdM server, you will need to enable the role.</p> <pre><code>% dnf install ipa-server-kra\n% ipa-kra-install\n</code></pre> <p>Create a private vault (as a user)</p> <pre><code>% kinit admin\n% ipa vault-add admin_private --desc \"Admin Private Vault\"\n</code></pre> <p>(more to come)</p> <p>If you are following the ansible method, you already have this role installed based on the inventory configuration. Now it's a matter of creating a simple secret.</p> <pre><code>---\n- name: \"Create Simple Vault\"\n  hosts: ipaserver\n  become: true\n\n  tasks:\n    - name: \"Create vault with simple data\"\n      freeipa.ansible_freeipa.ipavault:\n        ipaadmin_password: \"{{ ipaadmin_password }}\"\n        name: simplevault\n        description: \"A simple vault\"\n        username: admin\n        password: \"VaultPassword21!\"\n        data: \"Simple data\"\n      action: member\n</code></pre>"},{"location":"training/ex362/#create-and-configure-idm-users-and-user-policies","title":"Create and configure IdM users and user policies","text":"<p>In FreeIPA, there are two sets of policies:</p> <ul> <li>Role Based Access Control (RBAC) which are the permissions, delegated or otherwise, that allow (or deny) access to various pieces of FreeIPA. This can be users that have the ability to reset passwords, modify groups, or perhaps they can issue keytabs. This was partially covered in a previous section.</li> <li>Host Based Access Control (HBAC) which are the permissions granted to a user or users to access systems on various (PAM) services, such as ssh or logging into a desktop system (eg, GDM).</li> </ul>"},{"location":"training/ex362/#configure-policies-and-user-access","title":"Configure Policies and User Access","text":"<p>HBAC, or Host Based Access Controls, are permissions that grant user or users access to systems via any number of services. The services are PAM services. No doubt you have looked in <code>/etc/pam.d</code> before and have seen quite a few files or even modified them by hand at some point.</p> <pre><code>% ls -l /etc/pam.d/\ntotal 80\n-rw-r--r--. 1 root root 272 May 11  2019 atd\n-rw-r--r--. 1 root root 232 Apr 15 15:28 config-util\n-rw-r--r--. 1 root root 328 Nov  8  2019 crond\nlrwxrwxrwx. 1 root root  32 Jan 14  2020 fingerprint-auth -&gt; /etc/authselect/fingerprint-auth\n-rw-r--r--. 1 root root  70 Apr 24 06:35 ksu\n-rw-r--r--. 1 root root 715 Apr 24 05:38 login\n-rw-r--r--. 1 root root 154 Apr 15 15:28 other\n-rw-r--r--. 1 root root 168 Apr  6 20:08 passwd\nlrwxrwxrwx. 1 root root  29 Jan 14  2020 password-auth -&gt; /etc/authselect/password-auth\n-rw-r--r--. 1 root root 155 Apr  8 22:00 polkit-1\nlrwxrwxrwx. 1 root root  25 Jan 14  2020 postlogin -&gt; /etc/authselect/postlogin\n-rw-r--r--. 1 root root 640 Apr 24 05:38 remote\n-rw-r--r--. 1 root root 143 Apr 24 05:38 runuser\n-rw-r--r--. 1 root root 138 Apr 24 05:38 runuser-l\nlrwxrwxrwx. 1 root root  30 Jan 14  2020 smartcard-auth -&gt; /etc/authselect/smartcard-auth\nlrwxrwxrwx. 1 root root  25 Jun 15 10:18 smtp -&gt; /etc/alternatives/mta-pam\n-rw-r--r--. 1 root root  76 Apr  6 20:11 smtp.postfix\n-rw-r--r--. 1 root root 727 Feb  4  2020 sshd\n-rw-r--r--. 1 root root 214 Apr 23 20:48 sssd-shadowutils\n-rw-r--r--. 1 root root 566 Apr 24 05:38 su\n-rw-r--r--. 1 root root 154 Apr 23 19:40 sudo\n-rw-r--r--. 1 root root 178 Apr 23 19:40 sudo-i\n-rw-r--r--. 1 root root 137 Apr 24 05:38 su-l\nlrwxrwxrwx. 1 root root  27 Jan 14  2020 system-auth -&gt; /etc/authselect/system-auth\n-rw-r--r--. 1 root root 248 Jul 21 07:57 systemd-user\n-rw-r--r--. 1 root root  84 May 11  2019 vlock\n</code></pre> <p>On a typical Red Hat system, the most common ones (such as <code>su</code>, <code>sshd</code>, <code>sudo</code>) imports the <code>system-auth</code> file, so the login request is processed through those means. When defining HBAC rules, you either must allow \"all\" services or be selective. For example, if an HBAC rule allows \"sshd\", a user is allowed to ssh into a system, but wouldn't allow them to login locally on the console, as that goes through <code>login</code>. If you want the user to be able to run the <code>su</code> and <code>sudo</code> commands, you would also need to allow those services. Otherwise, the user is denied, even if sudo policies are available.</p> Script or CLIAnsible <pre><code>[label@mgt ~]$ sudo -i\n[sudo] password for label:\nsudo: PAM account management error: Permission denied\n</code></pre> <p>In FreeIPA, there is typically a rule already predefined that allows everyone to access all systems and all services. This can be removed or disabled and this removes host access to everything immediately. This is typically recommended in most environments where there are security standards and procedures in place.</p> <pre><code># To disable\n% ipa hbacrule-disable allow_all\n# To delete instead\n% ipa hbacrule-del allow_all\n</code></pre> <p>When performing a FreeIPA installation, it is possible to add <code>--no-hbac-allow</code> that will disable the allow_all rule.</p> <p>Below are some examples of adding access.</p> <pre><code># Allow all admins to access all systems\n% ipa hbacrule-add --hostcat=all --servicecat=all --desc='Allow all admins to access all systems' All_Admins\n% ipa hbacrule-add-user --groups=admins All_Admins\n\n# And then test...\n% ipa hbactest --rules=All_Admins --user=jsmith --host=client.example.com --service=login\n</code></pre> <pre><code># Allow the corp users to access the client system only using the sshd pam services\n% ipa hbacrule-add --desc='Allow corp users to access client on ssh' corp_access\n% ipa hbacrule-add-user --groups=corp corp_access\n% ipa hbacrule-add-host --hosts=client.example.com corp_access\n% ipa hbacrule-add-service --hbacsvcs=sshd corp_access\n\n# And then test...\n% ipa hbactest --rules=corp_access --user=brufus --host=client.example.com --service=sshd\n</code></pre> <p>To do this the ansible way, you can make a playbook like this.</p> <pre><code>---\n</code></pre>"},{"location":"training/ex362/#configure-roaming-or-automounted-home-directories","title":"Configure roaming or automounted home directories","text":"<p>You will need to configure your NFS server to serve up roaming home directories for users and then your client should have automouting enabled.</p> <p>Client Kerberos Service</p> <p>It may not be required to create an nfs kerberos service for the client. The ipa-client-automount command may already handle this but it does not hurt to create one. In fact, the host keytab is used on the client side anyway. Creating an NFS client keytab may have been required in the past.</p> <pre><code># IDM Steps\n% kinit admin\n% ipa service-add nfs/nfs.example.com\n% ipa service-add nfs/client.example.com\n\n# Setup the automounting locations\n% ipa automountmap-add default auto.home\n% ipa automountkey-add default --key \"/home\" --info auto.home auto.master\n% ipa automountkey-add default --key \"*\" --info \"-fstype=nfs4,rw,sec=krb5,soft nfs.example.com:/exports/home/&amp;\" auto.home\n\n# NFS Server Steps\n% dnf install nfs-utils -y\n% mkdir /exports/home\n% vi /etc/exports\n/exports/home *(rw,sec=sys:krb5:krb5i:krb5p)\n\n# Make the home directories for all users and move them to /export/home\n% mkhomedir_helper jsmith\n% mv /home/jsmith /export/home/\n\n# Create the necessary keytabs\n% kinit admin\n% ipa-getkeytab -s idm1.example.com -p nfs/nfs.example.com -k /etc/krb5.keytab\n\n# Verify keytab\n% klist -ket /etc/krb5.keytab\n\n# Enable and start nfs\n% systemctl enable nfs-server --now\n\n# Open the necessary firewall ports\n% firewall-cmd --add-service=nfs --permanent\n% firewall-cmd --complete-reload\n\n# Client steps\n% kinit admin\n% ipa-getkeytab -s idm1.example.com -p nfs/client.example.com -k /etc/krb5.keytab\n% ipa-client-automount --location=default\n\n# Verify keytab\n% klist -ket /etc/krb5.keytab\n</code></pre> <p>To test, login to the system via ssh or console and verify the home directory has mounted. /var/log/messages and secure will display errors in case of failure.</p>"},{"location":"training/ex362/#use-ansible-tower-to-configure-and-manage-idm-users","title":"Use Ansible Tower to configure and manage IdM Users","text":"<p>Several sections ago, we setup users either manually or via ansible playbooks. This would be generally the same, but may entail further configuration.</p> <p>With that said, Ansible Tower (AWX or AAP) is out of scope for this guide, as there is no straight forward way to set it up in a lab. AWX for example has a kubernetes operator and they encourage the use of docker for testing purposes. You can do this, but this is not formally tested.</p> <p>AAP on the other hand has installation steps for non-kubernetes environments. However, it is a Red Hat product and requires a subscription to use.</p>"},{"location":"training/ex362/#configure-idm-as-an-ldap-backend-for-external-services","title":"Configure IdM as an LDAP backend for external services","text":"<p>Most services and applications that authenticate users do typically have LDAP support. IdM can be used as an LDAP backend. You typically need only a few things to authenticate users from IdM to an application.</p> <ul> <li>Base DN, this always ends up being the top level of your domain: dc=example,dc=com - All accounts share this common base.</li> <li>Bind DN, this is a system account that binds to the directory to assist with searches and authentication</li> <li>Attribute mappings</li> <li>Groups, depending on the application</li> </ul> <p>Below is a table of common DN's you may specify in an application:</p> DN's Path Filter (if applicable) Base DN dc=example,dc=com User DN cn=users,cn=accounts,dc=example,dc=com uid=... Group DN cn=groups,cn=accounts,dc=example,dc=com (objectClass=groupOfNames) Bind DN uid=account,cn=sysaccounts,cn=etc,dc=example,dc=com <pre><code>% ipa user-show admin --all | grep '^dn'\n  dn: uid=admin,cn=users,cn=accounts,dc=example,dc=com\n</code></pre> <p>Below is a table of common attributes that may be used to map user information in the application.</p> Type Attribute Login Name uid First Name givenName Surname sn Email mail Groups memberOf Full Name cn <p>Below are two ways to create a bind account (bind DN). The first way is the LDAP way. The second way is the ipa-ldap-updater.</p> <pre><code>% kinit admin\n% ldapadd -Y GSSAPI\n. . .\ndn: uid=binder,cn=sysaccounts,cn=etc,dc=example,dc=com\nobjectclass: account\nobjectclass: simplesecurityobject\nuid: binder\nuserPassword: password123\npasswordExpirationTime: 20380119031407Z\nnsIdleTimeout: 0\n# Press CTRL+d\nadding new entry \"uid=binder,cn=sysaccounts,cn=etc,dc=example,dc=com\"\n</code></pre> <pre><code>% kinit admin\n% cat &lt;&lt; EOF &gt; binder.update\ndn: uid=binder,cn=sysaccounts,cn=etc,dc=example,dc=com\nadd:objectclass:account\nadd:objectclass:simplesecurityobject\nadd:uid:binder\nadd:userPassword:password123\nadd:passwordExpirationTime:20380119031407Z\nadd:nsIdleTimeout:0\nEOF\n% ipa-ldap-updater binder.update\n</code></pre> <p>When this account is created, you can then specify the full DN for that object into a bind DN field, along with it's password into an accompanying bind password field.</p> <p>If you'd like an example of setting up Ansible Tower (or AWX, the open source version of tower) against IdM, you can click here.</p> <p>Kerberos</p> <p>On some applications, it is possible to use kerberos authentication rather than a straight bind account. The general idea is the same when picking out the base dn, attributes, and the like. However, instead you would create an account with an accompanying LDAP/... service principal to do the authentication.</p>"},{"location":"training/ex362/#maintain-idm-services","title":"Maintain IdM services","text":""},{"location":"training/ex362/#configure-ntp-on-all-idm-components","title":"Configure NTP on all IdM components","text":"<p>NTP Server Setup</p> <p>The utility server that is part of this lab can be used to run an NTP server. See Setup an NTP Server.</p> <p>When the domain was initially setup, we may have used <code>--no-ntp</code>, including for the clients. This means there's no attempt to configure nor sync chrony. This automatically assumes chrony is working as intended with the default pool configured from the chrony package (or by IT policy via automation). However, for this lab, if you have an NTP server you want to use, you can set it up in the <code>/etc/chrony.conf</code> file.</p> <pre><code>% vi /etc/chrony.conf\n. . .\n# pool 2.centos.pool.ntp.org iburst\nserver 192.168.15.12\n. . .\n\n% systemctl restart chronyd.service\n% chronyc tracking\n</code></pre>"},{"location":"training/ex362/#configure-firewall-on-all-idm-components","title":"Configure firewall on all IdM components","text":"<p>If the domain is working, then you setup firewalld correctly.</p>"},{"location":"training/ex362/#back-up-an-idm-infrastructure","title":"Back up an IdM infrastructure","text":"<p>There are multiple ways you can backup IPA. </p> <ul> <li>Full backup: Default, shuts down IPA before performing a backup. This backs up with raw files. As such, it must be done offline.</li> <li>Data backup: Backs up a copy of the ldap data and the changelog (the IPA-REALM instance, DogTag, IPA backend). This can be done online.</li> </ul> Script or CLIAnsible <pre><code># Turns off IPA completely and perform a backup\n% ipa-backup\n# Backs up and gpg encrypts\n% ipa-backup --gpg --gpg-keyring=/root/keys\n</code></pre> <p>To restore a backup, the ipa-restore command is available.</p> <pre><code>% ipa-restore /var/lib/ipa/backup/\n</code></pre> <p>. . .</p>"},{"location":"training/ex362/#perform-a-backup-without-interruption-of-services","title":"Perform a backup without interruption of services","text":"<p>It is possible to perform a backup without taking down services. However, not everything will get backed up as a result.</p> Script or CLIAnsible <p>The backup command allows you to pass an online flag to ensure a backup taken doesn't down the IPA services. Note that not everything can be backed up online.</p> <pre><code># Backs up data only and doesn't take down IPA\n% ipa-backup --data --online\n# Backs up data only and gpg encrypts\n% ipa-backup --gpg --gpg-keyring=/root/keys --data --online\n</code></pre> <p>. . .</p>"},{"location":"training/ex362/#value-add","title":"Value Add","text":""},{"location":"training/ex362/#use-the-rest-api-to-query-idm","title":"Use the REST api to query IdM","text":"<p>When you invoke the <code>ipa</code> command, you are actually communicating with the API that runs on the IdM replicas. Operations done are sent via a POST with JSON data. The return data is also in JSON and translated to be readable in the terminal. Because it's JSON, custom scripts can be made with say perl or python that communicates with the API to send the calls, perhaps for specific tasks, jobs, or other operations that could be automated. You can also use <code>curl</code> to do this also if you so choose. </p> <p>The question becomes, \"well, how do I know the right data to send?\" You can issue the -vv switch to see the request being sent.</p> <pre><code>% ipa -vv ping\nipa: INFO: trying https://idm1.example.com/ipa/json\nipa: INFO: [try 1]: Forwarding 'schema' to json server 'https://idm1.example.com/ipa/json'\nipa: INFO: trying https://idm1.example.com/ipa/session/json\nipa: INFO: [try 1]: Forwarding 'ping/1' to json server 'https://idm1.example.com/ipa/session/json'\nipa: INFO: Request: {\n    \"id\": 0, \n    \"method\": \"ping/1\", \n    \"params\": [\n        [], \n        {\n            \"version\": \"2.251\"\n        }\n    ]\n}\nipa: INFO: Response: {\n    \"error\": null, \n    \"id\": 0, \n    \"principal\": \"admin@EXAMPLE.COM\", \n    \"result\": {\n        \"summary\": \"IPA server version 4.10.2. API version 2.251\"\n    }, \n    \"version\": \"4.10.2\"\n}\n--------------------------------------------\nIPA server version 4.10.2. API version 2.251\n--------------------------------------------\n</code></pre> <p>If you look at the 'request' section, you can see the data that is sent. Each request has a <code>method</code> and <code>params</code>, where method is a command to be excuted and params is simply an array that contains positional arguments and a dictionary of options. If you take a look at say, group-show, you would see a different request.</p> <pre><code>% ipa -vv group-show admins\nipa: INFO: trying https://idm1.example.com/ipa/session/json\nipa: INFO: [try 1]: Forwarding 'group_show/1' to json server 'https://idm1.example.com/ipa/session/json'\nipa: INFO: Request: {\n    \"id\": 0, \n    \"method\": \"group_show/1\", \n    \"params\": [\n        [\n            \"admins\"\n        ], \n        {\n            \"version\": \"2.230\"\n        }\n    ]\n}\n### Lots of output ###\n</code></pre> <p>Let's say I wanted to perform that in a simple bash script that uses curl. I would perform a <code>kinit</code> and then run the script below to have it login for me via kerberos and do the work.</p> <pre><code>#!/bin/bash\nipaReplica=idm1.example.com\ncookieJar=my.cookie.jar\n\n# Login with Kerberos\ncurl -v \\\n  -H referer:https://$ipaReplica/ipa \\\n  -c $cookieJar -b $cookieJar \\\n  --cacert /etc/ipa/ca.crt \\\n  --negotiate -u : \\\n  -X POST \\\n  https://$ipaReplica/ipa/session/login_kerberos\n\n# Send user_find method request\ncurl -v \\\n  -H referer:https://$ipaReplica/ipa \\\n  -H \"Content-Type:application/json\" \\\n  -H \"Accept:applicaton/json\"\\\n  -c $cookieJar -b $cookieJar \\\n  --cacert /etc/ipa/ca.crt \\\n  -d  '{\"method\":\"group_show/1\",\"params\":[[\"admins\"],{}],\"id\":0}' \\\n  -X POST \\\n  https://$ipaReplica/ipa/session/json\n</code></pre> <p>Any of the commands ran via <code>ipa</code> can be reviewed with the -vv switch so you can see what kind of call it's making and how it's making it. Thus, making it easier to tie into your own scripts. On the Web UI, you can go to IPA Server -&gt; API Browser to find more information on the specific API calls.</p>"},{"location":"training/ex362/#implement-an-idp","title":"Implement an IdP","text":"<p>While not strictly a certification objective at this present time, there may be a chance it could be. FreeIPA 4.10+ have the ability to implement authentication to external identity providers. FreeIPA allows you to use RADIUS proxy authentication for example, but using this same method, an OAuth 2.0 authorization server could be used as well. When it comes to an IdP, you can instead configure IdP clients using <code>ipa idp-add</code> and use software like Keycloak or otherwise that supports OAuth 2.0 workflows. We recommend checking out the FreeIPA Workshop Unit 12 for more details.</p>"},{"location":"training/ex362/#setup-an-ntp-server","title":"Setup an NTP Server","text":"<p>It is unlikely you'll need to setup an NTP server on an exam. However, rather than relying on the built-in pool servers provided by the chrony package, you may ask IdM to use another NTP server or pool for itself and the clients that enroll. Using the utility server, we can setup a quick NTP server.</p> <pre><code>% vi /etc/chrony.conf\n. . .\nallow 192.168.15.0/24\n\n% systemctl restart chronyd.service\n% firewall-cmd --add-service=ntp --permanent\n% firewall-cmd --reload\n</code></pre> <p>For your IdM domain, you can then add a SRV record. This is supposed to allow the client installation to automatically set the NTP server.</p> <pre><code>% ipa dnsrecord-add example.com _ntp \\\n  --srv-port=123 \\\n  --srv-target=utility.example.com. \\\n  --srv-weight=100 \\\n  --srv-priority=0\n</code></pre>"},{"location":"training/ex362/#active-directory-trust","title":"Active Directory Trust","text":"<p>Active Directory trusts are no longer part of the main objectives for the exam. However, that does not mean it will not be part of it. It is important to still know how to set it up manually. In the installation section of this guide, there are commented variables for a trust configuration.</p>"},{"location":"training/ex362/#create-trust-relationships-with-active-directory","title":"Create trust relationships with Active Directory","text":"<p>AD Setup</p> <p>We do not cover setting up an AD forest here. This is out of scope for this series. If you are using Server 2016 or higher and you are using \"core\", look up the commands:</p> <p>Install-WindowsFeature AD-domain-services Import-Module ADDSDeployment Install-ADDSForest</p> Server Name IP Address ad.example.net 192.168.15.15 <p>For our trust, the AD server will need to be configured to be the example.net domain with the hostname of ad.example.net. This way, we are not colliding in DNS and both AD and IdM should be able to communicate with each other as two separate forests. It is recommended to use Windows Server 2016 (with the same domain functional level) for this setup, as experience with that product is a recommended prerequisite for the exam.</p> <pre><code>% dnf install ipa-server-trust-ad -y\n% firewall-cmd --add-service=freeipa-trust --permanent\nsuccess\n% firewall-cmd --reload\nsuccess\n% ipa-adtrust-install\n. . .\n# This is the admin@REALM IPA account\nadmin password:\n\nWARNING: The smb.conf already exists. Running ipa-adtrust-install will break your existing samba configuration.\n\n# Type 'yes' here\nDo you wish to continue? [no]: yes\n\nDo you want to enable support for trusted domains in Schema Compatibility plugin?\nThis will allow clients older than SSSD 1.9 and non-Linux clients to work with trusted users.\n\n# You can press enter here to accept the default. If you have BSD, Solaris, Omnios, HP-UX, AIX, or RHEL 5 and older clients\n# you may want to enable this. Some apps may benefit from this also.\nEnable trusted domains support in slapi-nis? [no]:\n\nEnter the NetBIOS name for the IPA domain.\nOnly up to 15 uppercase ASCII letters, digits and dashes are allowed.\nExample: EXAMPLE.\n\n# You can accept the default or put your own.\nNetBIOS domain name [IPA]: IPA0\n\nWARNING: 4 existing users or groups do not have a SID identifier assigned.\nInstaller can run a task to have ipa-sidgen Directory Server plugin generate\nthe SID identifier for all these users. Please note, in case of a high\nnumber of users and groups, the operation might lead to high replication\ntraffic and performance degradation. Refer to ipa-adtrust-install(1) man page\nfor details.\n\n# You should always say yes.\nDo you want to run the ipa-sidgen task? [no]: yes\n\n. . .\n\n# This will complete and list ports to open and such. We did this earlier.\n</code></pre> <p>Now that the AD trust components are prepped, depending on the setup, we'll need to do some DNS zone forwards. It is likely you have IPA and AD running their own DNS. Note: This may not be the case in a real world scenario.</p> <pre><code># We need to create a forward zone here for the example.net zone\n% ipa dnsforwardzone-add example.net --forwarder=192.168.15.15 --forward-policy=only\nServer will check DNS forwarder(s).\nThis may take some time, please wait ...\n  Zone name: example.net.\n  Active zone: TRUE\n  Zone forwarders: 192.168.15.15\n  Forward policy: only\n\n# We should probably create a few dns records...\n# Assuming the AD netbios name is EXAMPLEAD, use the syntax hostname.NETBIOS here\n% ipa dnsrecord-add example.com ad.EXAMPLEAD --a-ip-address=192.168.15.15\n# Same idea here, but we're only doing the netbios name and saying the name server record is the AD server\n% ipa dnsrecord-add example.com EXAMPLEAD --ns-hostname=ad.EXAMPLEAD\n\n# We need to allow the zones to be transferable to the AD domain\n% ipa dnszone-mod example.com --allow-transfer=192.168.15.15\n</code></pre> <p>On the AD side, we need to create the IPA zone. It's absolutely required.</p> <p><pre><code>C:\\Windows\\System32&gt;dnscmd 127.0.0.1 /ZoneAdd example.com /Secondary 192.168.15.2\n</code></pre> You should probably double check that the DNS records are returning on the IDM servers.</p> <pre><code>% dig _ldap._tcp.example.com SRV\n; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; SRV _ldap._tcp.example.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 14793\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;_ldap._tcp.example.com.      IN      SRV\n\n;; ANSWER SECTION:\n_ldap._tcp.example.com. 86400 IN      SRV     0 100 389 idm1.example.com.\n_ldap._tcp.example.com. 86400 IN      SRV     0 100 389 idm2.example.com.\n\n;; AUTHORITY SECTION:\nexample.com.          86400   IN      NS      idm1.example.com.\nexample.com.          86400   IN      NS      idm2.example.com.\n\n;; ADDITIONAL SECTION:\nidm1.example.com.      1200    IN      A       192.168.15.2\nidm2.example.com.      1200    IN      A       192.168.15.3\n\n# Same with the AD records\n% dig _ldap._tcp.example.net SRV\n; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-61.el7 &lt;&lt;&gt;&gt; SRV _ldap._tcp.example.net\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 12195\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 4, ADDITIONAL: 9\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;_ldap._tcp.example.net.       IN      SRV\n\n;; ANSWER SECTION:\n_ldap._tcp.example.net. 600    IN      SRV     0 100 389 ad.example.net.\n\n. . .\n</code></pre> <p>Now that they are returning, intiate the trust.</p> <pre><code>% ipa trust-add --type=ad example.net --admin Administrator --password\nActive Directiron domain administrator's password: (type password here)\n-----------------------------------------------------\nAdded Active Directory trust for realm \"example.net\"\n-----------------------------------------------------\n  Realm name: example.net\n  Domain NetBIOS name: EXAMPLEAD\n  Domain Security Identifier: S-1-5-21-XXXXXXXXXX-YYYYYYYYY-ZZZZZZZZZZ\n  Trust direction: Trusting forest\n  Trust type: Active Directory domain\n  Trust status: Established and verified\n\n# Check that an AD user is resolvable. You can do this with DOMAIN\\name or name@DOMAIN\n% id EXAMPLEAD\\\\administrator\n% id administrator@example.net\n</code></pre>"},{"location":"training/ex362/#authenticate-users-with-an-active-directory-domain","title":"Authenticate users with an Active Directory domain","text":"<p>As we disabled the allow_all rule, let's create a set of groups first and then the HBAC rule.</p> <pre><code># Create the starting AD group\n% ipa group-add adusers\n# Create an external group. This is required for AD users.\n% ipa group-add --external adgroup_external\n# Add an AD user into the external group\n% ipa group-add-member --users=administrator@example.net adgroup_external\n# Make the external group a member of ad users\n% ipa group-add-member --groups=adgroup_external adusers\n</code></pre> <p>As we've made an HBAC rule before, this should be simple.</p> <pre><code>% ipa hbacrule-add --hostcat=all --servicecat=all --desc='ad users all access' adusers_access\n% ipa hbacrule-add-user --groups=adusers adusers_access\n% ipa hbactest --rules=adusers_access --user=administrator@example.net --host=client.example.com --service=sshd\n</code></pre> <p>The test should pass without any issues.</p> <p>Group Types</p> <p>While this may not be required information while working on the exam, it's important to understand that there are different group types in AD and the behavior changes based on the group type.</p> <p>Groups in Active Directory have three types. These three types can actually change the behavior of how SSSD on the IPA domain controllers resolve them or if they'll even be resolvable at all. The three types are 'Domain Local', 'Global', and 'Universal'. If at all possible, avoid groups being 'Global'. Domain Local or Universal is recommended.</p>"}]}